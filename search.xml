<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Web应用部署注意事项</title>
    <url>/2018/05/15/deployment/</url>
    <content><![CDATA[<p>部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。
<span id="more"></span></p>
<h1 id="部署之前">部署之前</h1>
<h2 id="开发时">开发时</h2>
<p>早在开发阶段就应当注意整理和维护应用配置，包括但不限于：</p>
<ol type="1">
<li>各数据源的配置（地址、端口、实例、用户名、密码）与涉及的配置文件；</li>
<li>外部接口的地址（IP、端口、路径等）与涉及的配置文件；</li>
<li>依赖的外部程序（例如ImageMagick等）；</li>
<li>应用中开发模式/生产模式的切换开关（如果有的话）；</li>
<li>涉及文件操作的目录路径（如果需要在应用程序目录中读写文件的话）；</li>
<li>准确的数据库表结构（字段名、类型、长度、Nullable）、索引、序列（如使用Oracle等数据库）、触发器、存储过程、函数以及字典数据内容。在维护数据库时应注意同步数据库设计文档、开发库、测试库，系统部署时还要同步维护生产库。</li>
</ol>
<p>开发过程中，如无特殊需求，应避免将应用地址、端口或路径写死，否则的话，一旦需要更换地址或路径就会遇到很大的麻烦。</p>
<h2 id="上线前">上线前</h2>
<p>准备部署之前，应完整识别出开发/测试环境与生产环境配置的差异，避免疏漏。除此之外，强烈建议对各服务器资源和部署步骤进行记录，例如：</p>
<ol type="1">
<li>各服务器内网IP地址、公网IP地址、操作系统、CPU、内存、硬盘空间；</li>
<li>各服务器用途（数据库/应用节点/负载均衡等）；</li>
<li>各服务器主要应用及版本；</li>
<li>各服务器登录方式；</li>
<li>应用或数据部署路径；</li>
<li>系统设置，包括防火墙、参数设定等。</li>
</ol>
<p>操作生产环境之前，最好找个类似的测试环境进行测试，了解如何处理意外情况（例如断电、死机、系统慢等）。</p>
<p>如果预计需要频繁部署，建议写部署脚本，配置Jenkins。</p>
<h1 id="部署中">部署中</h1>
<p>每次正式升级之前一定要打基线，从基线取代码，打整包，生产环境配置文件用事先预备好的备份覆盖升级包，不要单独换文件！换文件升级，有第一次，就会有第二次。越是换文件，后面就越不敢打整包，几个星期以后，全世界就没有人知道生产环境与本地代码有什么区别了。</p>
<h2 id="数据库">数据库</h2>
<p>部署数据库时应注意：</p>
<ol type="1">
<li>确保数据库软件已正确安装和启动；</li>
<li>表空间、账号密码正确；</li>
<li>字符集配置正确；</li>
<li>正确建立表结构、索引、序列、触发器、存储过程、函数等；对于升级，正确将旧结构修改成新结构；</li>
<li>正确初始化字典数据；</li>
<li>根据实际情况调整连接数和 Max open files 等设置。</li>
</ol>
<h2 id="应用服务器">应用服务器</h2>
<p>部署应用时需要注意：</p>
<ol type="1">
<li>各软件（如Apache、PHP和应用所需外部程序）已正确安装，环境变量、端口、证书（HTTPS）正确配置；</li>
<li>程序代码或编译后文件已放到正确位置；</li>
<li>如果应用不是以root身份启动，那么程序文件已设置正确所有者；</li>
<li>应用程序配置、数据源已按生产环境进行修改；</li>
<li>系统防火墙和相关外部接口已正确配置；</li>
<li>如果系统规模较大，Max open files 数量（/etc/security/limits.conf）和
fs.file-max（/etc/sysctl.conf）已进行调整；</li>
<li>了解如何取用后台日志。</li>
</ol>
<h2 id="负载均衡">负载均衡</h2>
<ol type="1">
<li>注意各节点应配置好；</li>
<li>注意负载均衡算法的选择；</li>
<li>注意会话保持的设置。</li>
</ol>
<h1 id="部署之后">部署之后</h1>
<p>部署时或部署完成后，仍然要对资源和使用情况进行整理总结，以便后续运维。</p>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>项目实施</tag>
      </tags>
  </entry>
  <entry>
    <title>接口设计与联调经验</title>
    <url>/2018/07/14/cross-company-debug/</url>
    <content><![CDATA[<p>不同系统之间存取数据，技术上最简单的方式就是提供接口。既然是不同系统，那么大家很可能不是同一家单位，需要留意的事情也会更多。本文记录了一些接口设计、联调前后需要考虑的事情。总体上来讲，我们既要保证准确实现功能，又要留个心眼，保护自己的利益，避免让自己吃亏。
<span id="more"></span></p>
<h1 id="设计">设计</h1>
<p>虽然接口的原理很简单，开发工作量可能也比其他开发工作少很多，但是需要留意，在业务问题上“我这样想”不代表“对方也会这样想”，并且开发时的沟通成本往往会比较高，上线之后一旦出现故障可能还会互相踢皮球，因此也不能把设计工作想象得太简单。</p>
<ol type="1">
<li>约定好具体的数据格式、字符编码和收发方式！例如“传JSON”既可能是直接HTTP
POST一段JSON（application/json），也可能是调用WebService，里面参数为JSON（application/xml），前者通常是在用户浏览器上通过AJAX调用，后者可能是自己后台直接调用对方的服务器，不经过用户的界面。如果连这个都弄错，后续发现问题时就要全部推倒重来了；</li>
<li>确保双方对于每个函数、每个参数的理解是一致的。特别是业务系统，对方对业务场景与业务的理解可能与我们很不一样，因此要多进行确认，及时更新和完善文档；</li>
<li>接口定义要慎重，因为调整定义的成本比调整实现的成本高得多，而且接口定义和值域不要定得太死（<span class="exturl" data-url="aHR0cHM6Ly8zNmtyLmNvbS9wLzIxNzczNi5odG1s">即使是性别也不一定只有男、女和其他<i class="fa fa-external-link-alt"></i></span>），要有能够调整和扩展的空间；</li>
<li>搞清楚接口调用时机、频率，估计一下接口调用数据规模，避免因为频率不当或者数据规模太大而出问题；</li>
<li>有异常处理和超时机制，能够正确处理目标服务器宕机、404、500、长时间不返回等情况。接口恢复后，故障期间产生的数据能够正确消化掉；</li>
<li>检查输入数据是否合法（格式正确、符合业务要求以及具有业务权限），拒绝格式不合规范的数据，避免出现类似用户改个ID就能查看或修改别人数据的情况；</li>
<li>对于有状态的数据，约定好重复发送请求（例如用户或程序重复提交工作单）的后果；</li>
<li>考虑专门的日志记录，例如使用专门的文件或在数据库建立接口日志表；</li>
<li>有认证机制和访问控制机制，防止接口被无关厂商及人员冒用或恶意调用。</li>
</ol>
<h1 id="联调">联调</h1>
<p>联调最大的问题就是沟通成本，因为沟通成本高所以容易积攒问题，因此建议：</p>
<ol type="1">
<li>不定期组织交流，有条件当面聊的话最好当面聊，没有条件的话也要有语音视频会议，避免纯文字交流，免得越做偏差越大；</li>
<li>早联调、多联调，早点暴露问题，不要等一切都准备好之后才开始调；</li>
<li>有条件的话准备一个能够随时调用的环境（当然也要有配套的测试数据）。</li>
</ol>
<p>如果是不同公司之间进行合作，不要忘记留证据，具体而言：</p>
<ol type="1">
<li>记录哪天、与哪个人、调试了什么东西、结果如何；</li>
<li>各接口函数要输出日志，记录时间、原始数据和一些关键数据；</li>
<li>重要内容留截图。</li>
</ol>
<p>推荐两个调试接口的软件，一个是专门测WebService的<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29hcHVpLm9yZw==">SoapUI<i class="fa fa-external-link-alt"></i></span>，另一个是可以测各种请求的<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vYXBwcw==">Postman<i class="fa fa-external-link-alt"></i></span>。对我个人而言，由于我们项目经常是WebService里面套JSON，所以SoapUI用得并不舒服，不如自己抓到调用WebService的原始请求内容然后全部扔到Postman中调试：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ns1:</span>xxxxxmethod</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>ns1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://service.xxx.xxxcompany.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg0</span><span class="token punctuation">></span></span>
                &#123;
                    "param1": "xxx",
                    "param2": "yyy",
                    ...
                &#125;
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg0</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ns1:</span>xxxxxmethod</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果主要系统已经上线了，注意不要在生产环境或使用生产库直接联调，而是要准备一个和生产环境架构相似的测试环境，在测试环境上进行联调。在生产环境和生产库上，双方顶多测一下接口和功能通没通，不要测别的东西。</p>
<h1 id="运行">运行</h1>
<p>上线之后更要专门记录接口的调用情况，做到有据可查。清楚地了解接口调用情况、频率以及状态，在出现故障时可以尽量避免踢皮球和承担无谓责任。有必要的话还应该实行访问控制，一旦遭遇攻击或疑似攻击（例如调用频率太高等）时可以方便地进行处理。</p>
<p>运行之后，假如要对接口进行重大调整，那么要确保向后兼容，除非非常确定大家不会再使用旧版定义了。</p>
<h1 id="补充技巧">补充技巧</h1>
<h2 id="甩锅">甩锅</h2>
<p>我们系统有一个接口经常出问题，责任经常在对方，但是用户总给我们客服打电话，而且对方公司经常消极对待，于是我一怒之下把对方公司的名字和客服电话写到展示给用户的错误信息里面了。</p>
<p>勇于承担责任是男人，但在职场上勇于承担责任可不会被夸，所以只要不是自己责任，该甩的锅就得甩掉。</p>
<h2 id="内网穿透">内网穿透</h2>
<p>理想情况下应该建立一个双方都便于访问的开发测试区。如果没有条件或者来不及准备，而且双方公司都能访问互联网，可以通过内网穿透的方法把本地应用映射到公网上。</p>
<p>操作步骤<a href="/2018/07/14/tunnel/">参见此处</a>。</p>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>项目实施</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透教程</title>
    <url>/2018/07/14/tunnel/</url>
    <content><![CDATA[<p>出于跨公司联调需要，我们需准备能让对方公司访问到的URL。如果公司并不具备这个条件（或者拒绝开通环境），我们如何自行准备环境呢？</p>
<span id="more"></span>
<p>计划以内网穿透方法进行联调之前，请留意自己公司的管理制度里面有没有网络限制，以免倒霉被抓挨罚。如果能以遵守制度的方式将内网端口映射到公网，建议走公司的手续。</p>
<p>操作之前需要去搞一台VPS服务器。VPS有国内、国外的，优缺点分别如下：</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 16%" />
<col style="width: 49%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th>地区</th>
<th>优势</th>
<th>缺点</th>
<th>代表厂商</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>国内（不含香港）</td>
<td>网速快<br>网络稳定</td>
<td>价格较贵，多数需月付<br>未经备案通常会禁止使用80、443、8080等端口，而备案耗时较长，会延误工作</td>
<td>阿里云、腾讯云等</td>
</tr>
<tr class="even">
<td>香港</td>
<td>网速快<br>不需要备案，可直接使用80、443等端口</td>
<td>价格较贵<br>有被墙的风险</td>
<td>暂无推荐，可自行Google查询</td>
</tr>
<tr class="odd">
<td>国外</td>
<td>价格便宜，有些厂商甚至可按实际使用时间支付，随时买随时扔<br>不需要备案</td>
<td>网络不稳定，容易被墙<br>需要能付外币的信用卡</td>
<td>Vultr、DigitalOcean、Linode</td>
</tr>
</tbody>
</table>
<p>以Vultr为例。选择该厂商，有以下几个原因：</p>
<ul>
<li>随时用，随时扔，按实际使用时间付费</li>
<li>可以使用微信、支付宝付款</li>
</ul>
<p>不过该厂商服务器也有几个坑需要留意：</p>
<ul>
<li>数据中心建议选东京或洛杉矶，这两个网络相对而言比较好</li>
<li>不要选择$2.5的机器，那个是纯IPv6访问，你可能连不上</li>
<li>由于中国人经常买这家服务器来翻墙，Vultr的服务器在国内访问效果并不太好，有时需要刷IP（买新机器然后删除旧机器）才能在国内连接上。服务器Ping不通，或者能Ping通但是SSH连接超时，这都是被墙的表现，再买一台新机器并删除旧的机器即可。另外有时候需要多刷几次。</li>
</ul>
<p>为了方便，新机器操作系统选择Ubuntu。启动完成之后，先在公司Ping一下，没问题的话就可以用PuTTY等软件建立连接了。输入Vultr网站上面给你提供的服务器IP（端口22）、用户名和密码，然后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将其中的<code>GatewayPorts no</code>改成<code>yes</code>，没找到的话就在文件末尾追加一行，保存。然后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>准备工作就做好了。</p>
<p>如果选择CentOS，它会默认开启防火墙，所以要确认一下防火墙状态，然后关闭防火墙或者开放待使用端口。</p>
<p>联调时先去下载PuTTY，启动，在里面输入服务器地址和端口（默认22），并且按下图进行设置</p>
<figure>
<img src="/img/2018-07-14-cross-company-debug/putty-tunnel.png"
alt="PuTTY设置" />
<figcaption aria-hidden="true">PuTTY设置</figcaption>
</figure>
<p>不要忘记点Add按钮。假如本机是<code>http://172.18.106.3:8080</code>，服务器IP是198.13.60.108，你选择的端口是8080，那么登录成功后就可以通过<code>http://198.13.60.108:8080</code>来访问自己的应用了。</p>
<p>因为是外国服务器，所以连接可能不太稳定，需要不定期检查连接，断了的话随时重新连。</p>
<p>如果需要域名，可以去国外的<span class="exturl" data-url="aHR0cHM6Ly9uYW1lY2hlYXAuY29t">Namecheap<i class="fa fa-external-link-alt"></i></span>上面购买个便宜的外国域名（注意：需要准备Visa/MasterCard信用卡）。如果还需要HTTPS，可以使用Let's
Encrypt。国内域名也可以，除了需要实名认证以外通常也没什么问题（国内域名、国外服务器不用备案，国内服务器才需要备案）。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>给校招新员工分享的一点人生的经验</title>
    <url>/2018/07/15/to-new-employee/</url>
    <content><![CDATA[<p>我不是长者，不是新闻工作者，工作时间不长，见得也不够多，但是还是有必要向校招来的新员工分享一点人生的经验。
<span id="more"></span></p>
<h1 id="别让自己挨骂">别让自己挨骂</h1>
<p>第一印象很重要，而且软件开发是团队工作，如果一开始就给人留下好印象，以后也会过得舒服些；如果不认真工作，或者干得太差劲，给人留下坏印象，那么以后的日子也会过得不舒服。改变印象并不容易，因此入职初期就应当注意工作方法，千万不要犯忌。</p>
<h2 id="及时报告">及时报告</h2>
<p>中国有句古话叫做“闷声发大财”，但是软件开发工作需要经常沟通，所以闷声发不了财。以下两点值得特别注意：</p>
<ol type="1">
<li>领导和同事安排的任务，完成之后一定要报告。大家都很忙，不可能一直盯着你的进度，而且很多任务需要按顺序进行，如果你早就完成却不吱声，有可能耽误事，甚至被误会成没工作。</li>
<li>如果遇到困难，可能无法在预期时间内完成任务，一定要立刻汇报。及早暴露问题通常不会挨骂，而且能让领导和同事及时研究对策。假如给你分配一个限一周内完成的任务，你等到最后一天领导问你的时候才说“自己什么都不会，所以没做出来”，后果可想而知。</li>
</ol>
<p>工作过程中会经常遇到问题，包括技术方面的、业务方面的以及现实层面的。有问题很正常，但是攒着不解决就不正常了。遇到问题的时候，可以先尝试找资料，如果还是无法理解，或者忙活了两三个小时还是没有进展，那么请直接去找同事。很多时候你解决不了的问题，有经验的同事很快就能解决。</p>
<h2 id="注意记录">注意记录</h2>
<p>重要事项应当作记录，而且要及时维护。像需求变更、数据库表结构变更之类的重要变更，或者是数据库表结构这种需要各库同步的东西，如果没有准确的记录，结果会很糟糕。</p>
<p>与用户或其他单位交流时更要注意留存证据，有条件的话最好截图/录音。开会、评审等活动必须有会议纪要和与会者的签名，以保障自己的利益。</p>
<p>开发工作中经常有很多琐事和问题，这些也应当记录下来，不然的话很快就忘记了。除此之外，建议不定期地总结一下自己手头的工作，完善程序注释，并且写出一些文档（例如自制构件的使用方法、某项工作的操作步骤或者配置注意事项等）。这种文档不是为了交差或者给领导汇报，而是为了方便让别人帮忙或把工作推出去。</p>
<h3 id="记录的形式">记录的形式</h3>
<p>记录的形式很多，例如：</p>
<ol type="1">
<li>纸质记录：笔记本、便利贴</li>
<li>以笔记形式记录：OneNote、Evernote、Leanote</li>
<li>以博客形式记录：WordPress、Hexo</li>
<li>以维基形式记录：MediaWiki</li>
</ol>
<p>如果程序会暴露到互联网上，请注意保护个人隐私和公司机密。</p>
<h2 id="避免挖坑">避免挖坑</h2>
<p>我觉得，如果你在同事中的口碑很差，那么大概有三种可能：一种是太烦人，一种是根本不好好干活，还有一种是老给其他人挖坑。挖坑的情况有很多种，比方说代码极其难懂，或者留下了很久以后才被发现的缺陷，或者经常制造缺陷，或者把好好的东西改坏等等。</p>
<p>后来者不熟悉项目情况，无论水平多高，接手新工作都有可能出问题，所以工作时候务必细心，抠得细一些，不懂要多提问。事实上，除非为了纯粹地赶进度，我们要的不是迅速完成工作，而是在合理时间范围内尽可能高质量地完成工作。</p>
<p>建议一开始不要急着投入工作。先去花点时间，大概了解一下自己工作的内容，了解相关的业务场景和需求。换句话说，先去弄清楚：项目是做什么的？我手头的工作是做什么的？面向的群体是谁？目标群体的关注点是什么？</p>
<p>投入实际开发之前肯定要搭建开发环境。不要光想着成功启动，有闲工夫的话还要了解一下项目的大概代码结构、系统概况，了解各环境与数据库，掌握编码规范、开发规范或注意事项等，搞清楚什么事情不能做，什么事情需要请示或评审。</p>
<p>若可以通过仿写其他代码来完成工作，那么建议找熟悉程序的老员工来评估一下代码质量，让他们确认一下有没有前人挖过的坑。</p>
<p>开发完成之后务必要自测，而且不要光测合法情况，还要测试非法情况。如果是修改功能，那么要测一下原来的功能还能否正常工作。鉴于新人不熟悉项目，老员工有必要主动去评审代码，指导或监督新人进行测试，而且“授人以鱼不如授人以渔”。</p>
<h1 id="提高知识水平">提高知识水平</h1>
<p>无论准备往技术方向发展，还是往管理方向发展，都要提高自己的知识水平。</p>
<p>一开始什么都不懂是正常现象。学校所学基本上与工作脱节，所以实际上很多人都是白纸一张。这也意味着自学能力非常重要，毕竟工作一段时间之后还是什么都不懂就不正常了。</p>
<p>在此提醒：争取做技术或管理专家，避免做业务专家，因为后者主要是无谓的重复劳动，而且太精通业务的话容易陷坑里出不来，换家公司的话业务知识积累也会全部白瞎。</p>
<h2 id="google">Google</h2>
<p>在技术方面遇到问题，建议直接用Google搜英语，搜不到的话可以去StackOverflow上面提问。想找一些程序的话，也可以去GitHub搜一下有没有现成的开源程序。有很多问题用英语可以比较容易地找到答案，但是用百度搜只能搜到翻来覆去的重复结果，或者干脆搜不到。</p>
<h3 id="关于翻墙">关于翻墙</h3>
<p>我觉得翻墙就应该是一种常识般的存在。如果没翻过墙，可以先去<span class="exturl" data-url="aHR0cHM6Ly92dWx0ci5jb20=">Vultr<i class="fa fa-external-link-alt"></i></span>买台服务器，用<span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vNDg2Lmh0bWw=">这里<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vNDg5Lmh0bWw=">这里<i class="fa fa-external-link-alt"></i></span>的脚本安装服务器端Shadowsocks，然后再<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3MvcmVsZWFzZXM=">下载客户端<i class="fa fa-external-link-alt"></i></span>，与服务器进行连接。</p>
<p>稍微离个题，很多人在翻墙之后会很自然地试图接触政治内容，我的建议是：不要随便参与政治，无论它是你所认为的正确内容还是错误内容。墙外的情况很复杂，什么人都有，而且很多事情和你想的完全不一样。如果看到与自己认识不同的言论之后情绪激动，那么请直接远离政治，不要尝试去捍卫正确立场。乱来的话只会让自己不爽，甚至招来麻烦。</p>
<h2 id="加班">加班</h2>
<p>如果还没抱老婆孩子，也不急着操心安家的事情，建议平时稍微加点班。不是因为工作干不完或者干额外工作而加班，而是挤一些闲工夫来加强学习。工作很辛苦，精力不会再像学生时候那样旺盛，两三年以后可能连刷夜打游戏都扛不住，所以充电要趁早。</p>
<h2 id="玩">玩</h2>
<p>这里的“玩”指的不是打游戏，而是在技术层面上折腾，<span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDE3LzA0L1RoZS1JbXBvcnRhbmNlLW9mLVpoZXRlbmcuaHRtbA==">通过折腾来提升自己的水平<i class="fa fa-external-link-alt"></i></span>。</p>
<p>以我自己举例：</p>
<ol type="1">
<li>花点时间学习一门副语言Python，写一些小程序玩。有需要的话便可以随手写一个辅助工作的脚本，例如调试接口等。</li>
<li>搞一个VPS，除了用来翻墙，还能用来学习Linux系统管理（<a
href="/plus1s">也可以用来续秒</a>）。折腾LAMP之类东西还有助于加深对网络的认识。</li>
<li>在目前参与开发的系统中乱点，自己造数据来办理业务，有助于加深对系统整体和各具体业务的了解。另外为了快速准备业务数据需要使用PL/SQL。</li>
</ol>
<p>假如只是折腾玩，对网络没有特殊要求，建议搞国外主机，一方面是因为比国内便宜，另一方面是因为<span class="exturl" data-url="aHR0cDovL2NuLnVuY3ljbG9wZWRpYS53aWtpYS5jb20vd2lraS8lRTYlOUMlODklRTUlODUlQjMlRTklODMlQTglRTklOTclQTg=">有关部门<i class="fa fa-external-link-alt"></i></span>管不着，不需要乱七八糟的手续。</p>
<p>折腾VPS需要花钱，建议提前准备一张有VISA或MasterCard标志的信用卡。另外，如果已经搞到VISA/MasterCard卡，可以去Google
Compute Engine注册新用户，把信用卡绑上，然后就可以免费使用一年。</p>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 校招（一）：如何找工作</title>
    <url>/2018/09/12/find-jobs/</url>
    <content><![CDATA[<p>还有不到一年就要毕业，自身水平一般般，BAT大厂无望，如何去找普通一些的Java
Web工作？</p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<ul>
<li>本文纯属个人意见，仅供参考。</li>
<li>本文是给普通人写的。如果你是大佬，人在国外，或者刚下飞机，或者家里有矿，或者上头有人，或者情况稍微差点，只能去BAT那种公司，那么请直接忽略本文。</li>
</ul>
<h1 id="了解一下行业">了解一下行业</h1>
<h2 id="工作地点">工作地点</h2>
<p>优先选择北京、上海、深圳与杭州。虽然北京、上海、深圳房价太高，就算跑远郊买房也很费劲，但是城市大、机会多，技能提升相对较快。前期省吃俭用、认真攒钱的话，会比直接去二线城市攒得多。</p>
<p>次优选择是成都、南京、武汉、厦门等，这些城市有软件行业，但并不太“互联网”。工资比一线城市低，而生活成本也相对低些（而且至少能够得到郊区的房子），生活质量相对高些。<strong>推荐一线城市打拼，二线城市安家</strong>。</p>
<p>如果你老家在北方，或者远一点，在东北或西北，而且不想再往南走，那么济南、青岛、大连和西安是北方最不差的选择。与北方其他地方比，至少还能找些工作养家糊口。由于这四个地方IT行业环境比较差，不在乎地域的话就不要考虑了。</p>
<p>至于天津和广州——这两个地方IT岗位不多，房价又太高，性价比实在太低。</p>
<h2 id="区分那些公司">区分那些公司</h2>
<p>以我个人的理解，可以从以下几个角度来为软件公司分类。</p>
<h3 id="主营业务">主营业务</h3>
<p>进公司之前，要了解公司的主营业务，分析它的领域是否宽广，行业前途是否光明。起始平台很重要，选错起点，你的职业生涯就是一步错、步步错：</p>
<ul>
<li>互联网：你手机上那些APP的开发商基本上都是。这类公司的产品、服务竞争激烈，用户量极大，面临的技术问题极多，有动力培养专业技术团队，比较靠谱。</li>
<li>传统产品/服务：针对特定行业开发产品/服务，然后拿去卖。这类产品通常不针对具体个人或实体，定制化内容较少，产品较为通用，存在一些竞争，技术提升的动力稍微大些。不过也有不少只吃老本不创新的。</li>
<li>传统项目（项目外包）：项目制则是跑项目签合同，给甲方（例如政府、事业单位、企业等）定制化开发，优先实现特定需求。有活干就挣钱，没活干就赔钱。</li>
<li>人力外包（“外包”一词通常指这个）：像建筑队一样，招一批人，有活之后就去工地干活，干完了换下一家工地继续干，没活就呆着，或者解散。由于通常去甲方现场工作，地点、工资待遇、工作内容都不固定，而且容易受歧视，不建议去做外包。</li>
<li>建站：公司主业与软件无关（例如电子商务），也不太需要专业团队，只是招些技术人员进行基本的系统开发。</li>
</ul>
<p>建议优先去互联网公司，避免去为政府服务的公司，不要去外包公司和建站公司。互联网起点高，成长也快，而外包或建站工作通常比较无聊，且职业发展空间有限。若是找不到工作，不得不去做外包，那么你需要主动在工作中积累工作技能，对照招聘网站内容，学习行业前沿的东西，然后<strong>在一到两年之内跳槽</strong>。垃圾地方停留时间越长，找工作时越没有竞争力。</p>
<p>以上各种性质并不矛盾。比方说，有些公司做了一些项目之后，将业务抽象出通用框架然后再拿去卖（或者再去别的地方跑相似业务的合同），这样就有了产品；有些公司既给自己做项目，也做人力外包；有些公司为了提升竞争力，按互联网公司模式转型，最后成为了互联网公司。</p>
<h3 id="国企民企外企">国企、民企、外企？</h3>
<p>软件行业大部分是民企和外企。</p>
<p>在软件行业，这个身份并没有多大意义：通常人们觉得国企工作效率低、私企工作效率高，实际上，私企也可以比国企低效，“没有国企的命，得了国企的病”，而国企的人也可以忘我工作、舍得投入，把工作做得比私企还好。</p>
<p>如果感觉自己水平能说得过去，也可以考虑去外企。不过不太建议去株式会社（日韩企业），株式会社干活死板，不利于提高水平。</p>
<h3 id="成立时间">成立时间</h3>
<p>我个人分为以下三类：</p>
<ul>
<li>老公司：至少成立4年或以上，可以认为基本上站住脚了。</li>
<li>创业公司：根据创始人背景，可以再往下细分
<ul>
<li>从头创业：没有背景自己干，倒闭的可能性很大。</li>
<li>分公司：因为业务扩张需要，前往某地开分公司、子公司或办事处。在创业之初，母公司可以提供支持，风险相对小些。</li>
</ul></li>
</ul>
<p>创业公司视融资情况，可继续分为种子期、天使期、A轮、B轮、C轮等等。建议只去B轮或以上（C或更高）的公司。种子期、天使期、A轮通常都不太靠谱。</p>
<h3 id="加班情况">加班情况</h3>
<p>完全不加班是不现实的，如果碰到系统上线、系统紧急维护等情况，即使平时从来不加班的公司，可能也不得不安排加班来处理问题。加班多少要看具体的工作部门、工作内容与团队文化，即便同一公司也可能完全不一样，不能一概而论。</p>
<p>关于加班，个人看法如下：</p>
<ul>
<li>加晚班与不加晚班、一周上五天班与上六天班，看起来差别不大，但对你身心带来的影响非常明显，即使加班工资高，建议尽量也选择原则上不加班的公司与开发团队。不信的话你算算时薪（月薪除以实际工作小时数）哪个高。</li>
<li>加班过重的话，会严重损害身体健康，严重影响日常生活，而且严重影响自我提升。除非工资给得特别高，或者是顶尖大厂（华为），抱着必死的决心去攒一点钱，要不然别去这种公司，浪费生命。</li>
<li>对于原则上不加班的公司，则是稍微加一点班——抱着自我学习、提高领导好感度等目的主动加些班。当然如果领导要求无意义加班而且你有信心能找到下一家合适工作的话你也可以考虑离开，不过将来一定是越来越难找工作。</li>
</ul>
<p>强制加班就能提高工作效率了吗？并不会！在强制加班的公司里，老员工们会故意放慢工作节奏（当然不会让人看出来），延长工作时间，把活拖到晚上干完，既能显得自己勤奋，又能避免让领导给自己加码。</p>
<p>后续：2019年，有程序员在GitHub设置了一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzk5NmljdS85OTYuSUNV">996.icu<i class="fa fa-external-link-alt"></i></span>的项目，列出了一些长期严重加班的公司，可供参考。</p>
<h3 id="出差情况">出差情况</h3>
<p>完全不出差也是不现实的。出差情况要看工作内容，例如需求调研可能是中短差，驻场开发可能是持续数月甚至长达一两年的长差，运维实施可能要全国各地跑。</p>
<p>个人建议：</p>
<ul>
<li>身体不适合出差的话要早点跟直属领导说，免得同时耽误自己和领导。</li>
<li>如果公司有出差补助，可以接受短差，别太频繁就好。</li>
<li>避免出长差——如果长差是去三四线城市甚至偏远地方，你觉得在当地能积累到什么东西呢？如果长差是去一线城市，而且单位不能有效解决食宿问题，那么为什么不直接去一线城市找工作呢？另外，当你有了老婆孩子，你还继续出长差，那么谁照顾老婆孩子呢？领导还是隔壁老王？</li>
<li>绝对不出外国差！所谓的外国，通常都是些穷破地方，甚至是那种需要招<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMzNTI5OTc2Mg==">暑假工<i class="fa fa-external-link-alt"></i></span>当保安的地方。工作内容基本上就是苦力，干得不爽，你没地方跑，干得爽，也不可能留下定居。在法治环境不好的地方（例如东南亚），被黑帮当成奴隶也无处求救；要是到了非洲，你甚至还得关心一下自己能不能活着回国。至于西装革履、欧美风范、国际旅游，那些是高层领导的事，轮不到你。</li>
</ul>
<h1 id="提前强化工作技能">提前强化工作技能</h1>
<p>找一家招聘网站，例如<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhhb3Bpbi5jb20v">智联招聘<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuNTFqb2IuY29tLw==">前程无忧<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpcGluLmNvbQ==">BOSS直聘<i class="fa fa-external-link-alt"></i></span>等。先看，不用急着投简历。在网站中，选择一个城市，然后将“Java”作为关键词，再多挑一些工资高的校招或社招工作，关注他们对候选人的需求。</p>
<p>需求看得越多，你会越清楚社会需要什么东西，例如Spring Boot、Spring
Cloud、Elasticsearch、React或Vue之类的。了解业界大体情况之后，你就可以去图书馆借书（图书馆的书通常会比较旧），或者去网上找教程，挨个练习Hello,
Happy World！程序。</p>
<p>大学学的东西跟实际工作是脱钩的，某些东西（当然是思修、毛概、马原、近代史了）用不着上心，不挂科就够了，但是数据结构、算法、网络之类的基础知识还是要学好。如果你还在上大二、大三，那么别等大四才开始为了找工作而学习。上边那堆东西很难在几天之内就全部学会。</p>
<h2 id="想好大四要做什么">想好大四要做什么</h2>
<p>找工作、考研、考公务员不可兼得，你只能忙其中一个事情。</p>
<p>保研了？保研就别找工作了，浪费名额！</p>
<h2 id="非科班出身">非科班出身</h2>
<p>非计算机专业，只要你对编程感兴趣，想找这方面工作，尽管投简历就是，不必担心工作要求中的“计算机专业”。但是，在找工作之前，你需要主动补一些基础知识：</p>
<ul>
<li>计算机科学
<ul>
<li>数据结构与算法</li>
<li>设计模式</li>
</ul></li>
<li>软件工程基础</li>
<li>Java
<ul>
<li>《Java编程思想》（Java装逼思想）</li>
<li>《Effective Java》</li>
</ul></li>
<li>Web开发：HTML/CSS/JavaScript，了解一些常用的框架如jQuery等</li>
<li>数据库：MySQL，学会数据库的基本原理，掌握基本的DML与DDL操作。</li>
<li>开发工具
<ul>
<li>Eclipse/IntelliJ IDEA</li>
<li>MySQL客户端</li>
</ul></li>
</ul>
<p>趁自己没毕业、图书馆可以免费借书的时候，赶紧多看书，上班之后你肯定就没心思看了——我们办公室好几本《Java装逼思想》，然而每一部装逼思想都落满灰尘、暗淡无光。</p>
<p>用人单位要是严格按要求卡人，他们就招不到人了。再说了，真拿专业卡你的话，说明他们的水平也好不到哪里去，你正好躲过一个坑。</p>
<p>对于转行的人来说，起始平台更加重要。起点低了，跳槽时容易吃亏，“一步赶不上，步步赶不上”，除非个人能力极强。</p>
<h2 id="关于培训">关于培训</h2>
<p><strong>不要参加培训班！</strong>不仅白花冤枉钱，而且培训班经历会让简历减分。真想学东西，不如自己去图书馆借书，或者上网搜索教程自学。软件这东西，还是得自己亲自动手开发才行。</p>
<p>另外，有些培训机构会伪装成公司的样子来骗你的钱，本文后面会讲如何躲开这类骗子。</p>
<h2 id="关于实习">关于实习</h2>
<p>不要太期待实习。公司的目的是赚钱，不是培训，不会特意专门给你安排培训工作。所谓的实习生不过是低成本劳动力罢了。赶上开发任务，你就是个容易埋雷的开发，否则主要还是打杂。</p>
<p>实习不要拘泥于手头工作。留意一下公司用的什么技术栈，用什么开发工具，向前辈请教有哪些技术问题、如何解决，这样写简历和面试的时候就有装逼的资本了。</p>
<p>实习之前一定要和自己的家长、同学、辅导员和其他老师打招呼，而且在学校安排与实习安排产生冲突时要优先选择学校，这样公司不会为难你，而且在发生一些事情的时候（例如论文和答辩），老师也不会太为难你。</p>
<h1 id="准备找工作">准备找工作</h1>
<p>大学生基本上都是新手，什么都不会很正常。那么为什么还招大学生呢？因为有些工作不是那么难，大学生稍微学学也能做了，而且公司还能省不少钱。另外年轻人学习能力强，单位也可以来培养新生力量。</p>
<p>如果严格按招聘要求卡人，企业是招不到人的，无论校招还是社招都是如此——不管是人挑工作，还是工作挑人，双方实际上都是在找个差不多的平衡点。</p>
<p>所以，找工作就变成了：用简历、面试与一点运气来证明自己能力比别人强。</p>
<h2 id="简历">简历</h2>
<p>原则上讲，简历上应该只写个人联系方式，以及值得让HR召唤你面试的东西，与工作本身无关的东西一个字都别写。简历应该包含以下内容：</p>
<ul>
<li>你的姓名</li>
<li>个人电话、邮箱</li>
<li>学历：入学与毕业时间、学校、专业、学位。从本科开始写，高中或更低的学历不要写，而且千万别造假，学信网一查就能查得到。</li>
<li>工作经历：社招才会有，校招不可能有，所以不要写。</li>
<li>项目经历：同样是社招才会有的东西，而且这是社招简历的重点内容。校招的话，不用写了，除非你真的给老师或社团或社团组织做过什么投入了实际应用的软件。</li>
<li>实习经历：有的话可以写。</li>
<li>与工作相关、值得炫耀、能吸引HR召唤你面试的东西：例如你开发过什么实用程序、参加过（有含金量的）程序设计竞赛，等等。这也相当于是社招的项目经历了。</li>
</ul>
<p>有些人会建议写上工作技能（例如“熟悉SpringBoot”等等）。这类东西可以写，不过通常只会用于HR筛选简历。如果写，面试的时候可能也会拿这些东西说事，所以千万别写“精通”，也不要写自己完全不懂的东西。会的多可以写“熟悉”，会的少可以写“了解”，完全不会的话就别提。</p>
<p>HR不是技术人员。社招的话，他们通常只能筛掉不靠谱的简历，然后再让技术部门作进一步的判断。校招的话，因为大家都是白纸，有些HR自己就能分辨是否靠谱。</p>
<p>HR通常很忙，一天要看一大堆简历，既有校招的，也有社招的。每份简历只能大概扫一扫，没兴趣的话就不会再细看，直接扔到垃圾桶。所以，简历要格式简洁、内容清晰、直奔主题，而且（校招简历）只写一页内容，别写出第二页。</p>
<h3 id="项目经历">项目经历</h3>
<p>社招才会有项目经历，学生不太可能做过正式的商业项目，所以校招简历上通常不会有项目经历。</p>
<p>这里简单介绍一下社招的项目经历写法，供做过“项目”的同学们参考：</p>
<p>项目按时间倒序排列，新项目写前头，因为时间越近经验往往越丰富。有很多项目的话，挑一些重点项目、重点工作写。</p>
<p>写项目时，可以先用简单的几句话介绍一下项目，让HR和面试官了解项目大概是做什么事情的。</p>
<p>接下来就要根据“STAR法则”（情境、任务、行动、结果）来介绍自己做过哪些事情了：</p>
<ul>
<li>情境：需要解决什么问题，或者遇到了什么事情</li>
<li>任务：你的目标是什么</li>
<li>行动：你做了什么事情</li>
<li>结果：最后达到了什么效果。如果能量化，那么务必提供一个有说服力的数字，例如系统响应时间从2s降低到200ms。</li>
</ul>
<p>项目经历可以稍微吹吹牛，或者把别人劳动成果说成是自己的（只要你确实能独立开发出来），反正其他公司又不可能查程序代码来确认是不是你本人写的。然而，你写的东西都会成为面试提问的内容，所以牛皮也别吹太大，否则的话，一旦穿帮，就直接失去本公司的工作机会了。</p>
<h3 id="加分项">加分项</h3>
<ul>
<li>技术博客</li>
<li>GitHub：当然博客与GitHub账号要认真活动，而且别一股脑地Fork别人项目，否则看起来就像是为找工作而临时拼凑东西。</li>
<li>ACM竞赛获奖：当然要有含金量才行</li>
<li>项目经历：商业项目是不可能的了——你写的东西，不管是课程设计，还是真正的项目，跟商业项目比，基本上都是一坨屎。但是呢，如果你的东西投入实际使用（例如给老师、社团或学校什么组织制作的），或者能体现出你对项目的思考（例如安全优化、考虑代码质量、版本迭代等），那么就能加分了。</li>
<li>其他工作技能：例如英语能力强、热爱钻研Linux等，这些东西都可以适当地提一提。当然，一定要和工作相关。</li>
</ul>
<p>如果你自认为能力很强，但是确实没做过项目，（如果博客计划没咕的话）后续会讲讲如何假装自己做过项目。</p>
<h3 id="减分项">减分项</h3>
<p>简历不要有以下内容。减分项越多，你的简历越没人接：</p>
<ul>
<li>错别字、语病、英语名称拼错：直接枪毙</li>
<li>从第二页开始的所有内容：大佬去社招的话写两三页还行，你个萌新一页就够了，多了都是注水。</li>
<li>凌乱/优雅的格式
<ul>
<li>Word格式：请用PDF格式。HR有可能拿手机或别的软件看，看完之后直接用微信推给开发部门，Word格式排版会全部乱掉。</li>
<li>PowerPoint格式：PowerPoint是用来在投影上展示的。你应聘的是程序员，不是美工设计，HR不可能拿个投影仪挨个页面播放你的大作。</li>
<li>招聘网站模板/表格：花哨的格式会导致审美疲劳，影响观感。简单地排好版，在必要地方加黑体字，用你的文字打动人，这样就够了。</li>
</ul></li>
<li>无关信息
<ul>
<li>照片：除非招聘要求附带照片，你的照片只会让他们觉得恶心。<span class="exturl" data-url="aHR0cDovL3B1dGluLmtyZW1saW4ucnUvYmlvL3BhZ2UtMA==">超级帅哥<i class="fa fa-external-link-alt"></i></span>或超级美女除外。</li>
<li>籍贯、民族、党员身份等：除非单位明确要求，否则别写，在软件行业没什么用。</li>
<li>QQ、微信、微博等联系方式：请只用电话和邮件联系，不要用别的方式。</li>
<li>高中及以前的经历：没人在乎你的黑历史（OI系列竞赛大奖除外）。而且，就算你过去是名人，大学四年过去，基本上只剩下人名了吧。</li>
<li>大学与工作技能无关的经历：HR想知道你能不能胜任工作，别的事情没心思了解。</li>
<li>与工作技能无关的证书、奖项：从事软件开发工作，要“新媒体投稿大赛一等奖”（与软件开发无关）、“大学生创新比赛参与奖”有什么用？</li>
<li>兴趣爱好：喜欢打球跟软件工作有什么关系呢？要说，就说自己喜欢研究技术，或者喜欢<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvbWVpamktc2F0b3JpL0RyZXNz">穿女装<i class="fa fa-external-link-alt"></i></span>，而且在GitHub上发过自己女装照，这样才算跟技术有关系吧。</li>
</ul></li>
<li>一看就知道在注水
<ul>
<li>门槛太低的证书、奖项：例如计算机二级基本上都能过，校级程序竞赛参与奖也没什么价值，别写。</li>
<li>“精通”：敢说自己“精通”，你算老几啊？</li>
<li>工作经验：你个大学生哪里来的工作？要是实习经历，为什么不说是“实习经验”？</li>
<li>培训班经历：就算有，也要说是自学成才，千万别说自己去过培训班。</li>
<li>自我评价：评价是你未来的领导的事情，你自己怎么评价都会有雷，所以干脆别评价了。</li>
</ul></li>
</ul>
<p>当然以上不是绝对的，有些事情完全是看运气，例如，某公司平时气氛活泼，HR收到两份简历，对内容犹豫不决，发现其中一个人爱表演节目，想着年终晚会可以让他出个节目，于是另一份简历被PASS了。</p>
<h2 id="投递简历">投递简历</h2>
<p>上半学期（秋招）就要开始积极找工作，主动出击，不要等到下半学期马上毕业了才行动。拖得越晚，公司和候选人质量越差。等到开大型招聘会的时候，你就只能看到垃圾公司、垃圾岗位以及那些岗位需要处理的垃圾了。</p>
<p>大中型企业经常会到学校组织宣讲会，介绍自己公司，并且会立刻收简历、组织面试（毕竟出差要花钱，所以会“速战速决”）。平时要多关注学校就业中心或就业网站，提前了解公司，靠谱的话，就在正式宣讲会之前把简历和面试准备好，去宣讲会时候把简历带上，开完直接投。而且，无论你的简历是不是垃圾，在进垃圾桶之前肯定被HR看过（而其他途径就不一定了）。</p>
<p>如果有认识的学长学姐，可以问问他们去了哪些地方。合适的话可以让他们帮忙内推，增加找到工作的机率。但是，既然找熟人帮忙，那么你自己也要给力，别坑学长学姐。</p>
<h3 id="公司背景调查">公司背景调查</h3>
<p>如何判断一家公司靠不靠谱呢？</p>
<ul>
<li>了解公司概况
<ul>
<li>进入公司官网：了解公司主要业务。如果<span class="exturl" data-url="aHR0cDovL3N0Y21jdS5jb20v">连官网做得都很糟糕<i class="fa fa-external-link-alt"></i></span>，你觉得公司靠谱吗？</li>
<li>使用<span class="exturl" data-url="aHR0cHM6Ly93d3cudGlhbnlhbmNoYS5jb20v">天眼查<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cucWNjLmNvbS8=">企查查<i class="fa fa-external-link-alt"></i></span>检查：关注企业注册情况、是否有经营风险等。不必付费，看个大概，知道公司不是官司缠身、不是劳动仲裁常客，也不会欠一屁股债欠到发不出工资就行。</li>
<li>确认工作性质：互联网？自己做项目？从外头拉项目？外包？</li>
<li>确认创立时间：成熟公司？创业公司？创业公司的话，融资情况如何？</li>
<li>确认公司规模：太小（只有几个人）或太大（超过上千人）都有坑。前者是平台小，后者外包可能性大。</li>
<li>确认办公地点：如果连个靠谱的办公室都没有，那别想了，不是培训机构就是传销。另外需要注意，由于有些工作要出差、驻场，所以办公地点并不一定是办公室地点。</li>
</ul></li>
<li>了解招聘岗位
<ul>
<li>技术栈要求如何？是不是业界较新的标准？</li>
<li>“全栈工程师”：这是公司想让你一人多役、节省工资的意思，慎投。</li>
<li>加班、出差情况：有些岗位会明确告知要出差。如果招聘岗位需求中没有体现，你可以在面试时候主动问。</li>
<li>登录招聘网站，查看该公司社招的情况：如果社招岗位常年招人（例如岗位挂了好几个月，而且也没有什么新开设的岗位），说明员工流失严重，呆不下去。</li>
</ul></li>
<li>了解员工对公司的负面评价
<ul>
<li>知乎、<span class="exturl" data-url="aHR0cHM6Ly9rYW56aHVuLmNvbQ==">看准网<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuam9idWkuY29tLw==">职友集<i class="fa fa-external-link-alt"></i></span>：重点关注其他员工的负面评价（2021年更新：看准网已经没有员工评论了，可以去脉脉上看）</li>
<li>注意有些公司规模很大，会分出很多部门或团队，有些人会赶巧遇到合适岗位，而有些人会倒霉碰到垃圾团队，所以个别员工评价不见得能代表整个公司的情况。</li>
<li>如果有人指出不能按时发工资，可能公司差不多要黄了，别去。</li>
</ul></li>
<li>了解面试经验：登录<span class="exturl" data-url="aHR0cHM6Ly9rYW56aHVuLmNvbQ==">看准网<i class="fa fa-external-link-alt"></i></span>，关注其他人应聘的面试经验。不过这些面试经验通常是针对社招的，仅供参考，只能说，如果连社招面试都特别水的话，可能是公司有坑，慎投。</li>
</ul>
<p>按照以上方式操作，你可能仍然会进入一家不靠谱的公司，但是你至少把更不靠谱的公司给筛掉了。</p>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>检查简历上的联系方式，电话别打不通，邮箱别收不到邮件。</li>
<li>一家公司不要投多个岗位：投多了正好说明你是投机分子，各方面能力都不行，直接PASS。</li>
<li>一家公司不要投多遍：只要你没往垃圾箱投，也没用扔垃圾的方式投，那么HR肯定收到了你的简历。投次数多了，会让人反感，然后你就PASS了。</li>
<li>关于纸质简历：普通地拿A4打印就行了，这样的话被HR扔掉也不可惜。</li>
<li>关于电子邮件简历：
<ul>
<li>给你的邮箱名称设置为你自己的名字。给自己发封邮件测试一下，看发件人写的是“℡ぐ㈨9б情怀
<span class="exturl" data-url="bWFpbHRvOnh4eHhAZ21haWwuY29t">xxxx@gmail.com<i class="fa fa-external-link-alt"></i></span>”还是“张三 <span class="exturl" data-url="bWFpbHRvOnh4eHhAZ21haWwuY29t">xxxx@gmail.com<i class="fa fa-external-link-alt"></i></span>”</li>
<li>邮件使用类似<code>【校招应聘】张三_Java开发工程师_XXX大学_本科</code>的标题，让HR一看就能看到是你想找工作。否则的话，你的邮件会随着各种垃圾埋没于HR邮箱之中。</li>
<li>邮件正文要写内容，例如尊敬的HR怎么怎么地。邮件正文是写给人看的，而且HR不会认真看，所以只要说清自己是投简历的，言语礼貌就行了。</li>
<li>别忘了加附件。附件也要按类似邮件标题的格式起名字。</li>
<li>简历务必使用PDF格式，而且别打压缩包。万一HR用手机看，别的格式都看不了。</li>
</ul></li>
<li>关于BOSS直聘简历：简历使用PDF格式，起好文件名。道理同上。</li>
</ul>
<h2 id="面试">面试</h2>
<p>通知面试之后不要失约。实在去不了，一定要提前打电话告知面试官，不要玩失踪，否则你容易进HR圈子的黑名单，去别处找工作也吃亏。</p>
<p>不要把面试当成接受审问，你可以尽量把面试场景转变成你与面试官之间相互交流、沟通。而且，面试的目的是双向选择，一方面，你要突出自己的优点，回避自己的缺点，让面试官觉得你多少懂些技术、学习能力强、热爱思考，而且愿意主动为公司付出。另一方面，你也要在交流中去了解一下公司，例如在面试官说“还有什么要问的吗”时主动询问公司的职业发展。</p>
<p>有些面试官经验一般，会直接挑一些套路问题来问，你可以提前去知乎搜搜面试套路问题，提前准备一些答案，主动躲掉一些坑。有经验的面试官则会根据你的简历内容来灵活提问，所以你还要了解简历上面写的那些词语，了解基本的原理、用法、常见问题。如果你能体现出“自己有所思考”，那么就更好了。</p>
<p>在交流时不要说负面内容，也不要说“虽然我不会但是我愿意学习”，这些都是减分项。如果再来一句“这个我不会，我也不想学”，你就直接把天聊死了。</p>
<p>面试官不一是未来工作的上级，所以不要主动问面试过没过、工资多少钱这样比较“俗”的问题。但加班多少、出差多不多倒是可以问一问，有些公司可能希望大家不要动不动就辞职，影响团队稳定性，所以也会实话实说，让你有个心理准备。</p>
<p>不要干等结果，面试不通过的话一般不会主动通知你。另外交流过程中感觉良好不代表一定就要招，所以，面完一家，无论结果如何，尽快去找下一家。如果真被好几家公司录用了，只要你还没签协议，主动通知公司放弃机会就OK了。</p>
<p>如果需要多次面试，那么技术面的可能性很大。外地公司的话，还会涉及去外地面试。去外地面试，务必自行前往公司办公室，绝对不要接受“接站”，而且要和家长、同学、老师打好招呼，随时保持联系，一旦遇到情况要让他们帮忙报警。如果地点可疑，或者对方坚持“接站”，那么肯定是骗子，不要去了。</p>
<h1 id="常见骗局">常见骗局</h1>
<p>大学生没有社会经验，最好骗，所以要主动了解一些常见骗局。</p>
<h2 id="传销">传销</h2>
<p>以下几个现象，匹配条数越多，越需要加小心：</p>
<ul>
<li>薪水比行业平均水平高，工作要求却非常低，而且没什么技术方面的要求</li>
<li>公司资料不详</li>
<li>天眼查、企查查等网站查不到公司信息</li>
<li>公司介绍含糊不清，看不出公司主营业务是什么</li>
<li>公司什么职位都招，这些职位之间的关系还不大</li>
<li>熟人（例如学长）突然找你，说要一起拼事业挣大钱</li>
<li>问你老家在哪里，是不是某地人，在某地有没有亲戚朋友</li>
<li>在非工作时间（周末）联系你</li>
<li>还没认真笔试、面试就直接录用了</li>
<li>用163、qq等非工作邮箱联系你
<ul>
<li><em>正规公司有自己工作邮箱、公司域名，照着域名登进去之后应该是公司官方网站。</em></li>
</ul></li>
<li>需要提交健康证明，特别是乙肝
<ul>
<li><em>正规公司通常不会要求在入职之前体检，就算需要，也会专门组织体检。</em></li>
<li><em>查乙肝是因为怕你把整个出租屋里的传销分子都给感染，浪费他们的钱。</em></li>
</ul></li>
<li>需要预交费用
<ul>
<li><em>正规招聘不会收费！</em></li>
</ul></li>
<li>让你去外地面试、培训</li>
<li>到外地面试或培训时，主动派人接站</li>
<li>问公司具体办公地点时，回答含糊不清</li>
<li>工作地点远离市区与开发区</li>
<li>需要前往<strong>天津静海</strong>、天津武清、北京通州、北京大兴、北京房山、北京燕郊/河北燕郊（实际上是河北的）、河北廊坊、河北沧州等地区。具体可见<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29odS5jb20vYS8xMzQ1NTI1MjlfNjE3NzE3">传销高发地图<i class="fa fa-external-link-alt"></i></span>。</li>
</ul>
<h2 id="骗钱">骗钱</h2>
<ol type="1">
<li><strong>正规招聘不会收费！</strong>
<ul>
<li>公司是给员工发钱的，即便入职，除了（在单位）食宿以外，通常也不会向员工收什么费用。</li>
<li>去公司面试时的路费、住宿费和饭钱可能要自己掏。但是这笔钱明显没有进公司口袋中。</li>
<li>如果外出食宿，公司甚至会给你报销和补贴，虽然补贴可能起不到多大作用。</li>
</ul></li>
<li><strong>绝不要接受收费培训！</strong>
<ul>
<li>这类骗局有个通用套路：面试时说你能力不行，但是公司愿意培养你，给你机会提供培训，然后收取费用。交不起费用的话也可以帮你解决费用问题。这些都是骗钱，甚至是“套路贷”！</li>
<li>正规公司通常会有入职培训，但是肯定不收钱，而且企业文化方面内容会多一些。</li>
<li>不要签长期培训和保证长期工作的协议，现在的人们真不一定会长期工作，签这类协议会影响以后辞职。</li>
<li>工作技能还是要在实际项目中锻炼。</li>
</ul></li>
</ol>
<p>这类骗子“公司”本来就没打算真正录用你，所以遇到的话要赶紧换下一家。</p>
<h2 id="团建">团建</h2>
<p>团建活动（集体“娱乐”活动）通常是领导自我感觉良好、员工感觉恶心的东西，而公司职工之间通常是钱的关系。钱给够、分配公平、领导靠谱、行业前途光明、劳逸结合，员工自然就会认真工作；钱给不够、分配不公、领导不靠谱、行业前景黯淡、强制加班，员工自然就会消极工作。钱给不到位还搞团建，只会起反作用。</p>
<p>如果提前了解到公司经常搞团建，而且经常占用休息日搞，那么就别去了。</p>
<h2 id="招聘黑话">招聘黑话</h2>
<p>仅供参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG91YmFuLmNvbS9ncm91cC90b3BpYy85NTQyNDUxMy8=">招聘黑话大全<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="福利">福利</h2>
<p>根据<span class="exturl" data-url="aHR0cDovL3d3dy5nb3YuY24vYmFuc2hpLzIwMDUtMDUvMjUvY29udGVudF85MDUuaHRt">劳动法<i class="fa fa-external-link-alt"></i></span>，以下待遇都是你应得的，根本不是福利：</p>
<ul>
<li>五险一金 = 社保 + 公积金 =
养老保险、医疗保险、生育保险、失业保险、工伤保险 + 公积金</li>
<li>加班费1.5倍、周末加班2倍、法定节假日三薪（一般公司只给法假三薪，别的加班费不给）</li>
<li>带薪年休假</li>
<li>定期体检</li>
</ul>
<p>如果公司缺少以上内容，说明他们不正规，别去了。如果公司强调有这些“福利”，说明他们确实正规，但根本没有福利。</p>
<h2 id="低底薪高奖金">低底薪高奖金</h2>
<p>如果HR说工资高，但是你发现底薪比同行低（即使HR承诺奖金高），那么要加点小心。月薪不按时发或者发少了，你还可以告劳动仲裁，而奖金不给你发，就算告法院也没用，因为法律根本不管奖金如何。</p>
<h2 id="加班费">加班费</h2>
<p>大多数公司不会发加班费，大家也默认了这个事实。某些外企会发，所以他们经常禁止员工加班。</p>
<p>如果很在乎这个东西，那么可以研究研究如何告劳动仲裁，以及后续如何防止被公司报复（这一点很重要，当你决定告劳动仲裁时，稍微懂一点法律的公司当然会研究如何报复你）。或者，如果你不在乎涨工资受阻的话，也可以考虑在非工作时间玩失踪。</p>
<h2 id="五险一金">五险一金</h2>
<p>只要正常工作，公司必须给员工交五险一金，所以这是你应得的，不叫福利。然而五险一金是按基本工资交的，为了节省成本，公司通常会把工资明细分得很细，尽可能压低基本工资，从而少交五险一金，这是普遍现象，不要太在意。</p>
<p>少交还可以理解，毕竟这是公司自己的钱，而且交也是交给政府了，没有直接进到你的口袋里，所以也不见得是什么坏事。但是，如果连交都不交，那么务必拒绝签约，而且只要你还没签字，你就不需要赔偿任何费用。如果已不幸入职，那么尽快辞职，因为不交五险一金的话你会惹上麻烦（例如影响落户），而且你还不能自己掏腰包补齐。</p>
<h2 id="狼性-末位淘汰制">狼性 / 末位淘汰制</h2>
<p>除非公司平台很好，否则慎重。在这种公司，同事们为了不被淘汰，通常不得不去坑其他同事，结果往往是内斗严重，谁的日子都过不安宁。</p>
<h2 id="外包转正">外包转正</h2>
<p>有些外包公司是给大厂（例如腾讯）做外包的，然后领导会承诺说表现得好可以“转正”，进入甲方。不要相信这种话，外包本身就是为了省钱和省指标，这种“转正”机会连你未来的领导都没轮到，怎么可能轮到你？</p>
<p>如果不得不进入外包公司，而且遇到了一个能力比较强的领导或同事，倒是可以考虑跟他们处好关系（不过你自己的工作能力也要给力才行），将来找准机会跟着他们一块儿跳槽。</p>
<h2 id="创业">创业</h2>
<p><strong>不要自己去创业！</strong>理由如下：</p>
<ol type="1">
<li>你还是学生，无论能力水平、社会经验，或者人脉方面，你都达不到创业合伙人的水准。老板就更不用说了。</li>
<li>创业公司人手少，你可能不得不做很多开发工作之外的事情，甚至可能要当秘书、会计、HR、后勤、保安……反正除了老总以外什么工作都做一遍。</li>
<li>即使你能力够强，撑满三年也不是件容易的事情。经营困难、资金链断裂、法律纠纷、内部矛盾，这些事情都足以让公司立刻倒闭。</li>
<li>万一公司倒闭，再找工作的话，你的简历通常也不太好看。有几个能做出成绩的呢？</li>
</ol>
<p>总之，创业只是“延迟失业”而已。</p>
<h1 id="找到工作之后">找到工作之后</h1>
<ul>
<li>如果投了多家单位，或者有希望拿多个offer，那么先别急着签三方协议，可以先拖两天考虑考虑然后再签。</li>
<li>一定要把三方协议签好，否则被耍了也没处维权。</li>
<li>签了三方协议之后就不要毁约了，除非你想赔违约金。</li>
<li>入职之后会有试用期，别好不容易找到工作又把工作丢了。</li>
</ul>
<h1 id="参考资料">参考资料</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjcwNDEyMzc=">给刚毕业的大学生（找工作）的建议<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2ptLnRhb2Jhby5vcmcvMjAxOC8wNy8wOS8lRTglODElOEElRTglODElOEElRTklOTglQkYlRTklODclOEMlRTclQTQlQkUlRTYlOEIlOUIlRTklOUQlQTIlRTglQUYlOTUlRUYlQkMlOEMlRTglQjAlODglRTglQjAlODglRTIlODAlOUMlRTklODclOEUlRTclOTQlOUYlRTIlODAlOURKYXZhJUU3JUE4JThCJUU1JUJBJThGJUU1JTkxJTk4JUU1JUFEJUE2JUU0JUI5JUEwJUU3JTlBJTg0JUU5JTgxJTkzJUU4JUI3JUFGLw==">聊聊阿里社招面试，谈谈“野生”Java程序员学习的道路<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><strong>校招如何找工作</strong></li>
<li>校招装逼教程：博客</li>
<li>校招装逼教程：学生信息管理系统</li>
<li>校招装逼教程：微信公众号（Java）</li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic踩坑记录</title>
    <url>/2018/11/02/weblogic-caution/</url>
    <content><![CDATA[本文记录我在部署WebLogic时遇到的各种坑。其中JDK为1.6，WebLogic版本11g（10.3.6）。
<span id="more"></span>
<style>
#post-content table {
    word-break: break-all;
}

code {
    word-break: break-all;
}
</style>
<h1 id="开发阶段">开发阶段</h1>
<h2 id="准备测试区">准备测试区</h2>
<p>务必准备一个和生产环境架构接近的测试环境，而且开发环境、测试环境和生产环境的JDK与中间件版本应该保持一致，如果条件不够，至少测试环境和生产环境要一致。开发时用某个版本JDK和Tomcat，部署到生产环境时用另一个版本的JDK和WebLogic，这样很容易遭遇意外。</p>
<p>举一些例子，以下几个就属于Tomcat上面测不出来，挪到WebLogic上面就可能会暴露出来的错误，好在下表这些错误通过修改WebLogic服务器启动参数就能在一定程度上解决了：</p>
<table>
<colgroup>
<col style="width: 32%" />
<col style="width: 36%" />
<col style="width: 31%" />
</colgroup>
<thead>
<tr class="header">
<th>场景</th>
<th>错误信息</th>
<th>启动参数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>生成图片</td>
<td>java.awt.HeadlessException</td>
<td>-Djava.awt.headless=true</td>
</tr>
<tr class="even">
<td>访问HTTPS网站</td>
<td>javax.net.ssl.SSLHandshakeException:
sun.security.validator.ValidatorException: No trusted certificate found
exception</td>
<td>-DUseSunHttpHandler=true</td>
</tr>
<tr class="odd">
<td>Apache CXF提供WebService服务</td>
<td>javax.xml.ws.soap.SOAPFaultException: Cannot create a secure
XMLInputFactory</td>
<td>-Dorg.apache.cxf.stax.allowInsecureParser=1</td>
</tr>
<tr class="even">
<td>启动报错，提示无法加载config.xml</td>
<td><code>Server failed. Reason: [Management:141266]Parsing Failure in config.xml: failed to find method MethodName</code></td>
<td>-Dweblogic.configuration.schemaValidationEnabled=false</td>
</tr>
</tbody>
</table>
<p>如何修改WebLogic的启动参数？</p>
<ul>
<li>AdminServer启动参数：找到类似于<code>/u01/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh</code>的文件，找到倒数第一个<code>JAVA_OPTIONS=...</code>，在它的后面追加参数。</li>
<li>修改其他节点的启动参数：进入WebLogic控制台，点击服务器→你的服务器（例如app_server1）→配置→服务器启动，然后往下翻，找到“参数”项。</li>
</ul>
<h2 id="jdk版本">JDK版本</h2>
<p>如需使用JDK8或更高版本，需要更换新版WebLogic，将版本升级至12.1.3或以上。</p>
<p>如需升级至JDK7：</p>
<ul>
<li>需排查程序代码，改写所有涉及<code>sun.*</code>包的程序，否则升级后会报错。</li>
<li>安装完成后，需要进入WebLogic安装目录的<code>modules</code>目录中，将<code>javax.annotation_1.0.0.0_1-0.jar</code>、<code>javax.xml.bind_2.1.1.jar</code>、<code>javax.xml.ws_2.1.1.jar</code>三个文件拷到<code>$JAVA_HOME/jre/lib/endorsed</code>中（如果没有此目录，新建一个即可）。</li>
</ul>
<h2 id="jar包冲突待撰">JAR包冲突（待撰）</h2>
<p>TODO</p>
<h2 id="路径问题">路径问题</h2>
<p>假设程序部署在服务器的<code>/home/weblogic/project</code>中，WebLogic安装在<code>/u01/Oracle/Middleware</code>下面，而且程序会动态生成文件，实际上文件会放在类似于<code>/u01/Oracle/Middleware/user_projects/domains/base_domain/servers/app_server1/stage/project</code>的对应位置中，而且激活更新时候文件会丢失，需要重新生成。</p>
<p>避免使用中文文件名和中文路径，以免因字符编码问题导致部署或升级失败。举个例子，如果文件里有中文名，打包并解压之后文件名变成了乱码，那么更新的时候WebLogic会提示<code>Error occurred while downloading files from admin server for deployment request "xxx,xxx,xxx". Underlying error is: "null"</code>。</p>
<h2 id="数据源名称">数据源名称</h2>
<p>假如JNDI数据源名称为dataSource，在Tomcat中运行时，需要写成<code>java:comp/env/dataSource</code>，但是在WebLogic中运行时要把<code>java:comp/env/</code>去掉，直接写成dataSource。</p>
<h2 id="集群session丢失问题">集群Session丢失问题</h2>
<p>生产环境通常会架设集群，通过负载均衡进行访问。如果负载均衡未按照Cookie进行分配，或者分配策略不完全正确，那么这样的话很可能会存在串Session的问题，例如登录成功之后进的是节点1，稍微做点操作后默默地跳到了节点3，导致会话丢失，系统提示重新登录。因为平时开发不会去使用负载均衡，所以可能注意不到这个问题。</p>
<p>这个问题可以通过以下几种方法解决：</p>
<ol type="1">
<li>正确地配置负载均衡，保证同一会话（JSESSIONID）的流量只分配到同一节点上；</li>
<li>使用WebLogic的“会话复制”功能（这个比较正统）；</li>
<li>通过Redis等实现会话共享（比较复杂）。</li>
</ol>
<p>会话复制的操作方法可以用Google搜索。</p>
<h2 id="访问https网站的问题">访问HTTPS网站的问题</h2>
<p>如果程序涉及访问HTTPS网站（包括接口），那么JDK最低要1.7。其实并不是说JDK1.6不行，而是碰到问题的话会非常麻烦，解决起来不如升JDK靠谱。</p>
<p>配置新环境时建议用一个小程序来验证HTTPS是否能正常访问：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLConnection</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpsTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                url <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                url <span class="token operator">=</span> <span class="token string">"https://"</span> <span class="token operator">+</span> url<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">URL</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">URLConnection</span> conn <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用方法：</p>
<pre class="line-numbers language-none"><code class="language-none">javac HttpsTest.java
java HttpsTest www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>假如报<code>sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code>错，说明证书验证未通过，Java主动拒绝访问目标网站。这时候需要检查：</p>
<ol type="1">
<li>目标网站的HTTPS证书是否有效。可以用Chrome或Firefox浏览器测试一下。</li>
<li>如果目标网站证书有效，你需要检查JDK的根证书库是否正确。</li>
<li>如果目标网站证书无效，你需要将证书加入信任才行。</li>
</ol>
<h3 id="cacerts">cacerts</h3>
<p>如果证书有效，但是Java还是报错，可能是JDK本身没有正确加载根证书库。你需要检查<code>$JAVA_HOME/jre/lib/security/cacerts</code>存不存在，没有的话，可以从其他装Java
8或10的机器上拷一份。</p>
<p>拷完之后注意检查一下JDK有没有把cacerts文件认出来，命令<code>keytool -list -storepass changeit</code>。有的JDK会在其他位置保存根证书库，这样的话你即使拷到security目录也是没用，需要再用<code>keytool -importkeystore -srckeystore 你的cacerts -srcstorepass changeit -deststorepass changeit</code>把你的cacerts文件导一遍（如果你知道正确的位置和文件名，直接把cacerts文件扔到正确位置也行）。</p>
<p>另外如果目标网站采用Let's
Encrypt证书，那么你需要检查一下JDK版本，7u111+（需要掏钱买才能弄到）、8u101+，因为对Let's
Encrypt的信任是后加的，所以低于这个版本的话需要手动导证书，否则还是会报错，跟使用自签名证书没啥区别。</p>
<h3 id="导证书">导证书</h3>
<p>HTTPS证书通常需要花钱，所以开发阶段多会考虑自行签发证书，即自签名证书。系统不信任这种证书，所以你必然要用keytool命令来导证书。操作方法大致是先用浏览器把证书文件保存下来，再运行<code>keytool -trustcacerts -storepass changeit -importcert -alias zhengshu -file 证书文件.cer</code>命令加入信任。</p>
<p>除此之外还要注意三个问题：</p>
<ol type="1">
<li>证书不能过期。过期证书即使设置信任，运行时候也会报错，你必须要求目标网站更换未过期的证书。</li>
<li>若域名与证书的Common
Name不一致，那么会报类似<code>java.security.cert.CertificateException: No name matching xxx found</code>的错。你可以要求目标换用合法证书或修改域名，调不了域名的话也可以在本地修改hosts。</li>
<li>操作系统时间要正确，不管用北京、南京、东京还是西京的时间，别和地球时间差太多。</li>
</ol>
<h2 id="大文件不要打到war包中">大文件不要打到WAR包中</h2>
<p>如果网站提供了软件、视频等体积较大文件的下载，尽量不要把它们打到应用的WAR包中。部署大文件容易导致超时（<code>Timed out while activating</code>），而且如果WAR包解压之后体积太大的话，WebLogic部署会失败。</p>
<p>建议将此类额外下载文件放到专门的文件服务器中。</p>
<h1 id="部署阶段">部署阶段</h1>
<h2 id="操作系统时间">操作系统时间</h2>
<p>用date命令检查一下系统时间是否正确，不对的话要调成正确时间。</p>
<h2 id="主机名与hosts">主机名与hosts</h2>
<p>给服务器设置一个固定IP和固定的主机名，然后将服务器的IP与主机名加入到<code>/etc/hosts</code>中。对于Oracle厂的产品，即便后续设置用不到主机名，设置好之后也可以避免一些不必要的麻烦。</p>
<h2 id="避免放多套javaweblogic">避免放多套Java/WebLogic</h2>
<p>Java也好，WebLogic也好，应用也好，要避免在同一服务器放好几份。如果换了新版本，但旧版本没改名、移走或删除，你有可能会坑了你自己：最典型的例子就是在A目录修改配置文件，怎么改都不生效，仔细看进程列表之后才发现实际启动的是B目录里的程序。</p>
<p>及时清理临时文件。如果处理故障时建立了一些临时配置文件，观察一段时间之后发现系统能够稳定运行，那么你需要找时间用已启用的临时配置文件把未启用的正式配置文件换掉，以免造成误导。</p>
<h2 id="防火墙配置">防火墙配置</h2>
<p>默认情况下，管理控制台的端口是7001，应用是7003，节点管理器是5556，初次部署时需要注意让防火墙放行这三个端口。</p>
<p>为了安全，需要仔细控制防火墙的放行范围，不要让7001和5556暴露到互联网上面。</p>
<p>另外不要把应用部署到AdminServer上面，否则封锁7001端口之后应用就无法访问了。</p>
<h2 id="不要给控制台配置成https">不要给控制台配置成HTTPS</h2>
<p>虽然HTTPS很安全，然而给控制台配置成HTTPS容易产生问题，例如更新部署时节点无响应。建议采用设置强密码与配置防火墙的方式来加固控制台。</p>
<h2 id="进行网络策略测试">进行网络策略测试</h2>
<p>在开始部署之前，建议在应用服务器上测试一下能否访问数据库等资源。如果网络不通，那么改WebLogic设置时可能会无响应，卡了半天之后才蹦出一句<code>The Network adapter could not establish the connection</code>，白白耽误时间。</p>
<p>如果系统没装telnet，可以简单地测试一下能不能ping通，或者通过以下Java程序来测一下端口通不通（有些机房可能会出现IP能ping通但是端口被拦截的情况）：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Socket</span> connect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用法：java IpTest &lt;IP地址> &lt;端口号> [超时时间]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                ip <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                timeout <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在连接 "</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">InetSocketAddress</span> addr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            connect<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>connect<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用方法：</p>
<pre class="line-numbers language-none"><code class="language-none">javac IpTest.java
java IpTest 10.15.2.9 1521<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>涉及HTTPS时建议再对HTTPS网站做个访问测试，具体程序见前文。</p>
<h2 id="修改java.securityjdk6">修改java.security（JDK6）</h2>
<p>Java
6存在一个关于随机数的bug，如果不Hack，在Linux系统下面WebLogic建域和启动时会特别慢，需要卡很长时间（15分钟左右），因此建议装完Java之后立刻去修改java.security。</p>
<p>假设<span
class="math inline">\(JAVA_HOME为`/opt/jdk1.6.0_145`，也就是说JDK装在了这个地方，那么需要修改`\)</span>JAVA_HOME/jre/lib/security/java.security`文件，找到</p>
<pre class="line-numbers language-none"><code class="language-none">securerandom.source&#x3D;file:&#x2F;dev&#x2F;urandom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改成</p>
<pre class="line-numbers language-none"><code class="language-none">securerandom.source&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之后建域和起停之类操作就不需要再等待十多分钟了。</p>
<h2
id="如果通过控制台启动服务器时起不来">如果通过控制台启动服务器时起不来</h2>
<p>如果WebLogic各节点已正确设置，各服务器的防火墙已经开放5556端口，NodeManager也已经启动，但是仍然无法通过控制台启动节点，提示“不兼容的状态”，而且在startNodeManager.sh的输出中出现<code>javax.net.ssl.SSLKeyException: [Security:090482]BAD_CERTIFICATE alert was received from ...</code>：</p>
<h3 id="方法一重新设置证书">方法一：重新设置证书</h3>
<p>在集群的每台服务器上面设置一下证书（如果执行第一行命令就报错的话，请把$WL_HOME换成实际安装目录）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> <span class="token variable">$WL_HOME</span>/server/bin/setWLSEnv.sh
<span class="token builtin class-name">cd</span> <span class="token variable">$WL_HOME</span>/server/lib
<span class="token function">java</span> utils.CertGen <span class="token parameter variable">-keyfilepass</span> DemoIdentityPassPhrase <span class="token parameter variable">-certfile</span> newcert <span class="token parameter variable">-keyfile</span> newkey
<span class="token function">java</span> utils.ImportPrivateKey <span class="token parameter variable">-keystore</span> DemoIdentity.jks <span class="token parameter variable">-storepass</span> DemoIdentityKeyStorePassPhrase <span class="token parameter variable">-keyfile</span> newkey.pem <span class="token parameter variable">-keyfilepass</span> DemoIdentityPassPhrase <span class="token parameter variable">-certfile</span> newcert.pem <span class="token parameter variable">-alias</span> demoidentity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法二不使用ssl">方法二：不使用SSL</h3>
<p>除此以外，还有一种做法是不使用SSL通信以避免出现证书问题：修改<code>$WL_HOME/common/nodemanager/nodemanager.properties</code>文件，将其中的</p>
<pre class="line-numbers language-none"><code class="language-none">SecureListener &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>改成</p>
<pre class="line-numbers language-none"><code class="language-none">SecureListener &#x3D; false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后重新启动NodeManager。另外在控制台上建立“计算机”时，类型就不再是“SSL”，而是“普通”（Plain）。</p>
<h2 id="组建集群">组建集群</h2>
<p>我们并不需要每一台机器都执行一遍建域之类的操作，而且在每一台机器上都手动建域，即使域的名字相同也不一定能正确连接。</p>
<p>更好的做法是：保证各服务器JDK路径和WebLogic安装路径一致，在主节点上面把WebLogic的各种参数都配置好，然后将user_projects目录打包（或者干脆把整个Middleware打包），复制到其他各服务器的相应位置。</p>
<p>由于NodeManager配置文件不在user_projects目录中，因此前文提到的“NodeManager证书”需要在每台服务器上都配置一遍。</p>
<h3
id="服务器监听地址不要写成0.0.0.0">服务器监听地址不要写成0.0.0.0</h3>
<p>服务器监听地址使用固定IP，不要填0.0.0.0。虽然0.0.0.0也是一个有效的监听地址，但是如此配置之后，AdminServer与各节点之间的通信会出现问题，例如服务器状态变成UNKNOWN，或者部署应用无响应。</p>
<h2 id="扩大内存">扩大内存</h2>
<p>默认的Xmx和MaxPermSize比较小，建议在setDomainEnv.sh中把这两个参数适当调大一些。</p>
<p>如果采用32位的JDK（Java6/7/8的测试命令：<code>java -d64 -version</code>，如果报错说明是32位的），那么可以设置的最大内存不会超过4GB，想继续扩大的话只能换成64位JDK。</p>
<h2 id="增加线程数">增加线程数</h2>
<p>如果预计并发数比较高，可以增加应用线程池的线程数。修改config.xml配置文件（例如<code>/u01/Oracle/Middleware/user_projects/base_domain/config/config.xml</code>）。假如应用服务器叫app_server1，那么需要找到类似以下的代码</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>app_server1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>修改成</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>app_server1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>self-tuning-thread-pool-size-min</span><span class="token punctuation">></span></span>1000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>self-tuning-thread-pool-size-min</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>self-tuning-thread-pool-size-max</span><span class="token punctuation">></span></span>1000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>self-tuning-thread-pool-size-max</span><span class="token punctuation">></span></span>
    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是，如果数值改得太大，启动时可能会出现以下错误：</p>
<pre class="line-numbers language-none"><code class="language-none">[ERROR][thread ] Could not start thread [ACTIVE] ExecuteThread: &#39;977&#39; for queue: &#39;weblogic.kernel.Default (self-tuning)&#39;. Resource temporarily unavailable


Attempting to allocate 8192M bytes

There is insufficient native memory for the Java
Runtime Environment to continue.

Possible reasons:
  The system is out of physical RAM or swap space
  In 32 bit mode, the process size limit was hit

Possible solutions:
  Reduce memory load on the system
  Increase physical memory or swap space
  Check if swap backing store is full
  Use 64 bit Java on a 64 bit OS
  Decrease Java heap size (-Xmx&#x2F;-Xms)
  Decrease number of Java threads
  Decrease Java thread stack sizes (-Xss)
  Disable compressed references (-XXcompressedRefs&#x3D;false)

java.lang.OutOfMemoryError: Resource temporarily unavailable in tsStartJavaThread (lifecycle.c:1097).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>报错信息看起来像是内存不足，实际上不是内存不足，而是Linux系统默认情况下限制了最大线程数，需要进行修改。</p>
<p>如果使用CentOS 6或RHEL6，可以按照以下方法进行修改：</p>
<p>首先修改/etc/security/limits.conf，加入 <pre class="line-numbers language-none"><code class="language-none">* hard nofile 1048576
* soft nofile 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<p>然后修改/etc/security/limits.d/90-nproc.conf，加入 <pre class="line-numbers language-none"><code class="language-none">weblogic   soft    nproc     655350<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>最后修改/etc/pam.d/login，加入 <pre class="line-numbers language-none"><code class="language-none">session required &#x2F;lib64&#x2F;security&#x2F;pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>修改完成后不要马上退出shell，要开个新窗口测试各账号能否登进去。如果登不进去（例如提示<code>could not open session</code>），说明参数改得太大，需要适当往小调。</p>
<p>另外如果线程数改大了，内存也应当适当调大，因为每个线程都会占一些内存空间。</p>
<h2
id="启动报错assertion-ia_addressid-failed-如果提示java-net.c229-java_com_bea_wcp_sctp_net_initids-assertion-ia_addressid-failed.可尝试删除u01oraclemiddlewarewlserver_10.3sipservernativelinuxx86_64libsctpwrapper.so文件">启动报错“Assertion
<code>ia_addressID' failed” 如果提示</code>java: Net.c:229:
Java_com_bea_wcp_sctp_Net_initIDs: Assertion 'ia_addressID'
failed.<code>，可尝试删除</code>/u01/Oracle/Middleware/wlserver_10.3/sip/server/native/linux/x86_64/libsctpwrapper.so`文件。</h2>
<h1 id="运维阶段">运维阶段</h1>
<h2 id="应用升级">应用升级</h2>
<p>改完文件之后要在控制台的“部署”里面进行更新，否则内容不会生效。改静态文件也是。</p>
<p>每次更新的时候，JVM会把Class信息保存到内存的永久保留区域中，而旧的内容不会释放。如果WebLogic启动参数中的-XX:MaxPermSize比较小，那么更新几次可能就会卡死挂掉，而且应用日志会显示<code>java.lang.OutOfMemoryError: PermGen space</code>。在这种情况下，把WebLogic里面的服务器停掉然后再启动一次就好了。</p>
<p>建议每升两三次级就彻底重启一次受管节点，避免出现用一阵子之后莫名其妙死掉的问题。</p>
<p>在开始更新到更新结束，应用会出现短暂的中断，因此要注意选择合适的时间进行操作。另外在业务繁忙时进行更新，不但会影响用户，而且容易因为WebLogic繁忙而导致更新无响应或失败。</p>
<p>建议编写一份升级检查表，将准备工作、实施工作和收尾工作全部列入，以免因漏项导致升级出现问题。</p>
<p>如果更新时遭遇<code>Error occurred while downloading files from admin server for deployment request "xxx,xxx,xxx". Underlying error is: "null"</code>，那么需要去检查AdminServer.log的日志（例如<code>/u01/Oracle/Middleware/user_projects/base_domain/servers/AdminServer/logs/AdminServer.log</code>）。我碰到过两种会出现这种错误的情况，一种是文件名乱码，另一种是文件权限不正确（例如服务以weblogic用户运行，但是文件所有者是root，WebLogic访问不了）。假如权限不正确，可以<code>chown -R weblogic:weblogic 存放程序的目录</code>。</p>
<p>我们部分应用服务器安装了WAF并配置了防篡改，如果升级之前忘记关闭防护功能，在控制台上激活时会报错，提示无法“remove
staged files”。</p>
<p>另外建议在系统中加入可配置参数的系统公告功能，这样在升级或者维护之前可以通知用户，使用户及时做好准备。</p>
<h2 id="重启服务器">重启服务器</h2>
<p>如果只是重启应用节点，操作就比较简单，直接在控制台上操作即可。不过，在WebLogic控制台重启服务的时候不要点完“启动”就不管了，一定要等到状态显示为“RUNNING”之后再收工。如果变成“ADMIN”，那么可能是有报错，需要去应用服务器日志检查一下。若确认不耽误事（例如<code>java.lang.NoClassDefFoundError: com/ctc/wstx/stax/WstxInputFactory</code>）那么在控制台点一下“恢复”就好了。</p>
<p>有时观察服务器状态，可以看到状态是“RUNNING”，然而健康状况没有内容，这说明节点可能死了，你可以试一下重启复活。</p>
<p>如果不慎关掉AdminServer，或者打算整个重启，那么操作会比较麻烦，大体上要按以下思路操作：</p>
<ol type="1">
<li>在管理节点上启动AdminServer（startWebLogic.sh）。</li>
<li>在每个节点上都启动一遍NodeManager（startNodeManager.sh）。</li>
<li>进入管理控制台，启动各应用节点。</li>
<li>启动完成后确认“部署”里面各应用是否启动。</li>
</ol>
<h2 id="打补丁">打补丁</h2>
<p>WebLogic打补丁速度比较慢，在打补丁过程中你需要干等，所以要多留一些操作时间。建议白天操作，晚上就可以少加班了。</p>
<p>安装补丁之前，必须先检查bsu.sh文件（例如<code>/u01/Oracle/Middleware/utils/bsu/bsu.sh</code>），将其中的最大内存Xmx改大些，例如-Xmx2048m。因为打补丁实在太慢，等了半天出来的却是java.lang.OutOfMemoryError的话实在太憋屈。</p>
<p>打补丁对业务影响不大，可以随时操作，但是打完之后需要彻底重启WebLogic才能生效。AdminServer也要重启，否则后面容易碰到莫名其妙的问题。</p>
<h2 id="搬家迁移">搬家/迁移</h2>
<p>尽量不要搬家，因为WebLogic安装和建域之后会产生很多已经写好了路径的配置文件。Middleware目录中有个registry.dat，此文件记录了WebLogic的安装情况，而且已经加密，如果贸然搬家会在升级等方面遇到麻烦。确实要进行迁移的话，新服务器WebLogic路径务必与旧服务器相同，想不同就去建立软链接。</p>
<h2 id="改密码">改密码</h2>
<h3 id="weblogic控制台密码">WebLogic控制台密码</h3>
<p>修改密码之前先观察系统有没有相关监控或管理软件，例如Oracle Enterprise
Manager。假如WebLogic控制台密码改了，依赖控制台的监控软件的密码没改，那么你可能会把自己锁在外面。</p>
<p>找个方便重启的时间来修改WebLogic控制台密码。在控制台修改完成之后，你需要试探性地重启各应用服务器节点，确保各节点不会因密码错误而无法启动。</p>
<p>假如应用节点真的因控制台密码错误而无法启动，你需要在WebLogic“服务器”页面中找到该节点，进入详细设置，在页面上方找到“服务器启动”页面，并在里面（最下方）输入正确的用户密码。</p>
<h3 id="数据库数据源密码">数据库/数据源密码</h3>
<p>修改数据库密码会造成应用短暂停摆。你需要找个方便关停应用系统的时间来进行操作，或者提前通知系统维护。</p>
<p>在正式修改数据库密码之前，你需要确认数据库账户锁定阈值，或者能够以sysdba身份（Oracle数据库）操作。无论是先改WebLogic数据源密码，还是先修改数据库密码，只要WebLogic连接池尝试以旧密码建立连接，数据库账号就有可能会立刻锁定。</p>
<h2 id="监控">监控</h2>
<p>建议在服务器上面安装专门的监控软件。像我们项目组那种服务器由用户管理，应用由项目组自行运维的情况，更要有自己的监控程序，这样在出现问题时也好及时定位，以免一塌糊涂。</p>
<p>目前我们项目组自己写了一个监控脚本，在繁忙时期每隔10分钟、空闲时期每隔半小时把WebLogic控制台的一些常用指标记录到日志文件中（通过cron控制），<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2luZm5hbi9zY3JpcHRzL2Jsb2IvbWFzdGVyL+mDqOe9suWSjOi/kOe7tC9XZWJMb2dpYy1tb25pdG9yLnNo">代码见此<i class="fa fa-external-link-alt"></i></span>。</p>
<h2
id="莫名其妙白页加载jsp页面时提示classnotfoundexception">莫名其妙白页（加载JSP页面时提示ClassNotFoundException）</h2>
<p>系统运行一段时间之后，有用户反馈系统部分页面莫名其妙白页，没有任何内容，也没有错误信息。</p>
<p>查日志，发现报错信息类似： <pre class="line-numbers language-none"><code class="language-none">&lt;Jan 1, 2019 1:23:45 PM CST&gt; &lt;Error&gt; &lt;HTTP&gt; &lt;BEA-101249&gt; &lt;[ServletContext@1302345678[app:appname module:appname path:&#x2F;appname spec-version:null]]: Servlet
class jsp_servlet._somepackage.__somejsppage for servlet &#x2F;somepackage&#x2F;somejsppage.jsp could not be loaded because the requested cl
ass was not found in the classpath &#x2F;u01&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;app_domain&#x2F;servers&#x2F;app_server1&#x2F;stage&#x2F;appname&#x2F;appname&#x2F;WEB-INF&#x2F;classes:&#x2F;u01
&#x2F;app&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;app_domain&#x2F;servers&#x2F;app_server1&#x2F;stage&#x2F;appname&#x2F;appname&#x2F;WEB-INF&#x2F;lib&#x2F;……（一大堆jar包的文件名）:&#x2F;u01&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;app_domain&#x2F;servers&#x2F;app_server1&#x2F;tmp&#x2F;_WL_user&#x2F;appname&#x2F;wekfjq.
java.lang.ClassNotFoundException: jsp_servlet._somepackage.__somejsppage.&gt;
javax.servlet.ServletException: [HTTP:101249][ServletContext@1302345678[app:appname module:appname path:&#x2F;appname spec-version:null]]: Servlet class jsp_servlet._somepackage.__somejsppage for servlet &#x2F;somepackage&#x2F;somejsppage.jsp could not be loaded because the requested class was not found in the classpath .
java.lang.ClassNotFoundException: jsp_servlet._somepackage.__somejsppage.
        at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:551)
        at weblogic.servlet.jsp.JspStub.prepareServlet(JspStub.java:283)
        at weblogic.servlet.jsp.JspStub.prepareServlet(JspStub.java:218)
        at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:244)
        at weblogic.servlet.internal.TailFilter.doFilter(TailFilter.java:26)
        at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:60)
        at com.xxx.xxx.xxx.XXXXXFilter.doFilter(XXXXXFilter.java:123)
        at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:60)
        at weblogic.servlet.internal.RequestDispatcherImpl.invokeServlet(RequestDispatcherImpl.java:527)
        at weblogic.servlet.internal.RequestDispatcherImpl.forward(RequestDispatcherImpl.java:253)
        ......（与我们应用完全无关的堆栈）
        at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:60)
        at weblogic.servlet.internal.RequestEventsFilter.doFilter(RequestEventsFilter.java:27)
        at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:60)
        at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.wrapRun(WebAppServletContext.java:3748)
        at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3714)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:120)
        at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2283)
        at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2182)
        at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1499)
        at weblogic.work.ExecuteThread.execute(ExecuteThread.java:263)
        at weblogic.work.ExecuteThread.run(ExecuteThread.java:221)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>因为我们的JSP页面是正常的，程序也未进行改动，最初认为是WebLogic内部错误，重启了WebLogic。重启之后，页面能够正常显示，然而过一段时间之后还是莫名其妙白页，而且本来已经变好的页面也坏掉了。重新部署应用、重新建域，甚至重装WebLogic之后仍然白页。</p>
<p>后来在WEB-INF目录放了一个weblogic.xml，内容如下 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>weblogic-web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.oracle.com/weblogic/weblogic-web-app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd http://xmlns.oracle.com/weblogic/weblogic-web-app http://xmlns.oracle.com/weblogic/weblogic-web-app/1.2/weblogic-web-app.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-root</span><span class="token punctuation">></span></span>appname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-root</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-descriptor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keepgenerated</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keepgenerated</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>precompile</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>precompile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>precompile-continue</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>precompile-continue</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page-check-seconds</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page-check-seconds</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>debug</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>debug</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-descriptor</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>container-descriptor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-reload-check-secs</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-reload-check-secs</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>container-descriptor</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>weblogic-web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>要求WebLogic对JSP预编译。重新部署之后，莫名其妙白页的问题解决了。</p>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>WebLogic</tag>
      </tags>
  </entry>
  <entry>
    <title>从Eclipse切换到IDEA</title>
    <url>/2018/12/12/switch-to-idea-0/</url>
    <content><![CDATA[<p>我们项目组之前一直使用Eclipse进行开发。对于我们项目而言，由于Eclipse存在现实的问题，我便开始研究IDEA的用法，并且试着将工作切换到IDEA上面，之后逐步地在项目组内推广使用IntelliJ
IDEA。本系列文章面向Eclipse使用者，讲述IDEA的一些基本操作，以便平稳地进行切换。
<span id="more"></span></p>
<h1 id="本系列内容">本系列内容</h1>
<ul>
<li><strong>为什么进行切换</strong></li>
<li><a href="/2018/12/13/switch-to-idea-1/">切换的基本操作</a></li>
<li><a href="/2019/01/27/switch-to-idea-2">传统Web项目在IDEA的Project
Structure</a></li>
<li><a
href="/2019/08/03/switch-to-idea-3/">传统Web项目转为Gradle项目</a></li>
</ul>
<h1 id="切换到idea的理由">切换到IDEA的理由</h1>
<p>下面是我向同事推荐使用IDEA（商业版）的一些理由：</p>
<ol type="1">
<li>公司版本管理软件从ClearCase切换到了SVN，这意味着开发工作不再受ClearCase拖累，开发工具也可以随意换成更好用的了。</li>
<li>公司电脑配置不高，而且项目文件非常多，Eclipse用起来很卡。虽然IDEA资源消耗比较高，但是用起来比Eclipse顺畅得多（备注：对于内存只有4GB的电脑，要么加条，要么换旧版IDEA，否则会很糟糕）。</li>
<li>IDEA的搜索比Eclipse快得多，按全项目搜索的话，Eclipse要等把所有文件都过一遍，而IDEA可以一下子搜出来。</li>
<li>IDEA的SVN支持非常好，可以很方便地检查自己修改的代码、查询同事修改、对比文件版本，虽然TortoiseSVN和Eclipse也有类似功能，但是IDEA用起来更舒服。</li>
</ol>
<p>以下也是IDEA的长处，不过有些是个人体验，或者未作为推销的内容向同事介绍：</p>
<ol type="1">
<li>IDEA的工作空间对版本控制友好，只要我把项目配置好，加到版本库中，其他人就可以直接用IDEA打开项目，等IDEA把文件索引完，然后再配一下JDK和Tomcat路径就能投入开发了。Eclipse的话每次全新checkout都要从头开始配置，而且我们项目组有时也会出现因工作安排变动或电脑难用而重新搭环境甚至重装系统的情况。</li>
<li>IDEA集成了数据库插件，代码提示比其他数据库软件好一些。另外修改数据时PL/SQL
Developer需要附上FOR UPDATE，Toad需要用EDIT语句，SQL
Developer需要自己写UPDATE语句，而IDEA可以直接在查询结果上面改。</li>
<li>IDEA对代码风格方面的提示和警告比Eclipse丰富，例如IDEA可以检测出哪些代码是一模一样的，或者哪些类与函数根本没有人使用。</li>
<li>IDEA自带反编译工具，可以方便地反编译代码，以分析一些jar包的原理。</li>
</ol>
<p>当然，Eclipse的用户和插件也不少，对于爱搞配置的人来说应该也比较好用。</p>
<h1 id="差异">差异</h1>
<p>Eclipse和IDEA的界面与操作方法有些区别。概念上的重大差异主要是“Project
Structure”，即项目文件结构的管理，不过如果有人把项目配置好并提交版本控制之后，其他成员反倒不太需要关注这些东西，因此我会另外写一篇文章进行叙述。</p>
<h1 id="法律问题">法律问题</h1>
<p>IDEA分免费的社区版（Community Edition）和收费的商业版（Ultimate
Edition），前者不支持Web开发，只能选用商业版。商业版需要激活，大家往往会用注册码、注册机来进行破解。这当然是违法的，而且比起个人，公司更容易陷入诉讼（告赢了就是一大笔钱），因此有条件的话务必买正版。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>从Eclipse切换到IDEA（一）：切换操作</title>
    <url>/2018/12/13/switch-to-idea-1/</url>
    <content><![CDATA[<p>本文主要介绍IDEA的操作方法。为了避免出现复杂问题，本文假设项目已经事先配置好，而且配置文件加到了版本控制中，其他人只要下载代码就可以直接用IDEA打开。
<span id="more"></span></p>
<h1 id="初始化配置">初始化配置</h1>
<p>下面只讲Windows的操作方法（尽管截图是macOS）。对于Linux或苹果用户而言，我觉得既然能使用这两种系统，就说明不太需要这种详细教程吧。</p>
<h2 id="安装idea">安装IDEA</h2>
<p>IDEA可以从<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhL2Rvd25sb2FkLw==">官网<i class="fa fa-external-link-alt"></i></span>下载，下载完成之后只要下一步下一步地操作就行。如果没钱买正版，请从<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhL2Rvd25sb2FkL3ByZXZpb3VzLmh0bWw=">这里<i class="fa fa-external-link-alt"></i></span>找个稍微旧一点的版本，因为太新的版本可能没有破解工具或激活码。</p>
<p>安装结束后，如果没给JetBrains公司掏过钱，那么还需要从网上搜一下激活工具进行激活。</p>
<h2 id="安装svn客户端">安装SVN客户端</h2>
<p>SVN客户端推荐使用<span class="exturl" data-url="aHR0cHM6Ly90b3J0b2lzZXN2bi5uZXQvZG93bmxvYWRzLmh0bWw=">TortoiseSVN<i class="fa fa-external-link-alt"></i></span>，因为和系统整合得比较好。安装时注意把“Command
Line Tool”也安装上，否则后面IDEA和SVN配置会比较麻烦。</p>
<h1 id="项目配置">项目配置</h1>
<p>下面假设项目代码库内已经有统一配置，后续会专门解释如何从头开始配置。</p>
<p>第一次打开项目时，系统需要花一段时间去建立索引，而第一次启动时系统也要花时间去编译和复制文件，但是这两项工作完成以后响应就比较快了。</p>
<p>在开始工作之前，需要检查和调整系统与项目的设置，例如SVN、JDK和Tomcat的路径。如果项目使用GBK等编码，还需要检查字符编码设置：</p>
<h2 id="svn路径">SVN路径</h2>
<p>点击File下面的Settings菜单，进入系统设置界面，选择“Version
Control”下面的“Subversion”，在右侧设置中进行SVN路径的设置。找到SVN的安装目录，然后去里面找bin和svn.exe。如果没有发现svn.exe，说明你在安装TortoiseSVN时未安装命令行工具，需要重新安装。</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/svnconfig.png"
alt="SVN设置" />
<figcaption aria-hidden="true">SVN设置</figcaption>
</figure>
<h2 id="jdk路径">JDK路径</h2>
<p>点击File下面的Project
Structure菜单，在弹出的对话框中选择左面的“Project”，可以看到类似下面的图：</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/structure.png"
alt="Project Structure" />
<figcaption aria-hidden="true">Project Structure</figcaption>
</figure>
<p>图中Project SDK为空，所以需要添加项目所使用的JDK，而且Project
language level选择项目所用的JDK版本。下面Project compiler
output则是项目编译之后文件的存放位置，只要别提交到SVN上面，放在哪里其实都无所谓，不过一定要设置，否则无法启动。</p>
<h2 id="tomcat路径">Tomcat路径</h2>
<p>点击Run下面的Edit
Configuration菜单，进入启动设置界面，如下图所示：</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/tomcat-1.png"
alt="缺少Tomcat" />
<figcaption aria-hidden="true">缺少Tomcat</figcaption>
</figure>
<p>点击Tomcat右边的Configure按钮，选择Tomcat安装路径：</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/tomcat-2.png"
alt="Tomcat设置" />
<figcaption aria-hidden="true">Tomcat设置</figcaption>
</figure>
<p>如果路径正确，IDEA会给出Tomcat的版本。</p>
<p>若有自定义的context.xml并在其中指定了数据源，那么还要在Tomcat的lib目录中加入相应的数据库驱动，例如<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9hcHBzLXRlY2gvamRiYy0xMTIwMTAtMDkwNzY5Lmh0bWw=">ojdbc6.jar<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="字符编码">字符编码</h2>
<p>默认字符编码是UTF-8。如果项目使用GB2312、GBK、GB18030这种编码，需要在系统设置“Editor”里的“File
Encodings”设置默认编码。</p>
<h1 id="日常工作">日常工作</h1>
<h2 id="保存">保存</h2>
<p>默认情况下IDEA会自动保存文件修改，所以在IDEA里面不需要按Ctrl+S，也找不到保存按钮。如果不希望自动保存的话，可以在系统设置里面把它关掉。</p>
<h2 id="快捷键">快捷键</h2>
<p>快捷键可以从菜单上面查看，下面列举几个默认而且最常用的按键设置：</p>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 26%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="header">
<th>功能</th>
<th>Eclipse按键</th>
<th>IDEA按键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>全局搜索字符串</td>
<td>Ctrl+H</td>
<td>Ctrl+Shift+F</td>
</tr>
<tr class="even">
<td>全局替换字符串</td>
<td></td>
<td>Ctrl+Shift+R</td>
</tr>
<tr class="odd">
<td>快速修复（设置Getter和Setter、设置import等）</td>
<td>Ctrl+1</td>
<td>Alt+Enter</td>
</tr>
<tr class="even">
<td>清理多余import</td>
<td>Ctrl+Shift+O</td>
<td>Ctrl+Alt+O</td>
</tr>
<tr class="odd">
<td>根据文件名找文件</td>
<td>Ctrl+Shift+R</td>
<td>按两下Shift</td>
</tr>
<tr class="even">
<td>查看变量定义/函数使用情况</td>
<td>Ctrl+点击</td>
<td>Ctrl+点击</td>
</tr>
<tr class="odd">
<td>查看实现</td>
<td>Ctrl+点击，或者在函数上面按住Ctrl，在弹出菜单中选择“Open
Implementation”</td>
<td>Ctrl+Alt+点击</td>
</tr>
<tr class="even">
<td>格式化</td>
<td>Ctrl+Shift+F</td>
<td>Ctrl+Alt+L</td>
</tr>
<tr class="odd">
<td>单步执行，碰到函数就进到函数内部</td>
<td>F5</td>
<td>F7</td>
</tr>
<tr class="even">
<td>单步执行，碰到函数直接返回结果</td>
<td>F6</td>
<td>F8</td>
</tr>
<tr class="odd">
<td>运行到当前函数的return部分</td>
<td>F7</td>
<td>Shift+F8</td>
</tr>
<tr class="even">
<td>暂停之后继续运行程序</td>
<td>F8</td>
<td>F9</td>
</tr>
</tbody>
</table>
<p>如果习惯了Eclipse的按键，也可以将快捷键调成Eclipse模式。具体方法是找到系统设置中的“Keymap”，然后在右面的设置中选择“Eclipse”方案，这样各功能快捷键就和Eclipse一致了。</p>
<h2 id="调试">调试</h2>
<p>在第一次调试时，建议检查一下启动配置是否符合自己需要。</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/debug-1.png"
alt="启动配置" />
<figcaption aria-hidden="true">启动配置</figcaption>
</figure>
<p>和Eclipse一样，如果想使用断点调试等功能，需要用虫子按钮而非普通的启动按钮来启动应用。点击启动之后，IDEA会进行编译并生成Web相关文件（见上图下侧Before
launch部分，实际上IDEA之所以做这两件事是因为你在启动设置里面设置了Build和Build
artifacts这两步操作），准备完成之后便会自动启动Tomcat。</p>
<p>另外也可以直接启动某一个类。启动之前那个类需要有一个静态的main函数，而且相关的配置文件要放对地方（例如src下面）。</p>
<h2 id="版本控制">版本控制</h2>
<p>版本控制通常在IDEA的Version
Control窗口中进行。如果未发现这个窗口，可点击“View”菜单下面“Tool
Buttons”，然后检查窗口下面的工具栏按钮。</p>
<p>除了在Version
Control窗口以外，也可以对着文件或代码点鼠标右键，在弹出的版本管理相关菜单上面进行操作。</p>
<h3 id="changelist">Changelist</h3>
<p>IDEA的Version
Control窗口可以很直观地列出你所进行的修改。如果发现修改未同步到列表中，可以点击左面的刷新按钮刷新一下（如果是新增文件，需要检查一下有没有将其加入到版本控制中）。</p>
<p>代码修改会以“Changelist”的形式组织。举个例子，假如修改了10个文件，有4个文件是为了处理问题A，有3个文件是为了处理问题B，而剩下3个文件是临时修改，不打算提交，这样可以建立三个Changelist（右击然后点击New
changelist菜单），将三组文件分别拖拽到三个Changelist中，这样检查和提交的时候可以按Changelist分组进行。</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/changelist-1.png"
alt="Changelist可以直观地列出你的代码改动，并根据实际需要分组管理。如果未及时刷新状态，可点击左面的刷新按钮。" />
<figcaption
aria-hidden="true">Changelist可以直观地列出你的代码改动，并根据实际需要分组管理。如果未及时刷新状态，可点击左面的刷新按钮。</figcaption>
</figure>
<h3 id="提交代码与回退">提交代码与回退</h3>
<p>当准备进行提交时，只要在Version
Control窗口对着Changelist或待提交文件（按Ctrl键多选）点右键，选择Commit，就会看到提交代码的窗口。</p>
<p>相反地，如果需要撤销更改，选择Revert菜单即可。</p>
<figure>
<img src="/img/2018-12-01-switch-to-idea-1/changelist-2.png"
alt="检查待提交文件列表和内容，输入摘要，点击Commit提交。" />
<figcaption
aria-hidden="true">检查待提交文件列表和内容，输入摘要，点击Commit提交。</figcaption>
</figure>
<h4 id="针对新开发者的提醒">针对新开发者的提醒</h4>
<p>以下内容转载自<span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDA5LzAyLzYuaHRtbA==">编程随想的博客<i class="fa fa-external-link-alt"></i></span>：</p>
<pre class="line-numbers language-none"><code class="language-none">据俺多年的观察，发觉 RCS（备注：版本管理软件）主要有如下几种误用的情况：

◇不正确的提交频度
　　有很多新手不习惯使用 RCS，很少进行代码的提交。有些人甚至到项目快结束时还没有提交过一行代码。结果导致整个 RCS 形同虚设。
　　还有一些人则走向另一个极端，频繁提交代码。有些人每改完一个文件就提交一次，还有些人甚至把修改一半，尚【不能】编译通过的代码也提交到 RCS。
　　俺个人认为，正确的提交频度应该分两种情况：在编写功能代码时，每完成一个功能点，并且自己经过了自测之后，提交一次；在调试的时候，每修复一个 bug，提交一次。这样能够保证提交到 RCS 的代码都是【能编译通过】的（详见[每日构建系列](https:&#x2F;&#x2F;program-think.blogspot.com&#x2F;2009&#x2F;02&#x2F;daily-build-0-overview.html)），并且业务逻辑上也是相对完整的（对于每日构建后的测试很重要）。

◇提交时不写注释
　　很多人提交代码时不写注释，将来再想到版本历史里面找代码就犹如大海捞针般困难。
　　比如在俺经手的代码中，有些源代码文件历时3年，提交次数上百次，如果提交时不写注释，日后根本没法找。

◇不做代码基线（Baseline）、不做代码分支（Branch）
　　在正规的开发团队，每当有一个版本发布（Release）并交付给用户使用时，都需要在 RCS 中制作一个基线，以便于进行相应的 bug 跟踪和补丁制作。因此，诸如【做基线】之类的事情，属于整个团队的集体行为，需要由 Team Leader 牵头来搞。
　　假如一个开发团队从来不做代码基线或者代码分支，仅仅是把 RCS 当成一个源文件的备份工具来用，那至少说明这个团队的 Team Leader 在软件工程管理方面非常失败。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查看文件提交历史">查看文件提交历史</h3>
<p>对着文件点击右键，选择“Subversion”里面的“Show
History”，即可在下面的Version
Control窗口看到文件的提交历史。对着版本点击右键，选择“Show
Diff”，即可看到某个版本是哪个人进行了哪些修改。</p>
<p>除SVN提交历史外，也可以查看文件的本地编辑历史。假如不慎错误地修改了某些内容，又不方便直接回退文件，可对着文件点右键，找到“Local
History”，查看本地的历史记录以便恢复。</p>
<h3 id="查看代码库版本变更记录">查看代码库版本变更记录</h3>
<p>Version
Control第一个页签是你的待提交修改，第二个页签就是其他人已经提交的修改。如果没有看到提交记录，点击刷新按钮即可。</p>
<p>在变更记录窗口中，你可以选择提交记录，查看某一次提交涉及的修改内容。如果需要多版本审查，可以按Ctrl多选，右侧变更记录会将多条提交合并在一起。</p>
<!--## 数据库操作
IDEA Ultimate版内置了DataGrip插件。
-->
<h1 id="参见">参见</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9oZWxwL2lkZWEvbWlncmF0aW5nLWZyb20tZWNsaXBzZS10by1pbnRlbGxpai1pZGVhLmh0bWw=">Migrating
From Eclipse to IntelliJ IDEA<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2018/12/12/switch-to-idea-0/">为什么进行切换</a></li>
<li><strong>切换的基本操作</strong></li>
<li><a href="/2019/01/27/switch-to-idea-2">传统Web项目在IDEA的Project
Structure</a></li>
<li><a
href="/2019/08/03/switch-to-idea-3/">传统Web项目转为Gradle项目</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>在2018版MacBook Pro手工安装Windows 10，以及分区扩容</title>
    <url>/2018/12/14/install-windows-on-macbook-pro-2018/</url>
    <content><![CDATA[<p>几个月前在苹果商店购买了新版的MacBook
Pro，为了玩个游戏（例如GTA5），准备安装Windows系统，然而发现通过系统的Boot
Camp（启动转换助理）进行安装根本无法成功。经过一番折腾，得出一个结论：只能手工制作安装盘，以手工方式安装Windows
10。 <span id="more"></span></p>
<h1 id="坑的要点">坑的要点</h1>
<ul>
<li>用Boot
Camp创建启动盘时会提示“‘启动转换’安装失败”、“拷贝Windows安装文件时出错”、“‘启动转换助理’正在移除其创建的分区，请稍候”，因为Windows
10安装盘通常大于4GB，FAT32格式分区装不下，所以失败。</li>
<li>即使找到了小于4GB的安装盘，也不要继续用Boot
Camp来进行安装。虽然重启之后能进入到Windows安装程序中，也能正常地下一步下一步，但是只要到再努力一小下就会成功的时刻，安装程序就会蹦出“Windows无法更新计算机的启动配置，安装无法继续”，然后系统开始自动回滚，结果失败。</li>
</ul>
<p>这说明Boot Camp本身可能有bug，我们不能使用Boot Camp进行安装。</p>
<h1 id="避免踩坑的操作步骤">避免踩坑的操作步骤</h1>
<ol type="1">
<li>做好以下准备：
<ul>
<li>U盘：注意文件系统要FAT32的，所以尽量不要用移动硬盘</li>
<li>USB键盘、USB鼠标（至少要预备个鼠标）</li>
<li>USB转接线（建议用那个死贵死贵要一百多块钱才能买一个的官方转接线）</li>
<li>下载Windows 10 64位安装盘（可以去<span class="exturl" data-url="aHR0cDovL21zZG4uaXRlbGx5b3UuY24=">msdn.itellyou.cn<i class="fa fa-external-link-alt"></i></span>下载），将安装盘映像当作压缩包解压到U盘上——因为MacBook也是EFI启动，所以解压就足够了，不需要特意找刻录软件去刻录</li>
<li>给Windows多划些空间。现代游戏动不动就几十个G，而Windows系统本身再占三四十G，不划到100GB根本不够用。游戏种类再多些的话，就要变成Mac只留100GB了。</li>
</ul></li>
<li>按住Command+R开机，进入Recovery模式，完成以下操作：
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9ndWlkZS9kaXNrLXV0aWxpdHkvZHNrdXRsMTQwMjcvbWFj">在磁盘工具给Windows分区、格式化<i class="fa fa-external-link-alt"></i></span>。注意两点，第一是记住磁盘容量以免在安装时错误地格式化，第二是尽量把容量计算好，因为调整容量非常麻烦，而且很可能要删分区。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9IVDIwODMzMA==">关闭安全启动<i class="fa fa-external-link-alt"></i></span></li>
</ul></li>
<li>回到macOS，启动Boot
Camp，点击“操作”中的“下载Windows支持软件”。下载完成后相关文件会放到家目录中，把它复制到U盘根目录中。这一步不要漏掉，否则后面安装时找不到硬盘。</li>
<li>插上U盘，重启电脑，启动时按住Option键，从U盘启动。</li>
<li>进入Windows安装程序，把事先预备好的键盘和鼠标接上，如果能操作，那么就可以按正常步骤安装Windows了。若在选择分区时提示没有硬盘或分区，可以点击“加载驱动程序”按钮，找到事先在macOS系统里面下载的支持软件，安装SSD驱动，使Windows安装程序能够发现分区。</li>
<li>安装成功后，进入Windows系统，找到U盘里的支持软件，运行安装程序。安装成功后重启。</li>
</ol>
<p>以这种方式进行安装，除了有点麻烦以及不能在macOS的Boot
Camp界面进行管理（即删除Windows）以外，其他基本上没什么区别。</p>
<h1 id="调整分区容量">调整分区容量</h1>
<p>一旦Windows系统用起来了，调整容量将是极其麻烦的事情。如果非扩容不可，建议先备份数据，然后删掉Windows分区，全部重来。</p>
<p>但是，如果Mac分区剩余空间比Windows系统盘大，那么还可以以一种麻烦的方式完成扩容：将Windows系统盘备份到映像，删除Windows盘并重新分区，然后恢复备份，修正分区表。如果操作成功，那么就不需要重装系统和各软件，也不需要再调系统设置了。</p>
<p>注意，操作有风险！如果不熟悉装机以及Linux/Unix操作，请不要继续，以免造成系统损坏或数据丢失！</p>
<p>建议在操作时使各分区容量不相同，而且进行每一步破坏性操作之前确认目标分区容量，以避免误操作。</p>
<p>按以下步骤操作：</p>
<ol type="1">
<li>准备工作：
<ul>
<li>Windows安装U盘，其中已经预备好Boot Camp的“Windows支持软件”。</li>
<li>转接线</li>
<li>USB键盘和鼠标（这次要敲命令所以一定要准备好键盘）</li>
</ul></li>
<li>按住Command+R开机，进入Recovery模式。</li>
<li>进入磁盘工具，确认Windows安装盘的位置（例如/dev/disk0s2）以及Mac系统盘的名称（例如Macintosh
HD）。如果还是拿不准的话，可以在终端里用“diskutil info
/dev/disk0s2”这种命令来确认。</li>
<li>退出磁盘工具，进入终端。假如Mac系统盘叫做Macintosh
HD，Windows系统盘是/dev/disk0s2，那么需要输入以下命令进行备份：
<pre class="line-numbers language-none"><code class="language-none">cd &quot;&#x2F;Volumes&#x2F;Macintosh HD&quot;
dd if&#x3D;&#x2F;dev&#x2F;disk0s2 of&#x3D;backup.img bs&#x3D;1m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>完成后重新进入磁盘工具，删除Windows分区，重新调整分区，不要格式化。Windows分区格式化工作交给Windows来做。</li>
<li>重启，从U盘启动Windows安装程序，接上鼠标，在Windows安装程序界面上进行格式化。</li>
<li>回到Mac的Recovery模式，确认新分区的位置是disk几s几（例如disk0s4）。</li>
<li>重新进入终端，恢复映像： <pre class="line-numbers language-none"><code class="language-none">cd &quot;&#x2F;Volumes&#x2F;Macintosh HD&quot;
dd if&#x3D;backup.img of&#x3D;&#x2F;dev&#x2F;disk0s4 bs&#x3D;1m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>这时候Windows应该可以重新进入了。但是，dd并非那种专业Windows分区备份还原软件，所以Windows分区的容量和剩余空间还是错的，需要修正。再次用Windows安装盘启动，接上键盘和鼠标，这次按Shift+F10进入命令提示符，然后输入diskpart，进入分区工具。</li>
<li>在diskpart里输入以下命令（注意命令中的“0”和“4”要根据实际情况填写）：
<pre class="line-numbers language-none"><code class="language-none">list disk
sel disk 0
list volume
sel volume 4
extend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>检查两个系统能否正常启动。如果没问题就可以删掉苹果系统里的/backup.img了。</li>
</ol>
<h1 id="后续2019年">后续（2019年）</h1>
<p>实际上大多数ISO是可以借助Boot Camp安装的，可以去<span class="exturl" data-url="aHR0cHM6Ly9tc2RuLml0ZWxseW91LmNuLw==">MSDN I Tell
You<i class="fa fa-external-link-alt"></i></span>多试几个版本，总有一个能用的。如果版本比较老，装好之后再去Windows
Update里头做个升级就行了。</p>
<h1 id="后续二2020年">后续二（2020年）</h1>
<p>Parallels Desktop 15优化了苹果电脑显卡支持。对于MacBook
Pro来说，只要不是特别现代的游戏，虚拟机也能带得动了。例如本人试验，在虚拟机里（Windows
10，分配6GB内存），2019年发布的DOA6把电脑像挖矿一样卡崩了，同年发布的AI少女卡成了幻灯片，而2012年的CSGO就没有什么大毛病。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Boot Camp</tag>
      </tags>
  </entry>
  <entry>
    <title>升级发版检查表</title>
    <url>/2018/12/20/deploy-checklist/</url>
    <content><![CDATA[<p>系统升级和发版是一个动静很大的操作，必须充分做好实施计划和应急预案。本文是我们项目（项目制）日常升级的检查表，供大家参考。</p>
<span id="more"></span>
<ul>
<li>完成项目内准备工作
<ul>
<li>完成所有功能测试</li>
<li>完成代码审查，严重缺陷全部关闭</li>
<li>制定对外的发版说明，准备推送内容，更新“更新历史”内容</li>
<li>封版、打基线</li>
<li>应用打包</li>
<li>检查打包内容，确认已按生产环境配置，而且不包含.svn、.git、.DS_Store这样的敏感文件</li>
<li>完成部门内部申请流程</li>
</ul></li>
<li>完成与甲方的沟通工作（需提前一周实施）
<ul>
<li>决定向甲方报告的内容，提交相关申请材料，跟踪甲方审核进度</li>
<li>审核通过后申请堡垒机操作权限</li>
</ul></li>
<li>提前在系统进行升级公告，使用户做好准备（我们设计了相关功能，只要在数据库插入一条记录就能展示公告）</li>
<li>实施升级
<ul>
<li>检查内存、硬盘使用情况，如果硬盘剩余空间不足则清理或压缩旧备份与旧日志</li>
<li>备份原程序</li>
<li>暂停Web应用防火墙（WAF）防护</li>
<li>检查应用运行情况，如有卡死等问题先重启，以免更新操作失败</li>
<li>将程序替换为新版本并进行Web服务器的更新</li>
<li>执行升级初始化SQL</li>
<li>如有数据库表结构调整，并且涉及OGG传输（Oracle），则需要同时处理OGG的源端和汇聚端，并确保OGG状态正常</li>
</ul></li>
<li>升级后验证
<ul>
<li>观察应用是否正常启动</li>
<li>进行功能验证，发现问题及时处理。若在堡垒机权限结束前无法修复，那么则进行回滚（包括程序包和SQL），放弃升级</li>
<li>全部操作完成后，恢复WAF防护</li>
</ul></li>
<li>结束
<ul>
<li>通知甲方升级顺利完成</li>
<li>向用户推送新版本的发版说明</li>
<li>向客服和运维人员通知升级内容</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>项目实施</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码审查：目录</title>
    <url>/2019/01/01/java-code-review-0/</url>
    <content><![CDATA[<p>在讨论代码审查问题之前，需要指出不遵守代码规范的后果：</p>
<ol type="1">
<li>被骂“坑爹”</li>
<li>被同事暗中诅咒</li>
<li>跳槽之后被新同事暗中诅咒</li>
<li>跳槽之后被原来公司的同事暗中诅咒</li>
</ol>
<p>为了避免诅咒的命运，本系列文章整理了一些代码审查问题，并以个人角度对编程习惯提出一些要求和建议。对于项目而言，一方面要加强审查，另一方面要加强对项目成员的教育，防止问题再次产生。</p>
<span id="more"></span>
<figure>
<img src="/img/2019-01-01-java-code-review-0/kuroneko.jpg" alt="诅咒" />
<figcaption aria-hidden="true">诅咒</figcaption>
</figure>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li>
<li><a
href="/2019/01/03/java-code-review-2">应用安全问题</a>：由于安全问题经常被忽视和无视，因此有必要专门指出安全隐患以及预防措施。</li>
<li><a
href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a>：这里主要是我个人关于操作方面的倡议，感觉合理的话可以参考。</li>
<li><a
href="/2019/02/06/java-code-review-4">使用Phabricator进行人工代码审查</a></li>
<li>使用FindBugs和SonarQube等工具进行扫描</li>
<li>……</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码审查（一）：代码审查问题</title>
    <url>/2019/01/02/java-code-review-1/</url>
    <content><![CDATA[<p>当然，由于不同项目用的东西大概会很不一样，所以本文仅供参考。
<span id="more"></span></p>
<h1 id="格式与美观问题">格式与美观问题</h1>
<ul>
<li><p>命名不规范：例如类名小写字母开头、函数名大写字母开头、拼音英语混写等。由于关于命名规范的资料很多，这里不再列出。</p></li>
<li><p>不加空白/空白太多：例如</p>
<ul>
<li>没有缩进、缩进混乱、Tab空格混用</li>
<li>if、while、for或运算符之类的没有空格</li>
<li>一行代码后面留好几行空白</li>
<li>不同业务逻辑之间没有空行或“华丽的分割线”
以上虽然没有错误，但是不好看。</li>
</ul></li>
<li><p>一行内容太长</p></li>
<li><p>代码字符编码或换行符不一致：建议新项目统一用UTF-8字符编码和Unix换行符。</p></li>
<li><p>变量、方法顺序混乱</p></li>
<li><p>表达式太复杂： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误：?:优先级低，导致整个判断条件的逻辑不正确。应该将不同情况用括号包上，分行列举并用注释说明业务规则</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">>=</span> nowYear <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> hasApplied <span class="token operator">||</span> year <span class="token operator">>=</span> nowYear <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">&lt;</span> nowYear <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hasApplied <span class="token operator">||</span> year <span class="token operator">>=</span> hasApplied <span class="token operator">?</span> nowYear <span class="token operator">-</span> <span class="token number">20</span> <span class="token operator">:</span> nowYear <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改成</span>
<span class="token keyword">boolean</span> isValidApply <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">>=</span> nowYear <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> hasApplied<span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token comment">// 业务规则1</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">>=</span> nowYear <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> nowYear <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hasApplied<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token comment">// 业务规则2</span>
    <span class="token punctuation">(</span>year <span class="token operator">>=</span> <span class="token punctuation">(</span>hasApplied <span class="token operator">?</span> <span class="token punctuation">(</span>nowYear <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>nowYear <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 业务规则3</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isValidApply<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>使用魔法值（未定义的常量）：建议改用常数或枚举。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>vo<span class="token punctuation">.</span><span class="token function">getStatusFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 4是什么状态？</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
</ul>
<h1 id="字符串操作">字符串操作</h1>
<ul>
<li><p>使用==和!=比较字符串：在Java中==和!=比较的不是字符串内容，应该用equals方法。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改之后</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>空指针风险：字符串对象和常量比较时，应当把常量放前面，例如
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 正确：str为null时返回false，不会报错，也不需要另外去判断</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<ul>
<li>接上条：判断是否为空串时，未判断是否为null。建议改用StringUtils.isEmpty或StringUtils.isNotEmpty。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 应该是 str != null &amp;&amp; !"".equals(str)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul></li>
<li><p>使用equals比较StringBuffer、StringBuilder或Date的值：如果equals前后一个是String，另一个是StringBuffer等对象，那么返回结果一定是false：
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// 错误：前后类型不一致，结果肯定是false</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"2019-01-01"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// 修改之后</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 或者 if (sql.length() == 0) &#123; ... &#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"2019-01-01"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
<span class="token comment">// 或者 if ("2019-01-01".equals(DateFormatUtils.ISO_DATE_FORMAT.format(date))) &#123; ... &#125; </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>在for、while循环里面用+=拼接字符串：使用+=拼接字符串的效率比较低，运行数百次就会和StringBuilder产生明显差别，应该用StringBuilder或StringBuffer（如果多线程的话）拼接字符串。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误</span>
<span class="token class-name">String</span> output <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    output <span class="token operator">+=</span> id <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>      <span class="token comment">// 直接拼接字符串效率较低</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改之后</span>
<span class="token class-name">StringBuilder</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    output<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>split之后用固定下标取值： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 错误：如果str中分隔符后面没有内容（例如a,,b,c,,），val的位置将不是3</span>

<span class="token comment">// 可以修改成</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者不再依赖位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>split时未注意分隔符前后有空格：例如原始数据是<code>1, 2,3 , 4</code>。建议取值之后trim。</p></li>
<li><p>使用split、trim之前未判断是否为null：常见于从数据库获取值之后立即操作。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> remark <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"REMARK"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 错误：未判断REMARK是否为null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li>
</ul>
<h1 id="对象访问">对象访问</h1>
<ul>
<li><p>在循环里面初始化对象： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplyFormPO</span> applyForm<span class="token operator">:</span> applyList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 浪费资源</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    applyForm<span class="token punctuation">.</span><span class="token function">setOperating_time</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改成</span>
<span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplyFormPO</span> applyForm<span class="token operator">:</span> applyList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    applyForm<span class="token punctuation">.</span><span class="token function">setOperating_time</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
需要注意的是，并不是所有在循环里初始化对象的代码都有问题，例如下面代码就不能向上面那样改：
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplyFormPO</span><span class="token punctuation">></span></span> applyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplyFormPO</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">ApplyFormPO</span> applyForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplyFormPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这个不能放到for外面，因List里面保存的是对象引用</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    applyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>applyForm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>空指针：在DAO、List、Map等地方取值时未判断是否为null，例如
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误：未判断list的元素个数</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 错误：未判断中间变量A和B是否为null</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>包装类比较==或!=： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment">// 错误：下面比较的不是i1和i2的值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<ul>
<li>顺便提一下，float、double即使不是包装类也不能用==或!=比较，因为存在精度问题。</li>
</ul></li>
<li><p>在for循环里添加或删除集合中的元素： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> obj<span class="token operator">:</span> itemList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 错误：会破坏for循环</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改方法：使用Iterator操作删除，或者再创建一个List，将删除操作反映到新List中</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> newItemList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> obj<span class="token operator">:</span> itemList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"d"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        newItemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> obj<span class="token operator">:</span> newItemList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 后续操作使用newItemList，或者以 itemList = newItemList; 替换</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>static
SimpleDateFormat：SimpleDateFormat不是线程安全的，其实例不应定义成静态变量。建议不再使用SimpleDateFormat，而是改用DateFormatUtils。</p></li>
<li><p>工具类未使用static定义，或者static方法仍然在new对象之后调用：
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 错误：应改成static</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">StringUtils</span> su <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 改成static之后无需再实例化，以免浪费资源</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>su<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
</ul>
<h1 id="异常处理">异常处理</h1>
<ul>
<li><p>将异常用作流程控制：该用if-else进行判断的地方不要用try-catch，因为效率低以及语义不同。</p></li>
<li><p>在for或while中try-catch：同样消耗资源，建议将try块挪到循环外面。</p></li>
<li><p>捕获/抛出NullPointerException或IndexOutOfBoundsException等异常：空指针、索引越界等问题应当使用if判断来避免，而且此类问题有可能是业务层面问题，不应靠异常机制处理。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>poList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token string">"N"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 错误：应当避免使程序产生此类异常</span>
    result <span class="token operator">=</span> <span class="token string">"E"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 错误：应当避免使程序产生此类异常</span>
    result <span class="token operator">=</span> <span class="token string">"E"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改成</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>poList <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> poList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">=</span> <span class="token string">"E"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>poList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token string">"N"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>打印日志：</p>
<ul>
<li>发生异常却未向用户反馈，仍然提示“成功”：实际上已经出错了，应当提示出来。如果确定对用户没有影响，可以忽略，那么应当在注释中明确指出来。</li>
<li>报错信息缺少用户能看懂的语言：应当先提示用户能看得懂的内容，给出大概的错误原因和处理方法。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"保存成功！"</span><span class="token punctuation">,</span> <span class="token class-name">MessageLevel</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MessageLevel</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误：用户看不懂Exception的内容</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"保存过程中发生内部错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>日志级别与实际情况不一致：例如用error输出调试内容、用debug输出错误信息。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"保存成功！"</span><span class="token punctuation">,</span> <span class="token class-name">MessageLevel</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"保存过程中发生内部错误："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token class-name">MessageLevel</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"保存过程中发生内部错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 错误：应该是error</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
如果系统在上线一段时间之后已经比较稳定，建议提高日志级别，以节约服务器空间和I/O资源消耗。</li>
<li>屏幕提示和日志记录不一致： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"保存成功！"</span><span class="token punctuation">,</span> <span class="token class-name">MessageLevel</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"保存过程中发生内部错误："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token class-name">MessageLevel</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询工作单信息出错"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 错误：与屏幕提示不一致，找日志时会产生困扰</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul></li>
<li><p>捕获异常但未做任何处理：一旦出现异常，开发人员将无法进行诊断。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 应向用户反馈（最外层）或向上抛（不是最外层的话）</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>重复捕获异常：在业务层捕获异常，使得业务调用者无法得知异常，也无法向用户提供反馈。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 业务逻辑</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessBO</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApplyPO</span> <span class="token function">getApplyInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> applyId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment">// 业务逻辑</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询时发生异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 错误：业务层的异常未往上抛，这样即使发生异常用户也无法收到反馈</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 业务调用者</span>
<span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessController</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/apply/&#123;id&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getApplyInfo</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ApplyPO</span> applypo <span class="token operator">=</span> <span class="token class-name">BusinessBO</span><span class="token punctuation">.</span><span class="token function">getApplyInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 虽然使用Exception不会产生编译错误，但是这里根本捕捉不到异常</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>在Web请求层（SpringMVC的Controller、Struts的Action）或WebService服务上面抛出异常：服务调用者无法捕获服务抛出的异常，顶多能够得知服务返回了500状态码（然而这样是不对的）。应该由双方约定错误信息格式，将抛出异常改成返回错误码。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebService</span><span class="token punctuation">(</span>endpointInterface <span class="token operator">=</span> <span class="token string">"com.company.BusinessService"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessService</span> <span class="token keyword">implements</span> <span class="token class-name">IBusinessService</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// 错误示例 - Service不能抛出异常</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 正确示例 - 返回错误码，使调用者得知接口通了，但是结果异常</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            result <span class="token operator">=</span> <span class="token string">"&#123;\"result\": \"SUCCESS\", \"info\": \"操作成功\"&#125;"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            result <span class="token operator">=</span> <span class="token string">"&#123;\"result\": \"E01\", \"info\": \"操作失败，数据库异常\"&#125;"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
</ul>
<h1 id="数据库操作">数据库操作</h1>
<ul>
<li><p>未关闭资源：未关闭ResultSet、PrepareStatement、Connection或者各种（不一定是数据库的）流。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 错误：未关闭资源</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 应在finally中释放资源</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    stmt <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>在循环中操作数据库：建立连接、执行SQL和关闭连接需要时间，虽然一次执行时间可能不长，但是在循环中累积会很耗时。因此应当减少数据库操作次数，一次性查询好，或者使用批处理一次性执行修改。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 从数据库获取对象</span>
    <span class="token class-name">ItemPO</span> item <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 错误：在for循环中操作数据库</span>
    <span class="token comment">// 进行修改</span>
    item<span class="token punctuation">.</span><span class="token function">setColA</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token punctuation">.</span><span class="token function">setColB</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将修改保存到数据库中</span>
    <span class="token function">updateItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 错误：在for循环中操作数据库</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 修改成（假定itemList还有其他用途，要不然直接UPDATE就行了）</span>
<span class="token comment">// 一次性将idList里的数据都取出来</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ItemPO</span><span class="token punctuation">></span></span> itemList <span class="token operator">=</span> <span class="token function">getItemList</span><span class="token punctuation">(</span>idList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将itemList装到Map中以便查询</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ItemPO</span><span class="token punctuation">></span></span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ItemPO</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ItemPO</span> item<span class="token operator">:</span> itemList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"UPDATE BUSINESS SET AAA=?, BBB=? WHERE ID=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 从Map获取对象</span>
    <span class="token class-name">ItemPO</span> item <span class="token operator">=</span> itemMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 进行修改</span>
    stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加入批处理</span>
    stmt<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 执行批处理</span>
stmt<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>getString之后未判断是否为null，或者从DAO取值后未判断是否为null：从可空字段取值之后，返回的可能是null。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> remark <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"REMARK"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 错误：未判断是否为null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li>
<li><p>事务</p>
<ul>
<li>该有事务的地方没加事务：对于一系列数据库修改操作而言，如果这些操作应当“共进退”，即要么全部执行完，要么出错之后能够全部恢复，那么应当加入事务控制。</li>
<li>发生异常时未回滚事务： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 错误：此处应有conn.rollback();</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>重复提交/回滚事务：已经commit/rollback之后又执行了commit/rollback。如果在开启事务之后调用了一些函数，但是未注意到函数里面也有事务控制，那么结果可能会出错。</li>
</ul></li>
<li><p>该加锁的地方没加锁：例如从流水号表取下一流水号 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getNextSerial</span><span class="token punctuation">(</span><span class="token class-name">String</span> businessType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"SELECT NEXT_NO FROM T_SERIAL WHERE ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> next_no <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"NEXT_NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> businessType <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> next_no<span class="token punctuation">;</span>
            <span class="token comment">// 将流水号表中的记录加1</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将初始值置为1，并向流水号表插入记录</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
假如NEXT_NO为5，那么在并发条件下各用户获取到的可能都是5，从而产生冲突，因此需要通过加锁进行控制（例如synchronized）。另外注意这种代码在读取数据时就发生了冲突，所以光加事务控制是不起作用的。</p></li>
</ul>
<h1 id="sql语句">SQL语句</h1>
<ul>
<li>SQL语法错误：例如引号不配对、括号不配对、数据类型不匹配，或者拼接的SQL缺空格、有多余AND和多余逗号等。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"SELECT ID,NAME FROM TAB WHERE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cond1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 两个错误：一个是缺空格，另一个是在WHERE后面直接拼接AND了</span>
    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"AND cond1='"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">escapeSQL</span><span class="token punctuation">(</span>cond1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cond2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" AND cond2 IN ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> cond2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">escapeSQL</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"',"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 错误：未处理最后一个多余的逗号</span>
    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用SELECT *：应当写清字段名而非简单粗暴的*。</li>
<li>直接拼接SQL：未对用户输入进行处理，会导致SQL注入，应该用PreparedStatement或者使用转义函数对用户输入内容转义。
<ul>
<li>接上条，要避免重复转义。</li>
</ul></li>
<li>对可空字段使用&lt;&gt;或NOT IN：应注意单独判断NULL值。
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 假设FLAG是可空字段，那么以下都是有问题的</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME <span class="token keyword">FROM</span> TAB <span class="token keyword">WHERE</span> FLAG<span class="token operator">&lt;></span><span class="token string">'1'</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME <span class="token keyword">FROM</span> TAB <span class="token keyword">WHERE</span> FLAG <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 应修改成（下面只考虑NULL问题，不考虑效率问题）</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME <span class="token keyword">FROM</span> TAB <span class="token keyword">WHERE</span> FLAG<span class="token operator">&lt;></span><span class="token string">'1'</span> <span class="token operator">OR</span> FLAG <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME <span class="token keyword">FROM</span> TAB <span class="token keyword">WHERE</span> FLAG <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token operator">OR</span> FLAG <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>子查询返回多条记录： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME <span class="token keyword">FROM</span> TAB <span class="token keyword">WHERE</span> BUSINO<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> BUSINO <span class="token keyword">FROM</span> APPL <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 如果查询APPL会返回多条记录，那么会出错，因此需要调整子查询条件，保证至多返回一条记录，例如（Oracle）</span>
<span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> NAME <span class="token keyword">FROM</span> TAB <span class="token keyword">WHERE</span> BUSINO<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> BUSINO <span class="token keyword">FROM</span> APPL <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">AND</span> ROWNUM<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>用==或&lt;&gt;判断NULL：应使用IS NULL或IS NOT NULL进行判断。</li>
<li>IN后面没有值，或者取值超过了1000个。</li>
<li>参数校验不完整：假如HUGE_TABLE是张很大的表，对于下面代码而言，只要构造不含任何条件的请求，那么就可以把系统搞瘫痪。
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 绕过前台校验，不传任何条件，使程序直接查全表</span>
<span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"SELECT NAME,DESCRIPTION FROM HUGE_TABLE WHERE 1=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cond1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" AND COND1='"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">escapeSQL</span><span class="token punctuation">(</span>cond1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cond2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" AND COND2='"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">escapeSQL</span><span class="token punctuation">(</span>cond2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cond3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" AND COND3='"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">escapeSQL</span><span class="token punctuation">(</span>cond3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 另外两个例子：
<ul>
<li>如果分页程序未对每页最多记录数进行限制，那么用户可以让每页显示10000条记录，从而影响系统运行。</li>
<li>如果参数作为UPDATE或DELETE的条件来使用，那么绕过校验会产生灾难性后果。</li>
</ul></li>
</ul>
<h1 id="页面">页面</h1>
<h2 id="htmljsp">HTML/JSP</h2>
<ul>
<li>使用过时的标签和属性，例如&lt;font&gt;或者&lt;span
color="red"&gt;。</li>
<li>HTML标签不匹配。</li>
<li>修改表格标题内容，未修改待展示的数据，或者未修改带有colspan的单元格。</li>
<li>不经转义直接输出动态内容：容易导致XSS注入。</li>
</ul>
<h2 id="javascript">JavaScript</h2>
<ul>
<li>使用document.getElementById等函数之后未判断是否为null。</li>
<li>动态添加控件后未绑定事件。
<ul>
<li>接上条，动态添加控件后，选择器有误，导致既有控件又绑了一遍事件。</li>
</ul></li>
<li>进行AJAX操作，未处理请求超时、请求错误和返回错误码的情况。</li>
<li>后台使用GB2312，前台AJAX内容含有中文，但未进行转码处理。</li>
<li>点击提交、删除等具有危险性的按钮，系统直接执行操作，不给出任何确认提示。</li>
<li>进行保存、提交等耗时操作时没有等待提示，也未将控制按钮变灰：这样容易使用户以为操作不成功而重复点击。</li>
</ul>
<h1 id="其他">其他</h1>
<ul>
<li>线程安全问题：例如使用静态HashMap实例进行缓存。</li>
<li>没有设置连接超时：一旦数据库或接口卡死，而用户还在正常使用系统，那么程序会消耗越来越多的资源，最终导致响应慢甚至崩溃。</li>
</ul>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><strong>代码审查问题</strong></li>
<li><a href="/2019/01/03/java-code-review-2">应用安全问题</a></li>
<li><a href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a></li>
<li><a
href="/2019/02/06/java-code-review-4">使用Phabricator进行人工代码审查</a></li>
<li>使用FindBugs和SonarQube等工具进行扫描</li>
<li>……</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码审查（二）：应用安全问题</title>
    <url>/2019/01/03/java-code-review-2/</url>
    <content><![CDATA[<p>由于安全问题经常被忽视与无视，因此有必要专门指出一些常见的安全隐患以及预防措施。不过Web安全问题已是老生常谈，网上资料也非常丰富，故本文仅仅点到为止，不再详细解释。</p>
<span id="more"></span>
<h1 id="总体原则">总体原则</h1>
<ul>
<li>开发人员要了解各类攻击方式</li>
<li>绝不信任用户输入，开发时要假设用户的输入存在各种攻击</li>
</ul>
<h1 id="注入类">注入类</h1>
<h2 id="跨站脚本攻击xss">跨站脚本攻击（XSS）</h2>
<ul>
<li>示例：在填写信息时，在正常内容中夹带<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>。如展示信息时弹出一个对话框，上面写着“1”，那么说明注入成功。假如代码不是弹框而是后台偷偷执行一段恶意脚本……
<ul>
<li>对策
<ul>
<li>优雅的做法：如无特殊需要，页面上的动态输出均要对HTML字符进行转义。</li>
<li>简单粗暴的做法：控制用户输入，设置XSS相关敏感词清单，发现之后拦截或清理。</li>
</ul></li>
</ul></li>
</ul>
<h2 id="sql注入">SQL注入</h2>
<ul>
<li><p>示例：假如用以下SQL进行登录信息校验 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT 1 FROM users WHERE username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' AND password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
那么登录时在密码中输入<code>' or ''='</code>，SQL就会变成 <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'admin'</span> <span class="token operator">AND</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">OR</span> <span class="token string">''</span><span class="token operator">=</span><span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
结果就会变成不知道密码也能直接进去了。</p>
<p>另外，假如密码输入的是<code>'; drop table users; --</code>……</p>
<ul>
<li>对策
<ul>
<li>优雅的做法：一律避免直接拼SQL，只用PreparedStatement这种能防止注入的方式。</li>
<li>简单粗暴的做法：（1）控制用户输入，设置SQL注入相关敏感词清单，发现之后拦截或清理；（2）设置转义的公共函数，在拼接SQL时总是对来自用户的输入进行转义。</li>
</ul></li>
</ul></li>
</ul>
<h2 id="路径注入">路径注入</h2>
<ul>
<li>示例：用户输入文件名，即可查询<code>/opt/data/info</code>目录中的文件。如果程序控制不严，而且用户输入了<code>../../../etc/passwd</code>，那么就能看到系统有哪些用户了。
<ul>
<li>对策：过滤敏感词，例如“./”、“../”等。</li>
</ul></li>
</ul>
<h2 id="恶意文件执行">恶意文件执行</h2>
<ul>
<li>示例：应用提供了文件上传功能，上传1.jpg之后可通过<code>http://www.xxx.com/files/1.jpg</code>网址访问。如果系统未进行控制，那么上传精心设计的a.jsp并访问<code>http://www.xxx.com/files/a.jsp</code>就可以控制服务器了。
<ul>
<li>对策
<ul>
<li>检查待上传文件的文件类型。</li>
<li>对服务器进行设置，或者对目录加以处理，防止服务器执行存放目录下的文件。</li>
<li>或者不要直接用路径访问文件，而是使用一个Web请求间接访问文件，例如<code>http://www.xxx.com/getfile.jsp?id=1056</code>。</li>
</ul></li>
</ul></li>
</ul>
<h1 id="csrf">CSRF</h1>
<ul>
<li>示例：登录自己的A网站，然后在与其无关的B网站中对A网站的一个功能发POST请求，如A系统未做控制，那么表单会提交成功。假如B系统是背着用户偷偷发的……
<ul>
<li>对策
<ul>
<li>优雅的做法：每个form都配上随机产生的token，提交表单时后台校验token是否有效。</li>
<li>简单粗暴的做法：校验HTTP请求中的Referer，白名单之外的域名一律拦截。</li>
</ul></li>
</ul></li>
</ul>
<h1 id="越权访问">越权访问</h1>
<h2 id="直接对象引用">直接对象引用</h2>
<ul>
<li>示例：自己的工作单是<code>http://www.xxx.com/business/view.jsp?id=1024</code>，将1024改成其他数字就看到了其他人的工作单。
<ul>
<li>对策：加入访问控制检测，只允许查询自己的工作单。例如校验工作单的办理者是否为本人，或者在SQL上面加入权限相关条件，使不具备访问权限的数据查不出来。</li>
</ul></li>
</ul>
<h2 id="认证不全">认证不全</h2>
<ul>
<li>示例：张三有敏感数据查看权限，而李四没有。李四发现张三查看敏感数据的网址是<code>http://www.xxx.com/business/viewsecret.jsp</code>，之后将其记录下来，并使用自己账号访问这个地址，结果也看到了敏感数据。
<ul>
<li>对策：实现一个用户访问控制框架，对于每个URL，先校验用户有没有访问权限，如果没有则拦截。</li>
</ul></li>
</ul>
<h2 id="缺少后台校验">缺少后台校验</h2>
<ul>
<li>示例：在业务申请页面上选择A，系统提示“不符合条件，无法保存”。通过浏览器的检查元素功能选中A，保存成功。
<ul>
<li>对策：无论前台是否有校验，后台务必进行校验。</li>
<li>注意校验可以大致分为两类，一类是有效性校验，例如某个字段不能为空，另一类是业务层面的校验。建议后者设计统一的校验框架。</li>
</ul></li>
</ul>
<h1 id="信息泄漏">信息泄漏</h1>
<ul>
<li>示例1：登录系统，用户名错误时系统提示“用户名错误”，密码错误时系统提示“密码错误”。这样攻击者看到“密码错误”时便知道用户名是正确的。
<ul>
<li>对策1：模糊地提示“用户名或密码错误”，并且加入验证码，或者多次失败后锁定账号，以防暴力猜测密码。</li>
</ul></li>
<li>示例2：在错误信息中出现SQL语句。这样攻击者一旦攻进数据库便会更加容易知道该查哪些表的哪些数据。
<ul>
<li>对策2：防范措施：检查报错内容，并且检查有没有关闭类似“Debug模式”的设置，不要暴露程序源代码或SQL这样的敏感信息。</li>
</ul></li>
<li>示例3：直接展示用户身份证号、手机号等敏感数据。
<ul>
<li>对策3：如无必要展示则不展示，或者进行脱敏处理（138****1234、320101******121234）。</li>
</ul></li>
</ul>
<h1 id="拒绝服务">拒绝服务</h1>
<ul>
<li>示例1：查询功能未控制提交频率，也没有验证码，那么用户可以频繁查询，甚至使用机器人暴力地刷结果。
<ul>
<li>对策1：对于耗时的操作，控制用户提交的频率，或者引入验证码。</li>
</ul></li>
<li>示例2：分页功能每页最多显示100条，如果程序未在后台进行限制，那么可以通过构造请求使每页查出10000条甚至更多，从而影响系统性能。
<ul>
<li>对策2：构造SQL时估计数据规模，并控制数据上限，防止查出过多记录。</li>
</ul></li>
<li>示例3：查询功能要求用户必须填A、B、C中至少一个查询条件，如后台未做控制，那么用户可以构造请求，A、B、C三个条件都不填，从而拖累系统。
<ul>
<li>示例3：考虑到“什么条件都没有”情况下应当如何防止SQL查询结果爆炸。</li>
</ul></li>
</ul>
<h1 id="其他">其他</h1>
<ul>
<li>示例1：用明文/用MD5保存密码。一旦数据库信息泄漏，密码就直接暴露了。
<ul>
<li>对策1：密码必须加密之后再存到数据库中，而且不能直接MD5或者MD5里面套MD5。</li>
</ul></li>
<li>示例2：提交表单时未控制页面按钮与用户操作，使得用户可以容易地多次提交表单。
<ul>
<li>对策2：提交表单时将提交按钮变灰，增加动画反馈，使用户不会直接重复点按钮；提交完成之后重定向到编辑页面，而不是直接停留在POST提交的链接，以免用户因按F5而重复提交。</li>
</ul></li>
<li>示例3：未使用HTTPS请求。
<ul>
<li>注意：HTTP请求内容可以很容易地监听和篡改，但HTTPS几乎不能。</li>
</ul></li>
<li>示例4：正式环境忘记删除调试文件（例如.git、.svn、.DS_Store）</li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FuY2xvdWQuY24vd2l6YXJkZm9yY2VsL293YXNwLWNoZWF0LXNoZWV0LXpoLzEyMTk0Mw==">WEB应用安全测试备忘单<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li>
<li><strong>应用安全问题</strong></li>
<li><a href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a></li>
<li><a
href="/2019/02/06/java-code-review-4">使用Phabricator进行人工代码审查</a></li>
<li>使用FindBugs和SonarQube等工具进行扫描</li>
<li>……</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>安全</tag>
        <tag>注入</tag>
        <tag>越权</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码审查（三）：关于编程习惯的要求</title>
    <url>/2019/01/04/java-code-review-3/</url>
    <content><![CDATA[<p>这里是我个人的倡议，仅供参考。各项目应按照实际情况制定自己的操作规范，经常加强对新人的教育，以免把经文念得越来越歪。
<span id="more"></span></p>
<h1 id="新来者">新来者</h1>
<ul>
<li>主动了解项目有哪些开发规范。
<ul>
<li>如果实际操作与开发规范已经不符，要敢于提出质疑，纠正错误操作或调整过时规范。</li>
</ul></li>
<li>仿写是快速学习的一种方法，但是，仿写时候要动脑子，不要完全照抄已有代码，更不要照搬垃圾代码。</li>
<li>除了完成任务，不要忘了界面美观、操作便利、性能高效、保证信息安全、代码规范清晰这类不会使自己涨工资但是能减少被诅咒次数的东西。</li>
<li>如果不能保质保量地完成任务，一定要尽早吱声。如果拖到最后也做不出来，或者做到最后挖的坑比正面贡献还多，后果好不了。</li>
<li>事后诸葛亮：不听取本文意见，最终结果可能是项目质量感人。</li>
</ul>
<h1 id="开发工作">开发工作</h1>
<h2 id="准备工作">准备工作</h2>
<ul>
<li>新功能和数据库表结构的设计都要通过评审。</li>
<li>搞清楚业务场景和业务逻辑再动手。</li>
<li>把数据量估计好，以免产生正式环境运行过慢、页面展示爆炸等特效。</li>
</ul>
<h2 id="书写新代码">书写新代码</h2>
<ul>
<li>避免直接copy-paste。就算抄也要自己写一遍，过一下脑子。</li>
<li>如果一段代码重复了两三遍甚至更多，那么应当改写成公共代码。
<ul>
<li>接上条，造新轮子之前，查一下有没有可以拿来用的现成的东西。</li>
</ul></li>
<li>将Web（请求处理）、BO（业务逻辑）、DAO（数据持久）等层次与PO（持久对象）、VO（值对象）等领域区分好，例如不要在Web层或JSP页面写业务逻辑。</li>
<li>代码和页面风格都要规范统一。</li>
</ul>
<h2 id="修改既有代码">修改既有代码</h2>
<ul>
<li>修改函数签名、函数实现、应用配置、接口签名等内容之前必须先检查引用情况。
<ul>
<li>修改公共方法和公共配置之前应仔细评估影响并加强测试。如果不清楚影响，那么要先咨询老员工再修改。</li>
<li>设计和修改公共组件（包括公共函数、标签、模板、Filter等），除了正确实现功能，还必须更加关注运行效率、资源占用、线程安全性等问题。</li>
</ul></li>
<li>如果发现待修改的代码比较诡异，修改之前建议先问问老员工有没有什么历史原因或者坑。</li>
<li>即使是简单的修改也要进行测试，因为再有经验也有可能改出问题。</li>
<li>及时清理出于备份目的留下的注释，以免造成混淆。如果后续有可能恢复，那么应当用注释说清情况。</li>
</ul>
<h2 id="提交">提交</h2>
<ul>
<li>提交代码之前完成功能自测。</li>
<li>提交之前对代码进行一下美化，例如自动缩进、移除无用import等（需要事先统一标准）。</li>
<li>提交之前必须检查待提交的Diff（差异）：
<ul>
<li>提交务必完整，不能出现编译错误，不能导致程序无法正常运行。</li>
<li>不能完整提交就不要提交。</li>
<li>不要有错别字、笔误和语病。</li>
<li>不要把本地调试代码（例如alert(val)、屏蔽校验规则、写死测试数据之类的）提交上去。</li>
</ul></li>
<li>提交时书写提交说明，例如实现了什么功能或解决了什么问题。</li>
<li>注意提交频率，按活动一次性提交齐全，不要长期不提交，也不要改一个文件就提交一下。</li>
</ul>
<h1 id="代码细节">代码细节</h1>
<h2 id="命名">命名</h2>
<ul>
<li>除了循环ijk那种一望而知的情况，要用有意义的英文名，而且不要用拼音简写，更不要拼音英语混写。</li>
<li>保持命名一致，例如不要前面还在用“state”表示“状态”，后面就变成了用“status”表示状态。如果不知道如何一致，那么就看代码规范以及别人怎么写的。</li>
<li>如果确实需要借用名称或借用字段，要把情况写清楚，以免造成混淆。</li>
</ul>
<h2 id="sql">SQL</h2>
<ul>
<li>书写SQL要实地执行一下。</li>
<li>要估计投入到生产环境之后会产生多少数据，以免效率过低甚至系统瘫痪。</li>
<li>查询和关联时要留意是否一定能查到数据。不确定的话要与熟悉业务的人或DBA交流。</li>
<li>书写复杂SQL要看执行计划，估算执行效率，必要时与DBA交流，以便在数据库层面进行优化调整。
<ul>
<li>如果顺便发现没有主键或索引，那么也要告诉DBA。</li>
</ul></li>
<li>尽量以绑定变量形式书写SQL而非直接拼接，以提高语句解析效率。</li>
<li>对于改造升级类的系统，注意要兼容历史数据。</li>
</ul>
<h2 id="注释">注释</h2>
<ul>
<li>在业务代码处简单地解释业务规则。</li>
<li>复杂逻辑、边界情况、HACK操作以及“装逼操作”要写注释说明。</li>
<li>需求变更、业务逻辑修改等情况务必在相关代码中写注释说明，而且要标出在什么时间、因什么原因而修改，以便事后追溯。
<ul>
<li>接上条，如果预计以后还会发生变动，建议各关联代码都用唯一且相同的代码进行标记（例如CHANGE20190101），这样以后再改代码的时候容易搜索。</li>
</ul></li>
<li>TODO的事情写上TODO四个字母并进行跟踪，已经完成以及不是TODO的事情不要写TODO。</li>
</ul>
<h2 id="其他">其他</h2>
<ul>
<li>关于报错：给用户展示正常人类能看懂的文字，而且让用户和开发者都能知道大概是哪方面错误以及如何处理。</li>
<li>及时清理无效引用与变更。</li>
<li>及时维护文档。如果不能及时维护，建议强迫自己改完文档再编码。</li>
</ul>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li>
<li><a href="/2019/01/03/java-code-review-2">应用安全问题</a></li>
<li><strong>关于编程习惯的要求</strong></li>
<li><a
href="/2019/02/06/java-code-review-4">使用Phabricator进行人工代码审查</a></li>
<li>使用FindBugs和SonarQube等工具进行扫描</li>
<li>……</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>通过数据库“阅读器”在上班时间看小说</title>
    <url>/2019/01/11/oracle-novel/</url>
    <content><![CDATA[<p>上班时间看小说有很多种方式，例如直接拿手机看，在浏览器上面看，用小说阅读器看，拷到Word里面看，甚至拷到Eclipse里面看……然而，这几种方式看起来都比较显眼，就算放在Eclipse上面看起来也不太自然（方块字又多又密，而且没有语法高亮，一看就不像程序代码）。在此，本文针对软件开发和运维人员介绍一种可以大大方方在上班时间看小说而且不会引起怀疑的方法——在数据库客户端里面看小说。</p>
<span id="more"></span>
<h1 id="建库">建库</h1>
<p>如果开发团队管得不严，那么使用团队正在使用的数据库就行，反正领导和人力部门又不可能专门登数据库去看你搞了什么东西。为了避免与其他同事产生误会，建议创建小说专用账号，例如OGGFORWARD（用这个名词也要小心，别让DBA误会）：</p>
<p>Oracle范例： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 建立OGG传输专用账号</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> OGGFORWARD IDENTIFIED <span class="token keyword">BY</span> eromanga<span class="token punctuation">;</span>
<span class="token comment">-- 允许登录OGG账号</span>
<span class="token keyword">GRANT</span> <span class="token keyword">CONNECT</span><span class="token punctuation">,</span> RESOURCE<span class="token punctuation">,</span> DBA <span class="token keyword">TO</span> OGGFORWARD<span class="token punctuation">;</span>
<span class="token comment">-- 允许OGG账户访问当前账户所用表</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">FOR</span> TAB <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> USER_TABLES<span class="token punctuation">)</span> <span class="token keyword">LOOP</span>
        <span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token string">'GRANT SELECT, INSERT, UPDATE, DELETE ON '</span><span class="token operator">||</span>TAB<span class="token punctuation">.</span>TABLE_NAME<span class="token operator">||</span><span class="token string">' TO OGGFORWARD'</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>MySQL范例： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 建立数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> oggforward <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">;</span>
<span class="token comment">-- 建立OGG传输专用账号</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> oggforward<span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'eromanga'</span><span class="token punctuation">;</span>
<span class="token comment">-- 赋权</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> oggforward<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> oggforward<span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>以上只是些普通的DBA操作，看起来没什么值得怀疑的。若你连DBA权限都没有，那么就需要自己搭数据库或者想办法骗DBA给你开个账号了。</p>
<p>接下来用OGGFORWARD登录，建立表结构：</p>
<p>Oracle范例： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 《情色漫畫老師》（中国大陆译作《埃罗芒阿老师》）</span>
<span class="token keyword">CREATE</span> SEQUENCE OGGFORWARD<span class="token punctuation">.</span>SEQ_TBL_EROMANGA <span class="token keyword">START</span> <span class="token keyword">WITH</span> <span class="token number">1</span> INCREMENT <span class="token keyword">BY</span> <span class="token number">1</span> NOMAXVALUE<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> OGGFORWARD<span class="token punctuation">.</span>TBL_EROMANGA <span class="token punctuation">(</span>
    ID NUMBER <span class="token operator">NOT</span> <span class="token boolean">NULL</span>        <span class="token comment">-- 主键</span>
        <span class="token keyword">CONSTRAINT</span> PK_TBL_EROMANGA <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    BOOK VARCHAR2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token comment">-- 第几作</span>
    CHAPTER VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 章节</span>
    <span class="token keyword">TEXT</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment">-- 小说内容，为便于阅读，每行只留200字</span>
    IS_READ <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span><span class="token punctuation">,</span>    <span class="token comment">-- 是否已经阅读</span>
    ACCESS_TIME <span class="token keyword">DATE</span>                <span class="token comment">-- 阅读时间</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>MySQL范例： <!-- tab MySQL --> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 《情色漫畫老師》（中国大陆译作《埃罗芒阿老师》）</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> oggforward<span class="token punctuation">.</span>tbl_eromanga <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>     <span class="token comment">-- 主键</span>
    book <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>         <span class="token comment">-- 第几作</span>
    chapter <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">-- 章节</span>
    <span class="token keyword">text</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token comment">-- 小说内容，为便于阅读，每行只留200字</span>
    is_read <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token comment">-- 是否已经阅读</span>
    access_time <span class="token keyword">DATE</span><span class="token punctuation">,</span>                   <span class="token comment">-- 阅读时间</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>毕竟是你自己看的，怎么建都无所谓，但是应该要有ID（便于定位和排序），要区分出是哪本小说，另外也可以加一些伪装用的字段，显得像是在操作自己项目中的表一样。</p>
<h1 id="导入小说">导入小说</h1>
<p>这一点比较关键，你需要先将小说下载下来，弄成TXT格式，然后编写一个导入程序，将其导入到数据库中。导入的时候需要注意字段长度和断行。建议在程序里面适当断行，不要一段话一口气写到底，这样查询的时候看起来方便。</p>
<p>注意文件字符编码！下面程序默认文件采用GB2312/GBK编码。如果为UTF-8，需在命令行中手动传入编码。</p>
<h2 id="java程序">Java程序</h2>
<p>ImportUtils.java：</p>
<p>Oracle版本： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 文本导入工具
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_CONNSTR</span> <span class="token operator">=</span> <span class="token string">"jdbc:oracle:thin:@数据库IP地址:1521:数据库实例名"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_USERNAME</span> <span class="token operator">=</span> <span class="token string">"OGGFORWARD"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_PASSWORD</span> <span class="token operator">=</span> <span class="token string">"eromanga"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INSERT_SQL</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO TBL_EROMANGA (ID, BOOK, CHAPTER, TEXT) VALUES (SEQ_TBL_EROMANGA.NEXTVAL, ?, ?, ?)"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUERY_SQL</span> <span class="token operator">=</span> <span class="token string">"SELECT COUNT(1) FROM TBL_EROMANGA WHERE BOOK=? AND CHAPTER=?"</span><span class="token punctuation">;</span>

    <span class="token comment">// 是否移除两段文字之间多出来的一个空行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">REMOVE_EXTRA_BLANK_LINE</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 每条记录最大字数</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">LINE_WIDTH</span> <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 加载Oracle驱动</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误：未找到ojdbc.jar！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 获取参数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java ImportUtils &lt;BOOK> &lt;CHAPTER> &lt;FILENAME> [UTF-8]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">String</span> book <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> chapter <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token string">"GBK"</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            encoding <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">DB_CONNSTR</span><span class="token punctuation">,</span> <span class="token constant">DB_USERNAME</span><span class="token punctuation">,</span> <span class="token constant">DB_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 可选 - 检查是否重复导入</span>
            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">QUERY_SQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
                stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> chapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">int</span> len <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您似乎已经导入过了，是否继续（Y/N）？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">Scanner</span> cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">String</span> read <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"Y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>read<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">return</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">INSERT_SQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">boolean</span> isLastEmptyLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">REMOVE_EXTRA_BLANK_LINE</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLastEmptyLine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        isLastEmptyLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    isLastEmptyLine <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 按长度分割并插入数据库</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">LINE_WIDTH</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">String</span> part <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token constant">LINE_WIDTH</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> chapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> part<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                stmt<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"导入完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"导入时发生错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>MySQL版本： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 文本导入工具
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_CONNSTR</span> <span class="token operator">=</span> <span class="token string">"jdbc:mysql://数据库IP地址:3306/oggforward"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_USERNAME</span> <span class="token operator">=</span> <span class="token string">"oggforward"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_PASSWORD</span> <span class="token operator">=</span> <span class="token string">"eromanga"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INSERT_SQL</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO tbl_eromanga (book, chapter, text) VALUES (?, ?, ?)"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUERY_SQL</span> <span class="token operator">=</span> <span class="token string">"SELECT count(1) FROM tbl_eromanga WHERE book=? AND chapter=?"</span><span class="token punctuation">;</span>

    <span class="token comment">// 是否移除两段文字之间多出来的一个空行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">REMOVE_EXTRA_BLANK_LINE</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 每条记录最大字数</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">LINE_WIDTH</span> <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 加载Oracle驱动</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误：未找到mysql-connector-java.jar！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 获取参数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java ImportUtils &lt;BOOK> &lt;CHAPTER> &lt;FILENAME> [UTF-8]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">String</span> book <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> chapter <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token string">"GBK"</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            encoding <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">DB_CONNSTR</span><span class="token punctuation">,</span> <span class="token constant">DB_USERNAME</span><span class="token punctuation">,</span> <span class="token constant">DB_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 可选 - 检查是否重复导入</span>
            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">QUERY_SQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
                stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> chapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">int</span> len <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您似乎已经导入过了，是否继续（Y/N）？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">Scanner</span> cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">String</span> read <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"Y"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>read<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">return</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">INSERT_SQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">boolean</span> isLastEmptyLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">REMOVE_EXTRA_BLANK_LINE</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLastEmptyLine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        isLastEmptyLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    isLastEmptyLine <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 按长度分割并插入数据库</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">LINE_WIDTH</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">String</span> part <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token constant">LINE_WIDTH</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> chapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> part<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        stmt<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                stmt<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"导入完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"导入时发生错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>运行之前需要下载JDBC驱动（<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9kYXRhYmFzZS9hcHBsaWNhdGlvbi1kZXZlbG9wbWVudC9qZGJjL2Rvd25sb2Fkcy9pbmRleC5odG1s">Oracle<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9jb25uZWN0b3Ivai84LjAuaHRtbA==">MySQL<i class="fa fa-external-link-alt"></i></span>）。如果不使用Eclipse或IDEA等IDE，可以用以下命令编译：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac ImportUtils.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>为了方便阅读，我对小说按照章节进行了分割，文件名格式类似5_1.txt。预处理完成后运行（备注：这里是Linux/macOS）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Oracle</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:ojdbc6.jar
<span class="token comment"># MySQL</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:mysql-connector-java-8.0.13.jar

<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">5</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token function">java</span> ImportUtils <span class="token number">5</span> <span class="token number">1</span> 5_<span class="token variable">$i</span>.txt

    <span class="token comment"># UTF-8编码则需要</span>
    <span class="token comment"># java ImportUtils 5 1 5_$i.txt UTF-8</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="awk脚本linux服务器">awk脚本（Linux服务器）</h2>
<p>DBA们可能并没有在电脑上安装Java，不过没关系，我们也可以将小说上传到服务器上，通过下面的awk脚本生成SQL，然后通过sqlplus执行SQL，把将小说内容导入到数据库中：</p>
<p>gen_sql.awk：</p>
<p>Oracle版本： <pre class="line-numbers language-awk" data-language="awk"><code class="language-awk"><span class="token keyword">BEGIN</span> <span class="token punctuation">&#123;</span>
    INSERT_SQL <span class="token operator">=</span> <span class="token string">"INSERT INTO OGGFORWARD.TBL_EROMANGA (ID, BOOK, CHAPTER, TEXT) VALUES (SEQ_TBL_EROMANGA.NEXTVAL, '@1', '@2', '@3');"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LINE_WIDTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        LINE_WIDTH <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BOOK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">print</span> <span class="token string">"SET AUTOCOMMIT OFF;"</span><span class="token punctuation">;</span>

    <span class="token comment"># 导入变量</span>
    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/@1/</span><span class="token punctuation">,</span> BOOK<span class="token punctuation">,</span> INSERT_SQL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/@2/</span><span class="token punctuation">,</span> CHAPTER<span class="token punctuation">,</span> INSERT_SQL<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment"># awk会直接忽略空行</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span>
    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/'/</span><span class="token punctuation">,</span> <span class="token string">"''"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">+=</span>LINE_WIDTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        part <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> LINE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        line <span class="token operator">=</span> INSERT_SQL<span class="token punctuation">;</span>
        <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/@3/</span><span class="token punctuation">,</span> part<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">print</span> line<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">END</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">print</span> <span class="token string">"COMMIT;"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>MySQL版本： <pre class="line-numbers language-awk" data-language="awk"><code class="language-awk"><span class="token keyword">BEGIN</span> <span class="token punctuation">&#123;</span>
    INSERT_SQL <span class="token operator">=</span> <span class="token string">"INSERT INTO oggforward.tbl_eromanga (book, chapter, text) VALUES ('@1', '@2', '@3');"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LINE_WIDTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        LINE_WIDTH <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BOOK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">print</span> <span class="token string">"SET NAMES utf8;"</span><span class="token punctuation">;</span>
    <span class="token keyword">print</span> <span class="token string">"BEGIN;"</span><span class="token punctuation">;</span>

    <span class="token comment"># 导入变量</span>
    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/@1/</span><span class="token punctuation">,</span> BOOK<span class="token punctuation">,</span> INSERT_SQL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/@2/</span><span class="token punctuation">,</span> CHAPTER<span class="token punctuation">,</span> INSERT_SQL<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment"># awk会直接忽略空行</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span>
    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/'/</span><span class="token punctuation">,</span> <span class="token string">"''"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">+=</span>LINE_WIDTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        part <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> LINE_WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        line <span class="token operator">=</span> INSERT_SQL<span class="token punctuation">;</span>
        <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/@3/</span><span class="token punctuation">,</span> part<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">print</span> line<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">END</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">print</span> <span class="token string">"COMMIT;"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>macOS系统需要注意，awk的length和substr无法正确识别中文；在Linux系统下面则需要正确设置LANG环境变量才能识别中文，例如在命令前面加<code>LANG=zh_CN.UTF-8</code>。</p>
<p>假如小说文件名是5_1.txt至5_5.txt，那么导入时可以：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">5</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># Oracle</span>
    <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">BOOK</span><span class="token operator">=</span><span class="token number">5</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">CHAPTER</span><span class="token operator">=</span><span class="token variable">$i</span> <span class="token parameter variable">-f</span> gen_sql.awk 5_<span class="token variable">$i</span>.txt <span class="token operator">|</span> sqlplus oggforward/eromanga@你的数据库

    <span class="token comment"># MySQL</span>
    <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">BOOK</span><span class="token operator">=</span><span class="token number">5</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">CHAPTER</span><span class="token operator">=</span><span class="token variable">$i</span> <span class="token parameter variable">-f</span> gen_sql.awk 5_<span class="token variable">$i</span>.txt <span class="token operator">|</span> mysql <span class="token parameter variable">-u</span> oggforward <span class="token parameter variable">-h</span> <span class="token number">0.0</span>.0.0 <span class="token parameter variable">-peromanga</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里需要再次注意文件字符编码，如果txt编码、LANG、NLS_LANG（Oracle）与数据库（Oracle）/表（MySQL）编码四者不一致也会乱码！</p>
<p>假如txt文件是UTF-8，数据库是GBK，可以先用<code>iconv -f utf8 -t gbk -c 1.txt &gt; 1_gbk.txt</code>对文件转码，然后<code>export LANG=zh_CN.GBK</code>设置awk编码。</p>
<p>另外也可以不改编码，管道到iconv：<code>awk ... | iconv -f utf8 -t gbk -c | sqlplus oggforward/eromanga</code></p>
<h2
id="如果连数据库也是windows服务器">如果连数据库也是Windows服务器</h2>
<p>Windows系统自带VBScript，一样能生成SQL然后执行。不会写VBScript也没关系，把小说扔到Excel里面然后用公式拼接出SQL语句也行。</p>
<h1 id="开始阅读">开始阅读</h1>
<p>用你平常用的数据库工具登录，然后</p>
<p>Oracle： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 阅读</span>
<span class="token keyword">SELECT</span>
    ID<span class="token punctuation">,</span> BOOK<span class="token punctuation">,</span> CHAPTER<span class="token punctuation">,</span> <span class="token keyword">TEXT</span><span class="token punctuation">,</span> IS_READ<span class="token punctuation">,</span> ACCESS_TIME 
<span class="token keyword">FROM</span>
    OGGFORWARD<span class="token punctuation">.</span>TBL_EROMANGA E
<span class="token keyword">WHERE</span> E<span class="token punctuation">.</span>BOOK <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">AND</span> E<span class="token punctuation">.</span>CHAPTER <span class="token operator">=</span> <span class="token string">'1'</span>    <span class="token comment">-- 例如：第1卷第一章</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> E<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>
<span class="token comment">-- 阅读未看过的，加个WHERE条件IS_READ='0'</span>
<span class="token comment">-- 标记已看过的部分</span>
<span class="token keyword">UPDATE</span> OGGFORWARD<span class="token punctuation">.</span>TBL_EROMANGA <span class="token keyword">SET</span> IS_READ<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> ACCESS_TIME<span class="token operator">=</span>SYSDATE <span class="token keyword">WHERE</span> ID<span class="token operator">&lt;</span>你所看到的ID <span class="token operator">AND</span> IS_READ<span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>MySQL： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 阅读</span>
<span class="token keyword">SELECT</span>
    id<span class="token punctuation">,</span> book<span class="token punctuation">,</span> chapter<span class="token punctuation">,</span> <span class="token keyword">text</span><span class="token punctuation">,</span> is_read<span class="token punctuation">,</span> access_time 
<span class="token keyword">FROM</span>
    oggforward<span class="token punctuation">.</span>tbl_eromanga e
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>book <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">AND</span> e<span class="token punctuation">.</span>chapter <span class="token operator">=</span> <span class="token string">'1'</span>    <span class="token comment">-- 例如：第1卷第一章</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> e<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
<span class="token comment">-- 阅读未看过的，加个WHERE条件IS_READ='0'</span>
<span class="token comment">-- 标记已看过的部分</span>
<span class="token keyword">UPDATE</span> oggforward<span class="token punctuation">.</span>tbl_eromanga <span class="token keyword">SET</span> is_read<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> access_time<span class="token operator">=</span>sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> id<span class="token operator">&lt;</span>你所看到的ID <span class="token operator">AND</span> is_read<span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>注意放一些有迷惑性的语句（相当于“老板键”），包装一下你的阅读器，例如：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Oracle</span>

<span class="token comment">-- 查看锁表情况并生成解锁语句</span>
<span class="token keyword">SELECT</span>
    b<span class="token punctuation">.</span>owner<span class="token punctuation">,</span>b<span class="token punctuation">.</span>object_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>sid<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment">#,a.locked_mode,c.username,c.osuser,c.machine,c.module,c.logon_time,</span>
    <span class="token string">'ALTER SYSTEM KILL SESSION '''</span><span class="token operator">||</span>c<span class="token punctuation">.</span>sid<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>c<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment">#||''';' cmd,</span>
    s<span class="token punctuation">.</span>sql_text
<span class="token keyword">FROM</span>
    v$locked_object a<span class="token punctuation">,</span>dba_objects b<span class="token punctuation">,</span> v$<span class="token keyword">session</span> c<span class="token punctuation">,</span> v$<span class="token keyword">sql</span> s
<span class="token keyword">WHERE</span>
    b<span class="token punctuation">.</span>object_id <span class="token operator">=</span> a<span class="token punctuation">.</span>object_id <span class="token operator">AND</span> a<span class="token punctuation">.</span>session_id <span class="token operator">=</span> c<span class="token punctuation">.</span>sid <span class="token operator">AND</span> s<span class="token punctuation">.</span>address <span class="token operator">=</span> c<span class="token punctuation">.</span>PREV_SQL_ADDR <span class="token operator">AND</span> s<span class="token punctuation">.</span>hash_value <span class="token operator">=</span> c<span class="token punctuation">.</span>PREV_HASH_VALUE
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>logon_time<span class="token punctuation">;</span>

<span class="token comment">-- 查看连接数</span>
<span class="token keyword">SELECT</span> machine<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> v$<span class="token keyword">session</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> machine<span class="token punctuation">,</span> <span class="token keyword">status</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看表空间使用情况</span>
<span class="token keyword">SELECT</span>
    a<span class="token punctuation">.</span>tablespace_name<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span>total_bytes <span class="token operator">/</span> <span class="token number">1048576</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> total_mb<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total_bytes <span class="token operator">-</span> free_bytes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1048576</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> used_mb<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span>free_bytes <span class="token operator">/</span> <span class="token number">1048576</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> free_mb<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> free_bytes <span class="token operator">/</span> total_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> used_ratio
<span class="token keyword">FROM</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> tablespace_name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> free_bytes <span class="token keyword">FROM</span> dba_free_space <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> tablespace_name<span class="token punctuation">)</span> a<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> tablespace_name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> total_bytes <span class="token keyword">FROM</span> dba_data_files <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> tablespace_name<span class="token punctuation">)</span> b
<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>tablespace_name <span class="token operator">=</span> b<span class="token punctuation">.</span>tablespace_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>tablespace_name<span class="token punctuation">;</span>

<span class="token comment">-- 查看占资源的SQL</span>
<span class="token comment">-- 最耗时的SQL</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$sqlstats <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> elapsed_time <span class="token keyword">DESC</span><span class="token punctuation">;</span>
<span class="token comment">-- 执行次数最多的SQL</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$sqlstats <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> executions <span class="token keyword">DESC</span><span class="token punctuation">;</span>
<span class="token comment">-- 读磁盘最多的SQL</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$sqlstats <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> disk_reads <span class="token keyword">DESC</span><span class="token punctuation">;</span>
<span class="token comment">-- 耗CPU最多的SQL</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$sqlstats <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> buffer_gets <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果在IDEA等环境操作数据库，可以再打开一些平日工作用的程序代码。</p>
<figure>
<img src="/img/2019-01-11-oracle-novel/preview.png"
alt="看不出什么问题" />
<figcaption aria-hidden="true">看不出什么问题</figcaption>
</figure>
<p>嗯，看不出什么问题（如果不看<a
href="/img/2019-01-11-oracle-novel/eromanga.jpg">插画</a>的话），而且领导来了也不怕，大大方方地继续执行附近SQL就行了——没准领导还会以为你热爱钻研数据库技术呢。</p>
<h1 id="拓展">拓展</h1>
<p>如果公司网络管的不严，而且自己电脑或数据库服务器能访问互联网，那么也可以继续拓展，通过Oracle或MySQL刷新闻、贴吧或微博之类的东西。</p>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>MySQL</tag>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>作为非计算机专业的学生，如果只想考试及格以及过二级，如何学习C语言</title>
    <url>/2019/01/13/how-to-learn-c/</url>
    <content><![CDATA[<p>在学校上学的时候，曾经就这个问题专门给学弟们做过讲座，并且总结成了一篇文章。为了造福后辈，帮助后辈争取早日脱单，这里把以前写的内容修改一下发表出来，毕竟C语言课通常大一开，而且大一是提升妹子好感度，<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL2Jhbmd1bWkvbWVkaWEvbWQ0MTg4Lw==">与其约会，使其娇羞<i class="fa fa-external-link-alt"></i></span>的关键时期。</p>
<span id="more"></span>
<p>说实话，现代人都比较功利——既然是非计算机专业的学生，那么C语言基本上是个用不着的东西。可是，它还是门必修课，那最起码不能挂科，对吧？</p>
<p>内容很长，最好找个时间慢慢读。</p>
<h1 id="first">FIRST</h1>
<p>稍微了解一下C语言的历史，你就应该知道那个东西绝不是给孩子们入门用的——一开始它的应用是Unix操作系统，尽管创造Unix操作系统最初的目的是为了玩个<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv5pif6ZmF5peF6KGMXygxOTY55bm05ri45oiPKQ==">游戏<i class="fa fa-external-link-alt"></i></span>。</p>
<p>从这个角度讲，对于非计算机专业的学生来说，Pascal甚至Basic都比C语言靠谱。因为C语言对于他们而言过于灵活，暴露了很多让初学者迷惑的东西。而Pascal和Basic都很简单，而且Visual
Basic还很好玩。</p>
<p>当然，虽然VB又简单又好玩，但是我们的老师成功地把VB讲成了一个比C语言还困难的语言，而且不是因为内容深，而是讲得不好。由此可见，<strong>编程语言学不好可能是门没入对</strong>。</p>
<p>很多人喜欢看清华大学出版社的谭浩强的书。但是请注意，虽然出版社名字带着“清华大学”四个字，但是这家出版社的书都是垃圾。清华大学出版社的书不仅无法把东西讲明白，而且还误导人（谭浩强书中甚至有根本跑不通的示例程序），拉低了清华大学学术水平的下限。因此大家不要买清华出版社的书，已经买的建议考虑扔掉或者送给关系不好的人。</p>
<p>如果有闲功夫的话，可以拜读一下C语言之父Dennis
Ritchie（dmr）的《C程序设计语言》。这本入门书比大多数国产C语言书薄，但是是一部经典。毕竟是C语言亲爹写的。</p>
<h1 id="如何学习">如何学习</h1>
<p>回答“只要多努力……”、“只要多练习……”当然没有意义，所以下面写一些个人经验。</p>
<p>注意，本文有一个前提——“非计算机专业”。因此我假设学完C语言基本上是为了通过考试和二级。</p>
<h2 id="新思维">新思维</h2>
<p>大学每一科目都有自己的思维方式，C语言也一样。</p>
<p>C语言作为一门“语言”，当然有自己的语法，只不过是人类和机器约定好的、互相都能看得懂的语法。人类可以一目十行，但是对于机器而言，它只能一行一行地读、一句一句地读。</p>
<p>如果把每一条语句当作一件事儿，那么计算机当然是有条不紊地做事儿。写代码的时候，你当然也要一件事儿一件事儿地做。</p>
<p>因为我们学的是简单的单文件的C语言，所以实际上代码结构基本都是这样的：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 输入</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// 处理</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// 输出</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意上面有“输入”、“处理”和“输出”三个阶段。做题的时候（编写练习程序和做题类似），我们需要按照题目要求逐步完善这三个阶段的内容，或者说按照题目要求填坑。至于能不能填上，就看你积累了多少“段子”——这和多做数学题积攒解题思路是差不多的。</p>
<p>填坑的时候有一个技巧：如果遇到困难，尽量先把题目的语言翻译成“像C语言的东西”。例如，“判断n是否为XX数，如果是则输出YES和全部的xxx，否则输出‘NO’”。那么首先应该能够想到，“判断”是if，因此：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>n是XX数<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输出全部的xxx</span>
    <span class="token function">printf</span><span class="token punctuation">(</span>全部xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那什么是“XX数”呢？看题目其他条件，例如“一个数恰好等于因子之和”，那么if语句应该是</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> n的因子之和<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>“因子”之和怎么求呢？按照以往的练习，因子是用for语句找的，所以在if之前最起码得有个for语句：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i是因子<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token punctuation">;</span>    <span class="token comment">// 不要忘记前面 sum=0</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>“是因子”实际上就是整除，即“n%i==0”。</p>
<p>假如题目还需要输出所有因子，那么我们不妨在找因子的时候把类似代码再敲一遍。因为我们是应付考试，不是参加ACM比赛，倒不需要太追求性能。</p>
<p>最后检查一下输入输出格式，把细节完善（见后面的“一一对应”），然后测试、调试，一切OK就可以提交了。如果考试是笔试，实在遇到困难，也可以用类似方法骗分。</p>
<h2 id="先问搜索引擎">先问搜索引擎</h2>
<p>问问题是一门艺术。在错误的时间、错误的地点找错误的人问了错误的问题，那是要失败的。</p>
<p>学习编程会遇到很多问题，例如不会搭建开发环境、忘记某个函数的名字或参数、遇到错误，这时候不建议马上去问别人。不妨先自己尝试解决，如果解决不了，再到搜索引擎上搜索。</p>
<p>如果不会使用搜索引擎，可以看下图的操作说明（图片来自网络）：</p>
<figure>
<img src="/img/2019-01-13-how-to-learn-c/baidu.jpg"
alt="百度使用说明" />
<figcaption aria-hidden="true">百度使用说明</figcaption>
</figure>
<p>因为大多数语言和框架（在开发项目时，从零开始是不理智的）是老外写的，对于某些问题，如果你用英文搜索，可能会更快得到结果。这时候你可能就要想办法找谷歌了（备注：必应也行，至少免翻墙）。</p>
<p>在技术方面的中文搜索中，百度和谷歌区别不太大。百度经常有误导人的推广，但是在技术话题上这个问题并不明显。</p>
<p>在英文搜素方面，百度几乎不可用。谷歌最好（直接与StackOverflow整合），如果在网络方面遇到困难，也可以考虑必应。当然，因为很多外国网站使用谷歌服务器来加速（CDN），所以点进链接后可能会卡半天不出内容。遭遇这种情况的话，你还是需要先把网络问题解决一下。</p>
<p>因为全世界就连那个没网（全国网站地址是10开头的IP）的北朝鲜都在使用C语言，因此搜C语言本身的东西不会遇到太大困难。</p>
<h2 id="照猫画虎">照猫画虎</h2>
<p>不要问别人“xxx怎么写”——照着书上的代码改，或者到搜索引擎上找代码，照着他们的代码改。</p>
<p>学习一门编程语言，很多时候找个老师不如<strong>找一段示例代码，照着敲一遍，编译运行，观察现象，然后对代码稍作修改，编译运行，观察产生了什么变化……</strong></p>
<p>需要注意的是，有些东西涉及算法（应该都是简单算法，不涉及数据结构），例如简单素数判断<span
class="blackout">（素数测试有很多种）</span>。那么你需要找到一些现成的代码，搞清楚处理过程中哪些变量是输入、哪些是结果，了解大致的思路，然后自己写一遍。这种东西务必亲自上机写一遍，哪怕没有完全理解——光靠背是不现实的。</p>
<p>很多算法的套路是固定的，因此建议学过函数之后，自己编程的时候把它们都扔到函数里，例如：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在做作业的时候直接<code>is_prime(a)</code>判断（别忘了把函数实现拷到作业里头），既方便又避免出错。</p>
<h2 id="一一对应">一一对应</h2>
<p>编程是个比较严谨的东西。初学者在写代码的时候，为了避免出错，要注意“一一对应”：</p>
<ul>
<li>解答题目的时候，你的代码是否和题目条件、输入输出格式要求对应？</li>
<li>该写分号的地方是否写分号了？</li>
<li>不该写分号的地方是不是没写？（例如for
(...;...;...)的后面不应该写，如果故意要写，最好用个注释说明一下）</li>
<li>printf、scanf中的“%d”（或别的什么）是否和后面的变量一一对应？数量、类型都对应了吗？
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">float</span> b<span class="token punctuation">;</span>
             第二个<span class="token operator">%</span>d对应后面的b
            <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span>
            v      v
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %f"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">^</span>       <span class="token operator">^</span>
        <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span>
         第一个<span class="token operator">%</span>d对应后面的a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>假如后面不是int类型，你前面是否还在用“%d”？</li>
</ul></li>
<li>scanf后面有没有“&amp;”？</li>
<li>int
main()、if、while、for等的圆括号是否匹配？后面是否跟了“{”和“}”并且数量匹配？
<ul>
<li>虽然if、while、for后面代码只有一句时可以省略花括号，但是强烈建议你不要偷这个懒。</li>
</ul></li>
<li>在使用变量的时候，前面是否已经定义了？（例如要scanf
n了，前面是否有int n？按照题目要求是不是应该为int？）</li>
<li>在使用“++”、“--”、“+=”等符号的时候，前面是否已经初始化了（说白了就是有没有让它先等于0）？
<ul>
<li>初始化的值和初始化的位置是否正确？比方说有的应该放到for前头，有的应该放到for后头……</li>
</ul></li>
<li>数组大小是否不比题目要求的小？
<ul>
<li>为了安全，建议开大点。例如题目说最大100，你就开110甚至是11000。反正贪污和浪费内存不是极大的犯罪（by
毛泽西）。</li>
</ul></li>
<li>头文件都写全了吗？
<ul>
<li>为了安全，可以把你听说过的标准库的头文件都写上。实际上ACM比赛经常有人把能想到的头文件全都写上，结果#include写得比后面的具体实现还长。</li>
</ul></li>
</ul>
<h2 id="多试验">多试验</h2>
<p>别怕试验。多写一些小片段，看看那些代码是怎样运行的。</p>
<p>举个例子——for循环到底执行了多少次：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>scanf和gets的冲突：scanf和get紧挨着可能在输入数据时遇到问题，这时候需要一个小技巧……</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 其实就是 gets(str) 的推荐写法</span>
<span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果那个scanf里没有“\n”，gets的时候……</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再举个例子（指针与一维数组）：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为只是为了看个结果，所以，只要自己能把结果弄明白，怎么舒服怎么来。</p>
<p>当然有个重要前提——你手头得有个电脑。如果没有电脑，或者“大一不让带”，可以买个几百或一两千的Win10平板，比手机便宜，而且便于隐藏和携带，既可防导员查寝，又可带教室去开小差。</p>
<h2 id="调试">调试</h2>
<p>经常有人问“为什么我的代码结果不对”，然后贴上一段代码。这是非常令人讨厌的行为。</p>
<p>为了不被人鄙视，大家应该学一些调试的技巧。</p>
<p>作为非专业人士，与其学习那些复杂又难用的调试工具，不如学习又简单又实用的
printf。</p>
<p>printf有两大作用：定位错误、查看中间值。</p>
<p>假如程序崩溃了，可以这样调试：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"准备读n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"准备读a\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"开始处理\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假如崩溃的时候屏幕上面只有“准备读n”而没有“准备读a”，说明中间夹着的scanf有问题；假如崩溃的时候有“准备读a”而没有“开始处理”，说明中间夹着的for有问题，这样你可以在for语句内部插入一些<code>printf("a\n")</code>，从而精确地找到错误的出处（例如，崩溃的时候看到10个a，说明数组开得不够大）。</p>
<p>如果计算结果不正确，可以这样调试（筛法求素数）：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span> num<span class="token punctuation">,</span> isprime<span class="token punctuation">;</span>
isprime <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> num<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DEBUG: %d不是素数(╯°Д°)╯︵ ┻━┻\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            isprime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DEBUG: %d 是素数吗？%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> isprime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isprime<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果只有2和3。通过观察调试输出，发现程序认为5不是素数。按理说，如果不是素数，屏幕会输出一个掀桌子的表情。然而程序认为5不是素数，但是还没有掀桌子表情，说明问题出在isprime变量上面——<code>isprime=1</code>的位置不对。</p>
<p>当然，交作业的时候别忘了把这种输出删掉。</p>
<h2 id="测试">测试</h2>
<p>不要把测试和调试搞混。用一句话概括它们的区别：测试是为了观察“程序结果是否正确”，而调试是为了“找到程序的错误”。</p>
<p>很多初学者经常不做测试，或者不做充分的测试就提交，然后遇到问题就反复改，反复提交。这样也是不好的。</p>
<p>Online
Judge网站就是测试的一种：系统预置了一系列数据和答案，按照题目要求解题、提交，系统会自动编译和运行代码，检查程序是否能在规定时间内处理预定输入并得到正确结果。在比赛中，错误提交是要影响成绩的，因此选手必须要学会自己测试，争取一次提交就通过。</p>
<p>程序编译通过之后，当然要用数据检验一下结果。如果把样例输入敲进去结果都不对，那程序肯定不行。</p>
<p>光通过样例也是不行的。为了保证通过，你应该自行构造多个输入，观察输出是否正确。应从以下几个角度构造数据：</p>
<ol type="1">
<li>守规矩的计算</li>
<li>不守规矩的计算：如果题目没做保证，那么应假设有非法数据。假如题目没说a一定大于0，那你有没有想到a可以等于0或-1？</li>
<li>多种情况：假如程序有多种结果（Yes/No），你是否都测试到了？</li>
<li>边界条件：假如最多100个人，那么你的程序在恰好输入100个人的情况下能否正常工作？
<ul>
<li>没有人或只有1个人呢？</li>
<li>稍微提一下，假如数组有100个元素（int
a[100]），访问a[100]是非法的，但是在你自己电脑上不一定报错。这是一个隐藏的错误。为了避免这种错误，可以把数组开大一些，例如200甚至10000。</li>
</ul></li>
</ol>
<p>除此之外，初学者常常忽略的问题有空格（一个空格、两个空格、多个空格、行末空格）、回车（例如最后一行的回车）、字母大小写和符号全半角，还有不明显的格式差别（例如题目要求用逗号分隔你却用了空格）。因为测试是全文逐字比较的，所以不要犯这种低级错误。</p>
<h2 id="养成好习惯">养成好习惯</h2>
<p>建议大家照做，因为这样可以避免很多不必要的错误：</p>
<ul>
<li>如果你不知道全角符号<code>，。、（）</code>和半角符号<code>,.\()</code>有什么区别，那么建议你写代码的时候把输入法关掉，免得出现莫名其妙的错误。</li>
<li>不同功能（定义变量、输入、数据处理、输出）之间留点空行，也就是按功能分块，就像前面提到的那样。</li>
<li>接上条，如果代码太长，那么最好多用一些函数，把各功能分离出来。写代码的时候一个功能一个功能地写。没有人喜欢又长又臭的代码。</li>
<li>缩进，一定要保持代码的缩进。没有缩进的代码难以理解，而且很有可能丢花括号，从而造成不必要的麻烦。</li>
<li>使用“黑科技”（不解释就难以理解）的时候要加注释。</li>
<li>if、for等语句后面可以不加花括号对吧？别懒，把花括号加上，免得犯这样的错误：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
    c<span class="token operator">=</span>a<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    c<span class="token operator">=</span>b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="如何通过二级">如何通过二级</h1>
<p>这是也很多人关心的问题。虽然事实上计算机二级比英语六级容易通过（对于985、211的学生来说，只要英语三级也就是高考成绩不太烂，英语四级裸奔也能过……），但是很多人还是没通过。这不是他们不刻苦或者学得不好，而是因为他们不知道如何对付一个考证级别的考试。对，和英语四六级有着本质的区别。</p>
<p>首先用一句话概括通过计算机三级和四级的武林秘籍：去购买高等教育出版社的、封面上带个大大的黄色字母K的官方题库（不是教材），从头到尾把题刷一遍，该背的试题背下来，如果还没通过那你肯定是没好好背。</p>
<h2 id="基本内容">基本内容</h2>
<p>虽然二级过了三四级成绩才能算数，但是，之所以先介绍三四级，是因为三四级比二级好过——三四级基本上可以纯背，但二级还是要会点东西的。下面就介绍介绍二级C语言：</p>
<ul>
<li>选择题40分，大题（改错、填空、编程）60分。</li>
<li>上机考试，先做选择题，选择题全部做完才能做大题。做选择的时候电脑屏幕是锁死的，做大题的时候才能使用编程软件。</li>
<li>题目是从题库里随机抽的，所以不要尝试照旁边的人抄。当然，运气好的话，你会碰到和官方教材中差不多的题。撞大题的概率更高。</li>
<li>选择题中至少有20~30分来自“二级公共语言基础”，这个“公共语言基础”大致分成两类，一类是“算法与数据结构”，需要你去理解一些东西；另一类不管它是啥，反正是纯粹要背的东西。剩下的选择题和C语言本身有关。</li>
<li>C语言课的东西够用了，关键是你对考试出题的基本法的了解程度。</li>
<li>编程软件是钦点的Visual C++
6.0，虽然它是盗版的，虽然它很可能无法在你自己的电脑上正常运行。</li>
<li>二级考完只有三种状态：没通过（&lt;60分）、合格（60<sub>89分）、优秀（90</sub>100分）。因此，如果你不打算拿优秀证，考60和考89没有任何区别。（在这一点上，英语四六级就不一样——证书上面把成绩写出来了）</li>
<li>因为计算机二三四级证书都很水，因此，求职时如果应聘条件没有明确要求，不要指望拿这些证书给自己贴金。虽然二级可能是很多岗位的基本条件之一。</li>
<li>最后，如果你想考三四级，一定要看清楚对应科目对二级的要求——是要求通过编程语言类的二级还是数据库语言类的二级。如果你二级报的是Office那还是别考三四级了。</li>
</ul>
<h2 id="选择题">选择题</h2>
<p>如果你觉得大题把握很大，而且没有拿优秀证的打算，那么“二级公共语言基础”的东西就可以少背一点了。反之要多背一些。</p>
<p>“算法和数据结构”是一个不太容易懂的东西——如果学得很好，没准就可以去打ACM比赛了。既然是个只需要拿60分的考证，那么不妨把官方教材拿出来，看看他们喜欢怎样出题，把相关考点记住即可。</p>
<p>有关C语言本身的选择题，实在不懂也不必太较真，因为它可能没有意义：例如经典的<code>a+=a-=a*a;</code>和<code>a=a++;</code>都是未定义行为——连C语言标准对这些语句的结果都没做任何保证，所以肯定没有正确答案。</p>
<h2 id="大题">大题</h2>
<p>大题是一定要会的。如果你没有精心准备，选择题分数可能会惨不忍睹，因此大题要尽量把分数都弄到手。</p>
<p>为了把分数搞到手，我们要从两方面准备，一方面是正确解答题目，另一方面是正确地解答题目。</p>
<h3 id="正确解答题目">正确解答题目</h3>
<p>大题分为改错、填空、编程。</p>
<p>改错就很简单了。因为改错的模式都比较固定，只要多看看官方的题目就应该清楚他们会怎样考了。</p>
<p>填空也一样。一般是让你填一些“单词”，或者是些简单的表达式。填空时候要多留意已经定义和未使用的变量。</p>
<p>其实吧，改错和填空题很多时候就是<strong>推理</strong>题——不用太清楚程序干嘛，只要保证所有变量都被用过了，该对应的地方都对应了，OK。</p>
<p>编程题要注意：数组、指针和字符串对于初学者来说比较难理解，对吧？不幸的是，出题人也爱考这些东西。因此，还是要看官方教材，看看他们喜欢怎样出题，并且建议你在做这些题的时候亲自上机练习一下。</p>
<h3 id="正确地解答题目">正确地解答题目</h3>
<p>两个要点：一是不犯低级错误，二是要会用Visual C++ 6.0编辑代码。</p>
<p>不犯低级错误，举个例子，题目提示<code>只修改/******* FOUND *******/下一行的代码</code>，那么你不要改其他地方的代码，也不要把这个注释本身修改或删除。此外尽量不要碰原有代码的其他部分，例如空格和缩进。</p>
<p>Visual C++
6.0是一个古老的软件了（1998年发布），在现代操作系统（Windows
8/8.1/10）中会出现兼容性问题，甚至无法启动。因此，平时在自己电脑上练习的时候可以使用其他编程软件，然后考前去一趟机房（学校机房应该安装了Visual
C++
6.0），学会如何打开和保存代码（考试软件会帮你打开代码）、如何找到<code>int main()</code>、如何编译运行。知道这些就足够了。</p>
<figure>
<img src="/img/2019-01-13-how-to-learn-c/vc.png"
alt="会点上面三个按钮就够了" />
<figcaption aria-hidden="true">会点上面三个按钮就够了</figcaption>
</figure>
<p>会点上面三个按钮就够了。</p>
<h1 id="拓展学习">拓展学习</h1>
<p>对于非计算机专业的学生来说，尽管C语言很难学，尽管C语言<span
class="blackout">看起来</span>“不实用”，但是很多编程语言的套路都是类似的，因此学完C语言有助于其他“实用”语言的学习。有些“实用”语言甚至直接向C语言致敬，例如PHP。</p>
<p>以下是一些当下很流行的、学起来可以“实用”的编程语言，如果有兴趣的话可以学一学。</p>
<ul>
<li>HTML+CSS+JavaScript：做网页的一套语言，虽然是三个，但是实际上哪个都不需要学得太深——一方面需要什么东西可以自己去查，另一方面现成框架太多了，很多时候用不着从零开始。我个人建议不要用Dreamweaver，即使用也要用最新的Dreamweaver
CC，否则容易落伍。</li>
<li>PHP：想做个实用网站吗？学吧！就是它大量致敬了C语言的语法！
<ul>
<li>由于PHP学习门槛很低，因此很容易写出有大量安全漏洞的网站。做项目时要多加小心。</li>
</ul></li>
<li>Python：Python是个小巧而又强大的脚本语言。建议有兴趣的一定要学。
<ul>
<li>如果想写一个随写随用的程序，当然要找它；</li>
<li>如果想做一个实用的网站，同样可以找它——可以学习基于Python语言的Django框架；</li>
<li>如果想做一个带窗口对话框的程序，当然也可以找它——可以学习基于Python语言和Qt的PyQt框架。对于这种情况，建议同时学习PyQt和Qt
C++。</li>
<li>Python有两种版本，一个是2.7，一个是3.6。它们两个有些差别，但是实际上不影响学习。遇到困难时到搜索引擎上搜一下就行了。</li>
</ul></li>
<li>Visual
C#：C++和C#都带个“C”，那它们当然是从C语言衍生过来的……学C语言写不出一个带窗口对话框的程序对吧，没关系，我们可以用一个好学的Visual
C#，随手画个窗口出来！</li>
<li>Qt C++：同样是用来制作带窗口对话框程序的，只不过这个是C++语言。</li>
<li>Java：会写Java至少能混口饭吃，而且现在很多业务系统和Android应用都是拿Java写的。</li>
<li>Objective-C：iOS应用是拿这个语言写的（备注：现在已经换成Swift，所以不用学Objective-C了），只不过进App
Store的门槛有点高。</li>
<li>MATLAB：数值计算、数值模拟必备。一定先把高等数学和线性代数学好然后再学这个……</li>
</ul>
<p>我不推荐Pascal和Basic，前者用的人数不多，后者……VB6也是1998年的东西，在现在的系统中已经不能正常运行了，而且学新版VB不如学C#。</p>
<p>另外还有两个硬件（小心，玩硬件烧钱）：</p>
<ul>
<li>Arduino：Arduino是一个卡片大小的开发板（如果不知道开发板是啥——就是可以让你拿来写程序的电路板），编程的时候基本上就是C或C++。与电路相关的东西都是封装好的，可以直接调用函数，所以不会一开始就被一些细枝末节困扰。虽然玩51单片机（备注：51单片机通常是STC产的，其<span class="exturl" data-url="aHR0cDovL3d3dy5zdGNtY3UuY29t">官网<i class="fa fa-external-link-alt"></i></span>和牛皮癣小广告有一拼）的人更多，但是我觉得从Arduino入门会容易很多。深入之后也可以考虑玩STM32之类的单片机。</li>
<li>树莓派：树莓派是一个卡片大小的单板电脑。虽然设计者的定位是儿童电脑，不过实际上被极客当成高级玩具了。最新的树莓派3可以跑Linux和Windows
10（物联网版）系统，对物联网感兴趣的可以玩玩。</li>
</ul>
<p>我个人的学习建议：</p>
<ol type="1">
<li>尽量找外文书的中译本，原因很简单，翻译一本书需要付出大量时间精力，因此能够被拿来翻译的书基本上都是好书。<span>因为写书很容易，因此国内很容易出烂书。外国的月亮也不圆——外国也一样。</span></li>
<li>把书粗读一遍，大致了解一下基本语法。很多语言的基本结构都差不多，只不过单词不一样罢了。</li>
<li>细读，看看（特别是翻译本那种）作者的思想和思路。</li>
<li>照着教材做个小练习。</li>
<li>不用强求把所有东西都记住。现在网络那么发达，甚至手机流量都不需要省着用，有问题可以直接去网上查。</li>
</ol>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>从Eclipse切换到IDEA（二）：传统Web项目的Project Structure</title>
    <url>/2019/01/27/switch-to-idea-2/</url>
    <content><![CDATA[<p>本文主要介绍如何将传统Web项目（不使用Maven、Gradle等构建工具，jar包等全部手工配置）从Eclipse转换到IDEA。主要内容为传统项目的Project
Structure配置。 <span id="more"></span></p>
<h1
id="关于idea中的project-structure和run-configuration">关于IDEA中的Project
Structure和Run Configuration</h1>
<p>Project Structure即项目结构。配置Project
Structure大体上就是在告诉IDEA以下几件事：</p>
<ol type="1">
<li>项目用哪个JDK开发？</li>
<li>项目由哪些模块组成？这些模块之间有什么关系？</li>
<li>模块依赖哪些jar包？</li>
<li>模块有哪些特征？（例如是Web项目）</li>
<li>编译完成之后如何打包？</li>
</ol>
<p>Project Structure配置好之后就可以进行编译。</p>
<p>Run
Configuration则是启动配置。它在告诉IDEA编译完成之后如何运行那些代码，所以在编译时不是必需的，但运行时是必需的。</p>
<h1 id="简单工程的project-structure">简单工程的Project Structure</h1>
<p>以一个Helloworld级的SpringMVC项目为例。</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; HelloSpringMVC
    &gt; src                       ----&gt; Java源代码
    .   &gt; com
    .       &gt; example
    .           &gt; hello
    .               &gt; controller
    .                   HelloController.java
    .               ...
    &gt; config                    ----&gt; 公共配置文件
    .   SpringMVC-servlet.xml
    .   ...
    &gt; WebContent                ----&gt; Web文件目录
        &gt; components
        .   &gt; jquery
        .   ...
        &gt; WEB-INF
        .   &gt; lib
        .   .   commons-logging-1.2.jar
        .   .   ...
        .   &gt; page
        .   .   init.jsp
        .   .   ...
        .   web.xml
        ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>直接用IDEA打开项目所在目录（HelloSpringMVC），它会尝试将Eclipse项目转化为IDEA项目（两IDE的配置文件可以同时存在，不会相互冲突），但是自动识别的文件结构并不正确，所以我们仍然需要通过“File”下面的“Project
Structure”菜单重新配置项目。</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/project-structure-0.png"
alt="Project Structure对话框" />
<figcaption aria-hidden="true">Project Structure对话框</figcaption>
</figure>
<p>下面介绍每个页签的设置。注意，我们并不需要把每个参数都设置一遍，也不会严格按照页面选项的顺序进行操作。</p>
<h2 id="project">Project</h2>
<p>这一页内容比较简单，需要设置项目名称、JDK路径、支持的Java版本以及编译输出文件路径。其中Project
compiler
output放在哪里都行，只是不要不小心把编译出来的垃圾提交到代码库中。</p>
<h2 id="libraries">Libraries</h2>
<p>本页管理的是“应用使用了哪些jar包”。这里相当于把应用所需jar包“打了个捆”来管理，以便后面配置工程依赖项。</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-libraries.png"
alt="Libraries" />
<figcaption aria-hidden="true">Libraries</figcaption>
</figure>
<p>没有特殊需求的话，将装jar包的目录（WebContent/WEB-INF/lib）添加成lib即可。</p>
<h2 id="modules">Modules</h2>
<p>IDEA没有Workspace的概念。和Eclipse中Project差不多的东西叫“Module”。一堆Module组成了一个Project。因为两边都有Project这个词语，所以小心不要把自己绕进去。</p>
<p>本页的作用是指出“项目由哪些模块构成”，有点像Eclipse里头的Build
Path设置。另外Sources、Dependencies两个子页面也需要关注。</p>
<h3 id="sources">Sources</h3>
<p>Sources子页面的作用是指出“哪些是Java代码，哪些是资源文件，哪些是垃圾”。</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-modules-1.png"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/eclipse-modules-1.png"
alt="2" />
<figcaption aria-hidden="true">2</figcaption>
</figure>
<p>IDEA将目录分成五类（Mark
as后面五个）。其中Sources表示需要正常编译的Java代码，Resources表示打包时需要附到一起的文件，而Excluded表示将目录排除。</p>
<p>稍微提一下上图Eclipse里面的config，根据前面提到的文件结构，它并不是Java代码，在Eclipse里标记成Source
Folder纯粹是为了便于查找。</p>
<p>对于传统Web项目，Resources怎么标记都无所谓了，后面Artifacts配置正确就行。</p>
<h3 id="dependencies">Dependencies</h3>
<p>Dependencies子页面的作用是指出依赖关系（例如需要哪些jar包）。在依赖项管理上，IDEA和Eclipse也是既有相同之处也有不同之处。IDEA这边相当于把Eclipse的Projects、Libraries和Order
and Export三个页签合并到一起了。</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-modules-2.png"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/eclipse-modules-2.png"
alt="2" />
<figcaption aria-hidden="true">2</figcaption>
</figure>
<p>这里面应当至少包含JDK（IDEA自动添加）、源代码中专门放jar包的目录和依赖的其他工程。如果使用了Tomcat和某些类，例如javax.servlet.ServletContext，我们还需要加入Tomcat。</p>
<p>第一次设置时可能找不到所有依赖项，例如Library中没有Tomcat。我们可以先只配置一部分，等到后面设置Library甚至到编译运行出现编译错误时再回来继续配置依赖项。</p>
<p>Scope表示依赖程度：</p>
<ul>
<li>默认是Compile，也就是编译和打包时都要跟着放进去。</li>
<li>Runtime表示编译时不用编译，但后续运行时要跟着放在一起。</li>
<li>Provided表示打包时候不用跟着打，Tomcat等Web容器会提供。</li>
<li>Test表示只有测试时才参与。</li>
</ul>
<h2 id="facets">Facets</h2>
<p>本页面表示模块“有哪些特征”（例如Web、Spring等）。正确设置“特征”之后IDEA便可识别相应的配置文件。</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-facets.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>本项目是个简单的Web项目，其“特征”只有Web。添加特征可以从Facets或Modules两个页面进行操作。</p>
<p>对于Web项目，我们需要关注上面的“Web Module Deployment
Descriptor”和下面的“Web Resources
Directories”两个设置，前者表示web.xml所在位置，后者表示WebContent（即JSP等页面）的目录。</p>
<p>如果中间件有特殊设置，例如通过Tomcat的context.xml设置了数据源，那么可以点击“Add
Application Server specific
descriptor”按钮添加自定义配置文件，这样启动Tomcat时会加载你配置的context.xml的内容。</p>
<h2 id="artifacts">Artifacts</h2>
<p>本页面表示“编译完成之后如何打包”。</p>
<p>Eclipse中，类似功能是“Deployment Assembly”：</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/eclipse-artifacts.png"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>回到IDEA。点加号可以看到多种打包方法。对于这个Web项目而言，建议选择“Web
Application: Exploded”（散装，不打成war包）或“Web Application:
Archive”（打成war包）。下面选择了散装：</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-artifacts.png"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>上图是已经配置好的结构。其中：</p>
<ul>
<li>'HelloSpringMVC' compile output表示编译好的class文件。</li>
<li>lib表示项目所依赖的jar包。</li>
<li>'HelloSpringMVC' module: 'Web' facet
resources表示JSP等文件。需要在前面把Facets配置好才会出现。</li>
<li>'config' directory contents通过加号里的“Directory
Content”配置，表示把某个目录里的文件直接拷过来。</li>
</ul>
<p>生成的文件就在Output
directory中。如果不考虑数据源等配置，你可以在启动之后把这个目录里的东西拷走然后直接部署。</p>
<p>点击加号，可以看到以下几个菜单：</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-artifacts-2.png"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>这分别表示“要把哪种文件拷过来”：</p>
<ul>
<li>Library
Files表示把jar包拷过来，前提是Libraries页面已经正确配置。</li>
<li>Module
Output表示把编译好的class文件拷过来，前提是Modules页面已经正确配置。</li>
<li>Module Sources表示把源代码拷过来。</li>
<li>File、Directory
Content分别表示把单个文件和整个目录的文件拷过来。</li>
<li>Extracted
Directory表示把压缩包（例如zip、jar）内容解压之后拷过来。</li>
<li>JavaEE Facet Resources表示把Web项目的JSP等文件拷过来。</li>
</ul>
<p>如不熟悉配置，建议参照Eclipse的Deployment
Assembly配置，并对比两个IDE生成出来的文件的结构。另外建议仔细检查和测试WEB-INF下面的配置，以免遗漏文件或者文件不更新（即第一次启动时复制过来了，后续这些文件即使修改过也未同步）。</p>
<p>截至这里，Project
Structure就大体上配置好了。可以检查项目结构是否正确识别，然后准备配置Run
Configuration并启动项目。</p>
<h1 id="稍微复杂一点">稍微复杂一点</h1>
<p>以上是单模块的简单项目。下面让我们把项目结构弄复杂一点，使用两个Web项目和一个公共代码项目：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; WebProj1                      ----&gt; Web项目1
    &gt; src                       ----&gt; Java源代码1
    .   ...
    &gt; config                    ----&gt; 项目配置文件1
    .   SpringMVC-servlet.xml
    .   ...
    &gt; WebContent                ----&gt; Web文件目录
        &gt; WEB-INF
        .   &gt; lib
        .       ...
        .   web.xml
        .   ...
        ...

&gt; WebProj2                      ----&gt; Web项目2
    &gt; src                       ----&gt; Java源代码2
    .   ...
    &gt; config                    ----&gt; 项目配置文件2
    .   SpringMVC-servlet.xml
    .   ...
    &gt; WebContent                ----&gt; Web文件目录
        &gt; WEB-INF
        .   &gt; lib
        .       ...
        .   web.xml
        .   ...
        ...

&gt; CommonProj                    ----&gt; 公共代码
    &gt; src                       ----&gt; Java源代码
    .   ...
    &gt; commonConfig              ----&gt; 全局配置文件
        ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为原理实际上是一样的，下面直接给出参考配置。</p>
<h2 id="project-1">Project</h2>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/example2-1.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="libraries-1">Libraries</h2>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/example2-6.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="modules-1">Modules</h2>
<p>一开始给出的Project可能是错误的，可以将其删除，然后重新添加。添加时点Import菜单来导入现有模块。由于WebProj1和WebProj2结构类似，下面只展示WebProj1的配置。</p>
<p><img src="/img/2019-01-27-switch-to-idea-2/example2-2.png" alt="1" />
<img src="/img/2019-01-27-switch-to-idea-2/example2-3.png" alt="2" />
<img src="/img/2019-01-27-switch-to-idea-2/example2-4.png"
alt="3" /></p>
<p>如果启动时CommonProj提示缺少类，可能是CommonProj的Dependencies需要补jar包。如果WebProj缺少javax的类，那么它们两个的Dependencies需要补Tomcat。</p>
<h2 id="facets-1">Facets</h2>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/example2-5.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="artifacts-1">Artifacts</h2>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/example2-7.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>由图可见，因为CommonProj不是Web项目，无法单独启动，所以它没有单独的应用。全局配置文件则以“Directory
Content”添加了过来。</p>
<h1 id="run-configuration">Run Configuration</h1>
<p>Project Structure配置好之后，就可以准备启动。点击IDEA界面右上角的“Add
Configuration...”，或者“Run”菜单下面的“Edit
Configurations”即可编辑启动设置。</p>
<p>启动配置界面如下。我们需要先在左侧添加Tomcat（菜单需要翻页才能找到），然后在右面进行设置。</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-run-1.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>如果Application
server中没有应用服务器，或者版本与需求不一致，需要点击右边的Configure按钮配置应用服务器路径。其他设置按提示进行设置即可。</p>
<p>“On frame
deactivation”的行为有点类似Eclipse在保存代码时进行热部署。不过IDEA里面不需要点保存按钮，触发条件就变成了窗口失去焦点，例如在运行期间修改一段代码之后点一下Dock（Windows系统是点任务栏）或者切换到浏览器，IDEA就会自动编译和热部署。</p>
<p>对话框下面是项目的构建步骤。构建至少要有两步，一个是编译Java代码（Build），另一个是打包（Build
artifacts）。点击对话框上面的“Deployment”即可设置部署哪些应用：</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/idea-run-2.png" alt="2" />
<figcaption aria-hidden="true">2</figcaption>
</figure>
<p>可部署应用与Project
Structure的Artifacts关联，具体设置则和Eclipse类似：</p>
<figure>
<img src="/img/2019-01-27-switch-to-idea-2/eclipse-run.png" alt="2" />
<figcaption aria-hidden="true">2</figcaption>
</figure>
<p>配置好之后即可点击运行按钮，确认项目能否启动。</p>
<p>如果启动时候报错，提示找不到类，说明Project
Structure里的Dependencies配置不完整，例如缺少某个jar包，或者项目间依赖关系配置不全，这种情况下需要回到Project
Structure配置，检查并补充遗漏项。</p>
<p>另外，如果缺少的是“javax.servlet.ServletContext”等类，则需要在Dependencies中添加“Library”，然后在弹出的对话框中选择Tomcat（或类似中间件）。</p>
<h1 id="提交到版本控制">提交到版本控制</h1>
<p>当Project
Structure和启动设置配置完成，验证启动也没有问题，就可以将当前项目配置文件提交到版本控制，以便团队其他成员配置，也方便大家统一编辑器设置。</p>
<h2 id="检查系统设置">检查系统设置</h2>
<p>有些系统设置和具体项目有关，会随着项目文件一同保存，例如文件编码、代码风格、编译器设置等。在正式投入开发之前建议统一标准，挨个检查一下，将这些参数设置好，然后借助版本控制与大家分享。</p>
<h2 id="提交配置文件">提交配置文件</h2>
<p>如果项目使用Git，直接从GitHub上面取<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmUvYmxvYi9tYXN0ZXIvR2xvYmFsL0pldEJyYWlucy5naXRpZ25vcmU=">JetBrains.gitignore<i class="fa fa-external-link-alt"></i></span>，维护成.gitignore即可得知哪些文件应当提交。</p>
<p>对于SVN项目，有一种比较快捷的方式是进入IDEA的Version
Control窗口，检查其中未加入版本控制的文件。IDEA会自动隐藏.idea目录中不应当列入版本控制的文件，我们只需要根据实际需要提交展示出来的文件。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2018/12/12/switch-to-idea-0/">为什么进行切换</a></li>
<li><a href="/2018/12/13/switch-to-idea-1/">切换的基本操作</a></li>
<li><strong>传统Web项目在IDEA的Project Structure</strong></li>
<li><a
href="/2019/08/03/switch-to-idea-3/">传统Web项目转为Gradle项目</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>批量将&amp;#34;&amp;#34;.equals()替换成StringUtils.isEmpty()</title>
    <url>/2019/01/29/equals/</url>
    <content><![CDATA[<p>甲方前一段时间使用360代码卫士对我们项目进行了“代码审计”，其中一个问题是“使用equals()来判断字符串是否为空”。由于甲方只关心问题数量，不关心问题性质（甚至连算不算问题都不在乎），我们只能硬着头皮去按甲方要求修改。
<span id="more"></span></p>
<h1 id="修改的必要性">修改的必要性</h1>
<p>首先看一下equals()和length()的实现：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很明显，equals也是先比较字符串长度，而且空串长度是0，即使进入while处也跑不起来，因此在业务系统这种意义上不会有任何性能差异。另一方面，我们进行了简单的性能测试（循环一千万次），结果同样表明完全没有必要改。</p>
<h1 id="施工">施工</h1>
<p>为了交差，我们不得不去做没有必要的事情，所以我们需要考虑一种代价最小、没有副作用的改法。考虑到业务系统并不差调用一个函数的时间，我们干脆直接使用StringUtils工具类，既增加代码可读性，也便于装逼。代码通过awk和bash进行自动处理。</p>
<h2 id="检查公共函数">检查公共函数</h2>
<p>先确认import
org.apache.commons.lang.StringUtils是否能正确导入。如果不能，那么需要导入jar包（commons-lang.jar）。</p>
<h2 id="equals.awk">equals.awk</h2>
<pre class="line-numbers language-awk" data-language="awk"><code class="language-awk"><span class="token comment"># 注意：mac系统要使用gawk</span>

<span class="token keyword">BEGIN</span> <span class="token punctuation">&#123;</span>
    imported <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    last_import_line <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    bufflen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    changed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 修正第一类equals判断问题 "".equals(xxx)，提取括号里的内容，pos需要是恰好为括号的位置，如果失败则返回-1。</span>
<span class="token keyword">function</span> <span class="token function">extract1</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>        i<span class="token punctuation">,</span> level<span class="token punctuation">,</span> endpos<span class="token punctuation">,</span> result<span class="token punctuation">,</span> len<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    endpos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    len <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span>pos<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token function">length</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> result arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            level<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">")"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            level<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                endpos<span class="token operator">=</span>i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>endpos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 修正第一类equals判断问题： "".equals(xxx)</span>
<span class="token keyword">function</span> <span class="token function">fix_equals1</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>      result<span class="token punctuation">,</span> m<span class="token punctuation">,</span> txt<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">=</span> str<span class="token punctuation">;</span>
    m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        m <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token regex">/[^\\]""\.equals/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            txt <span class="token operator">=</span> <span class="token function">extract1</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>txt <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                result <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token string">"StringUtils.isEmpty"</span> txt <span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">length</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 修正第二类equals判断问题xxx.equals("")，提取其中的xxx，匹配规则：括号、字母、数字，碰到别的东西就停止</span>
<span class="token keyword">function</span> <span class="token function">extract2</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>     i<span class="token punctuation">,</span> level<span class="token punctuation">,</span> result<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ch <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token regex">/[a-zA-Z0-9_ \t\.]/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 放行</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            level<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            level<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        result <span class="token operator">=</span> ch result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 修正第二类equals判断问题：xxx.equals("")</span>
<span class="token keyword">function</span> <span class="token function">fix_equals2</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>    result<span class="token punctuation">,</span> m<span class="token punctuation">,</span> txt<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">=</span> str<span class="token punctuation">;</span>
    m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        m <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token regex">/\.equals\(""\)/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            txt <span class="token operator">=</span> <span class="token function">extract2</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>txt <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                result <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token function">length</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"StringUtils.isEmpty("</span> txt <span class="token string">")"</span> <span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token regex">/^import.*;$/</span> <span class="token punctuation">&#123;</span>
    <span class="token comment"># 检查有没有import字符串工具类</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>imported <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token variable">$0</span><span class="token punctuation">,</span> <span class="token regex">/StringUtils;/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        imported <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    last_import_line <span class="token operator">=</span> NR<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span>
    line <span class="token operator">=</span> <span class="token variable">$0</span><span class="token punctuation">;</span>

    line <span class="token operator">=</span> <span class="token function">fix_equals1</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    line <span class="token operator">=</span> <span class="token function">fix_equals2</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/!StringUtils\.isEmpty/</span><span class="token punctuation">,</span> <span class="token string">"StringUtils.isNotEmpty"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment"># 实际上不必要的trim。如果你的项目确实会出现空格，请谨慎处理。</span>
    line <span class="token operator">=</span> <span class="token function">gensub</span><span class="token punctuation">(</span><span class="token regex">/StringUtils\.isEmpty\(([a-zA-Z0-9_ ]+)\.trim\(\)[ ]*\)/</span><span class="token punctuation">,</span> <span class="token string">"StringUtils.isEmpty(\\1)"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    line <span class="token operator">=</span> <span class="token function">gensub</span><span class="token punctuation">(</span><span class="token regex">/StringUtils\.isNotEmpty\(([a-zA-Z0-9_ ]+)\.trim\(\)[ ]*\)/</span><span class="token punctuation">,</span> <span class="token string">"StringUtils.isNotEmpty(\\1)"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$0</span> <span class="token operator">!=</span> line<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        changed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment"># 在完成分析import之前不要直接输出，以便插入import StringUtils语句</span>
    buff<span class="token punctuation">[</span>bufflen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">;</span>
    bufflen <span class="token operator">=</span> bufflen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">END</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bufflen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">print</span> buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment"># 插入 import StringUtils。如果有import语句就插到所有import后面，否则放在第二行（正常情况下package com.xxx是第一行）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>imported <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> last_import_line <span class="token operator">||</span> last_import_line <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> changed <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">print</span> <span class="token string">"import org.apache.commons.lang.StringUtils;"</span><span class="token punctuation">;</span>
            imported <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="equals.sh">equals.sh</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.GBK         <span class="token comment"># 代码用UTF-8的，本行需要删掉</span>
<span class="token builtin class-name">cd</span> 代码所在路径
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.java"</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> <span class="token function">file</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$file</span>
    <span class="token function">awk</span> <span class="token parameter variable">-f</span> equals.awk <span class="token variable">$file</span> <span class="token operator">></span> _tmp.java         <span class="token comment"># macOS需要用gawk，安装命令brew install gawk或port install gawk</span>
    <span class="token function">cp</span> _tmp.java <span class="token variable">$file</span>
<span class="token keyword">done</span>
<span class="token function">rm</span> _tmp.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="运行程序">运行程序</h2>
<p>编译程序，发现程序出现了很多编译错误，这些错误都是因类型不一致导致的低级错误，例如字符串与日期比较、对着int值进行Interger.valueOf、判断int值是否为空串等等。这样看来，无用功做得倒也值了。</p>
<h1 id="已知问题">已知问题</h1>
<p><code>str != null &amp;&amp; !"".equals(str)</code>以及<code>str == null || "".equals(str)</code>转换之后会变成<code>str != null &amp;&amp; StringUtils.isNotEmpty(str)</code>和<code>str == null || StringUtils.isEmpty(str)</code>，但空指针判断已经没有必要，应当删除。</p>
<h1 id="后续">后续</h1>
<p>写脚本和调试脚本花了半天时间，下午脚本执行完成，然后手工处理了一些暴露出来的代码错误。隔壁两位新员工分别改另外两类简单问题，结果各花了一星期，因此非常建议大家学习一两门辅助语言，并且自动化处理事情。</p>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码审查（四）：使用Phabricator进行代码审计</title>
    <url>/2019/02/06/java-code-review-4/</url>
    <content><![CDATA[<p>本文介绍如何使用Phabricator进行人工代码审查（实际上是审计），以及供参考的操作规范。因为时间和篇幅有限，不再写如何搭建Phabricator，需要者可自行在网上搜索安装教程。</p>
<p>Phabricator是一个在浏览器上操作的开发管理平台，其中包括一个代码审查工具。工具支持两种代码审查方式，一种是事前审查，即提交之后必须先审查通过才能进入代码库；另一种是事后审查，也就是无论是否审查，代码都已经提交到代码库中。考虑我们自身实际情况（事前审查成本比较高），我们采用了“事后审查”的方式，本文也将讲述事后审查的操作。
<span id="more"></span></p>
<h1 id="概览">概览</h1>
<p>使用Phabricator进行代码审查的理由：</p>
<ul>
<li>配置好之后比较容易上手，而且不用额外安装软件，只要电脑有浏览器就能使用。（不过对于配置者来说很难上手）</li>
<li>审查以代码提交为单位，每个提交都会展示差异，比较方便和直观。</li>
<li>审查时可直接在具体代码处标记问题，方便定位和纠正。</li>
<li>如采用Phabricator进行任务或缺陷管理，可将代码提交活动与任务/缺陷进行关联，便于任务跟踪。</li>
<li>支持表情包。</li>
</ul>
<p>Phabricator的不足之处：</p>
<ul>
<li>若提交不规范（例如多次提交），审查会变得比较繁琐。</li>
<li>若团队成员操作不规范，缺陷跟踪会变得混乱。（对策：制定操作规范）</li>
<li>缺少统计功能。（对策：在数据库建立查询用账号，通过SQL语句进行统计）</li>
<li>操作比较繁琐，进入一个功能需要点很多链接。（对策：把常用页面放在浏览器收藏夹中，或者使用Phabricator自带的定制面板和菜单功能把菜单设置好）</li>
</ul>
<p>考虑先前代码审查所用手段和工具，我们项目决定采用Phabricator进行人工代码审查，并通过制定规范和进行培训来避免可能出现的问题。</p>
<h1 id="准备工作">准备工作</h1>
<p>如果准备工作已经做好，那么可以直接跳到下面“审查”一节。</p>
<p>以下是Phabricator的基本条件：</p>
<ol type="1">
<li>服务器上面安装了Phabricator及相关组件，包括Apache/Nginx、PHP
7.2、MySQL、Phabricator、Git/Subversion、Pygments（基于Python
3，在PATH中且可执行）等。</li>
<li>服务器配置了域名。如果没有域名，那么需要设置一个伪域名，并要求各成员改hosts。</li>
<li>给各成员建立了账号。（注意：如果给Phabricator配置了邮箱，注意几乎每个动作都会发邮件，需要告知大家调整系统邮件通知设置）</li>
<li>有代码库访问权限。</li>
<li>Phabricator后台进程（Daemon）运行正常。</li>
</ol>
<p>建议在Phabricator的“Project”应用中建立“Project”，然后将项目成员设置为“Member”，以方便组织成员并控制内容可见性。添加代码库以及新建任务的时候有个字段叫做“Tags”，这个“Tags”便是“Project”。</p>
<p>Phabricator安装非常复杂，建议使用现成的Docker容器，例如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JpdG5hbWkvYml0bmFtaS1kb2NrZXItcGhhYnJpY2F0b3I=">bitnami版本<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="导入代码库">导入代码库</h2>
<p>满足基本条件之后，需要在Phabricator中导入代码库才能开始进行审查。进入“Diffusion”应用，点击右上角“Create
Repository”，在出现的画面中根据实际情况选择Git或SVN。新建完成后界面如下：</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/repository.png"
alt="repository" />
<figcaption aria-hidden="true">repository</figcaption>
</figure>
<p>除了新建Repository，还需要完成以下工作才能开始审查：</p>
<ol type="1">
<li>指定实际的Git/SVN仓库位置。</li>
<li>设置需要导入的路径（仅适用于SVN）。</li>
<li>设置默认字符编码（如果不是UTF-8的话）。</li>
<li>激活仓库。</li>
</ol>
<h3 id="指定仓库位置">指定仓库位置</h3>
<p>默认情况下Phabricator会自行托管仓库（Git），我们需要将其解除，并关联到实际的代码库上面。</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/uri-1.png" alt="uri-1" />
<figcaption aria-hidden="true">uri-1</figcaption>
</figure>
<p>点击URL，会进入具体设置</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/uri-2.png" alt="uri-2" />
<figcaption aria-hidden="true">uri-2</figcaption>
</figure>
<p>点击“Edit URI”修改设置</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/uri-3.png" alt="uri-3" />
<figcaption aria-hidden="true">uri-3</figcaption>
</figure>
<p>需要将其中的“I/O Type”修改成“No
I/O”，然后保存。之后点击URIs页面上的“New
URI”按钮，添加真正的代码库的URL：</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/uri-4.png" alt="uri-4" />
<figcaption aria-hidden="true">uri-4</figcaption>
</figure>
<p>注意“I/O
Type”选择Observe，因为这个仓库仅用于代码审查，不用于真正的提交。（对于Git仓库，可以用Phabricator作为中介实现事前审查，但SVN仓库不支持事前审查）</p>
<p>若代码库需要认证，那么还需要在保存之后点击页面右侧的“Set
Credential”设置账号密码。</p>
<p>建议给代码库设置Phabricator访问专用账号。</p>
<h3 id="设置需要导入的路径svn">设置需要导入的路径（SVN）</h3>
<p>在输入代码库URL时，我们必须输入整个SVN仓库的根目录。实际上可能仅在个别分支上进行开发，不需要关注整个代码库的提交，这样的话需要设置实际导入的路径：</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/svn-path.png"
alt="svn-path" />
<figcaption aria-hidden="true">svn-path</figcaption>
</figure>
<h3 id="设置字符编码激活仓库">设置字符编码、激活仓库</h3>
<p>在概览页点击“Actions”按钮，从弹出的菜单中选择“Edit Text
Encoding”即可指定默认编码。</p>
<p>选择“Activate
Repository”即可激活仓库。一旦仓库激活，Phabricator的后台进程便会定时爬取Git/SVN提交记录，同步更新代码库。爬取频率与代码库实际提交情况有关，工作时间提交频繁，同步速度就快，而下班时间无人提交，同步速度也会降下来。</p>
<p>如果使用HTTPS协议的SVN仓库，且HTTPS证书不正确，那么同步版本库会失败。这种情况下可以进入服务器的shell，以Web
Server用户身份手动运行一下svn
checkout，永久信任证书，成功checkout之后便可自动同步了。</p>
<h1 id="审查">审查</h1>
<p>进入Phabricator的Diffusion应用，找到自己项目的代码库，点击之后可以看到代码库内容和提交记录：</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/repo.png" alt="repo" />
<figcaption aria-hidden="true">repo</figcaption>
</figure>
<p>点击“Graph”之后可以翻看所有记录。点击Commit中的版本号，可以看到那个版本的变更内容：</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/commit.png" alt="commit" />
<figcaption aria-hidden="true">commit</figcaption>
</figure>
<p>其中左侧代码是修改之前的版本，右侧是修改之后的版本。代码中红色表示删除内容，而绿色表示增加内容。</p>
<p>Phabricator只能比较文本文件，如果是其他格式则需要自行用其他手段检查，但是不影响录入审查结果。另外Phabricator一次只能审查一个版本，如果想一次性审查多个版本，需要借助一些工具，例如IntelliJ
IDEA或TortoiseSVN客户端。</p>
<p>检查完成后，需要到页面下面点击“Add Action”，从中选择审查结果。“Accept
Commit”表示该版本通过，而“Raise
Concern”表示发现问题需要修改。评论完成之后，点击右下角的“Submit”按钮即可提交。</p>
<p>需要注意的是，除了在页面下方评论区进行评论，也可以在问题代码位置进行评论。点击问题代码的行号，系统会在上面弹出评论框，这样就可以精确地指出哪一行代码存在问题，以便他人进行定位和修复。</p>
<p>顺便提一下，Phabricator支持送奖章和发表情包。点击页面右侧的“Award
Token”可以送奖章，点击评论区工具栏的表情符号按钮可发送表情包。如需维护表情包，可回到Phabricator首页，在左侧找到“More
Applications”，在应用列表中找到“Macro”，然后即可添加或修改表情包。表情包名称需要至少三个字。</p>
<h1 id="纠正缺陷">纠正缺陷</h1>
<p>进入Diffusion应用，点击页面左下角的“Browse
Commits”可以进入提交概览页：</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/commitview.png"
alt="commitview" />
<figcaption aria-hidden="true">commitview</figcaption>
</figure>
<p>其中第一排的Needs
Attention是需要你进行修改的缺陷，你需要点进去查看具体问题，修改，提交，将状态设置为“Request
Verification”，然后告知审查者重申（旧版本和新版本都要审）。</p>
<p>如果你在代码提交说明或评论中提及其他版本号（例如上面的1d6d2ede8de4或R5:12345这种形式），Phabricator会自动在版本号上面生成链接，以便交叉引用。假如你的问题出现在R5:12345版本中，建议提交代码时在说明中包含“R5:12345”字样（例如“修正R5:12345代码审查问题”），这样在审查修改之后的版本（例如R5:12354）中可以直接点链接跳转到12345版本，而且12345这个版本的页面上也会多一个指向12354版本的链接。</p>
<h1 id="缺陷跟踪">缺陷跟踪</h1>
<p>个人从Browse
Commits里可以看到需要处理和等待他人处理的记录。如果想查看其他记录（例如专门审查某个人的提交），或者需要掌握整体的缺陷情况，可以使用高级搜索功能进行检索。</p>
<figure>
<img src="/img/2019-02-06-java-code-review-4/search.png" alt="search" />
<figcaption aria-hidden="true">search</figcaption>
</figure>
<h1 id="数据统计">数据统计</h1>
<p>Phabricator未提供导出代码审查问题列表功能，也没有代码审查问题的统计功能，因此需要登录到后台数据库，通过查SQL的方法进行导出和统计。</p>
<p>假设Phabricator中代码库代号为R5，那么</p>
<h2 id="问题列表">问题列表</h2>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>
    cmt<span class="token punctuation">.</span>commitIdentifier <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>提交ID<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    DATE_FORMAT<span class="token punctuation">(</span>FROM_UNIXTIME<span class="token punctuation">(</span>cmt<span class="token punctuation">.</span>epoch<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>提交时间<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    dat<span class="token punctuation">.</span>authorName <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>提交者<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    usr<span class="token punctuation">.</span>userName <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>审核者<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    cmt<span class="token punctuation">.</span>auditStatus <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>状态<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    path<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
    <span class="token keyword">RIGHT</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>path<span class="token punctuation">,</span> INSTR<span class="token punctuation">(</span>REVERSE<span class="token punctuation">(</span>path<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>文件名<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> pl<span class="token punctuation">.</span>lineNumber<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token boolean">NULL</span> <span class="token keyword">ELSE</span> pl<span class="token punctuation">.</span>lineNumber <span class="token keyword">END</span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>行号<span class="token punctuation">`</span></span><span class="token punctuation">,</span>
    pl<span class="token punctuation">.</span>content <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>问题描述<span class="token punctuation">`</span></span>
<span class="token keyword">FROM</span> phabricator_repository<span class="token punctuation">.</span>repository_commit cmt
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> phabricator_repository<span class="token punctuation">.</span>repository_commitdata dat <span class="token keyword">ON</span> dat<span class="token punctuation">.</span>commitID <span class="token operator">=</span> cmt<span class="token punctuation">.</span>id
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> phabricator_audit<span class="token punctuation">.</span>audit_transaction aud <span class="token keyword">ON</span> aud<span class="token punctuation">.</span>objectPHID <span class="token operator">=</span> cmt<span class="token punctuation">.</span>phid <span class="token operator">AND</span> aud<span class="token punctuation">.</span>commentPHID <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> phabricator_audit<span class="token punctuation">.</span>audit_transaction_comment pl <span class="token keyword">ON</span> pl<span class="token punctuation">.</span>phid <span class="token operator">=</span> aud<span class="token punctuation">.</span>commentPHID
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> phabricator_repository<span class="token punctuation">.</span>repository_path path <span class="token keyword">ON</span> path<span class="token punctuation">.</span>id <span class="token operator">=</span> pl<span class="token punctuation">.</span>pathID
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> phabricator_user<span class="token punctuation">.</span><span class="token keyword">user</span> usr <span class="token keyword">ON</span> usr<span class="token punctuation">.</span>phid <span class="token operator">=</span> pl<span class="token punctuation">.</span>authorPHID
<span class="token keyword">WHERE</span>
    cmt<span class="token punctuation">.</span>repositoryID <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token comment">-- 根据需要解除下面的注释</span>
    <span class="token comment">-- AND auditStatus IN ('concern-raised', 'needs-verification')  -- 未关闭</span>
    <span class="token comment">-- AND auditStatus = 'audited'                                  -- 已关闭</span>
    <span class="token comment">-- AND DATEDIFF(SYSDATE(), FROM_UNIXTIME(cmt.epoch)) &lt; 7        -- 七天之内</span>
    <span class="token comment">-- AND DATEDIFF(SYSDATE(), FROM_UNIXTIME(cmt.epoch)) >= 7       -- 七天以上</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cmt<span class="token punctuation">.</span>epoch <span class="token keyword">DESC</span><span class="token punctuation">,</span> cmt<span class="token punctuation">.</span>repositoryID <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="按提交人统计未关闭缺陷数量">按提交人统计未关闭缺陷数量</h2>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> u<span class="token punctuation">.</span>realName<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 未关闭数目
<span class="token keyword">FROM</span> phabricator_repository<span class="token punctuation">.</span>repository_commit c
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> phabricator_user<span class="token punctuation">.</span><span class="token keyword">user</span> u <span class="token keyword">ON</span> u<span class="token punctuation">.</span>phid<span class="token operator">=</span>c<span class="token punctuation">.</span>authorPHID
<span class="token keyword">WHERE</span>
    c<span class="token punctuation">.</span>auditStatus <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'concern-raised'</span><span class="token punctuation">,</span> <span class="token string">'needs-verification'</span><span class="token punctuation">)</span>
    <span class="token operator">AND</span> c<span class="token punctuation">.</span>repositoryID <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
    u<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> u<span class="token punctuation">.</span>realName
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="操作规范仅供参考">操作规范（仅供参考）</h1>
<ul>
<li>应当按照实际开发活动一次性把相关文件都提交上，但是开发活动不同的话代码也要分开提交。</li>
<li>提交代码必须书写合适的提交说明。</li>
<li>如有开发活动，每日不定期进行代码审查。</li>
<li>新员工和经验不足者的代码必须被审查。</li>
<li>审查如发现问题，需要进行说明，并将其标记在问题代码处。</li>
<li>问题纠正后由本人在系统中将状态标记为“Request
Verification”，通过Git/SVN提交摘要或站内评论的方式将新旧版本号关联，然后由原审查者重审，将新旧版本同时关闭。</li>
<li>审查发现的问题应当及时（例如限制一周之内）关闭。</li>
</ul>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li>
<li><a href="/2019/01/03/java-code-review-2">应用安全问题</a></li>
<li><a href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a></li>
<li><strong>使用Phabricator进行人工代码审查</strong></li>
<li>使用FindBugs和SonarQube等工具进行扫描</li>
<li>……</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Phabricator</tag>
      </tags>
  </entry>
  <entry>
    <title>并不简单的基础开发工作（一）：登录页面</title>
    <url>/2019/02/08/login-page/</url>
    <content><![CDATA[<p>开发业务系统，虽然原理非常简单，就是数据库的增删改查，而且业务规则也不过是一堆if-else判断，但是想要做好其实并不容易。本系列文章旨在说明：即使是看起来非常简单的基础开发工作，在设计和实现上也会有很多陷阱，需要非常认真和细心才行。</p>
<p>本文以简单的登录页面为例，为了突出问题，假设系统只有两个页面：一个登录页面，另一个是登录成功之后显示的“Hello
world”。 <span id="more"></span></p>
<h1 id="思路">思路</h1>
<p>登录的思路很简单，就是去数据库里查一下用户输入的账号和密码是否和数据库数据一致，如果一致就将会话状态设置成“已登录”，并跳转到正式的操作页面上，如果不一致就返回登录页面并提示“账号密码错误”。</p>
<h1 id="设计方面的问题">设计方面的问题</h1>
<h2 id="暴露多余的信息">暴露多余的信息</h2>
<p>有的系统会“智能”地提示“用户名错误”、“密码错误”，这样会在不经意间暴露多余信息。特别是“密码错误”，这个提示会暗示“用户名正确”，从而促使攻击者加快攻击的步伐。正确的做法是使信息尽可能模糊，只提示“用户名或密码错误”。</p>
<h2 id="未防范暴力破解">未防范暴力破解</h2>
<p>虽然密码不正确的话进不去，但是网站也未针对暴力破解进行防范，也就是说，只要写个程序一个一个密码地试验，早晚能把密码试出来。因此需要设计防暴力破解的机制，例如：</p>
<ul>
<li>输入正确的验证码才能登录（需注意简单的验证码可以被机器识别）。</li>
<li>第一次不需要输入验证码，但是输错账号密码之后需要输入验证码（需注意“第一次进入登录页面”这种情况也可以伪造）。</li>
<li>多次认证错误之后锁定账号，例如输错3次密码锁定半小时。（推荐）</li>
</ul>
<h2 id="明文存储密码">明文存储密码</h2>
<p>在数据库中密码不应当明文存储，否则数据库被攻破之后密码会直接泄漏，更严重的话用户在其他网站账号也会随之攻破（例如<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvMjAxMSVFNSVCOSVCNCVFNCVCOCVBRCVFNSU5QiVCRCVFNyVCRCU5MSVFNyVBQiU5OSVFNyU5NCVBOCVFNiU4OCVCNyVFNCVCRiVBMSVFNiU4MSVBRiVFNiVCMyU4NCVFOSU5QyVCMiVFNCVCQSU4QiVFNCVCQiVCNg==">2011年中国网站用户信息泄露事件<i class="fa fa-external-link-alt"></i></span>）。</p>
<p>密码应当散列之后再存储到数据库中，而且要用比较安全的散列算法，例如bcrypt。不能用简单的MD5、SHA1（包括MD5之后再MD5），否则仍然有可能通过彩虹表等手段破解（例如事先把常用密码的MD5都计算好，看到<code>202CB962AC59075B964B07152D234B70</code>之后就很容易猜出它是“123”）。</p>
<h2 id="没有日志记录">没有日志记录</h2>
<p>建议设计登录审计功能，每次登录无论成功还是失败都将用户信息记录（主要是IP信息）下来，并提供记录查询，以便使用户判断账号是否安全，或者在发生盗号等安全事件之后进行追溯。</p>
<p>除此之外也可以加入多重认证（例如隐私验证问题、短信验证码、Google
Authenticator）、异地登录提醒等功能，提高安全性。</p>
<h2 id="没有找回密码功能">没有找回密码功能</h2>
<p>既然有登录功能，那么也应该提供找回密码的功能（设计上要求用户拿着身份证去柜台申请重置密码的除外），使忘记密码的人能够自行重置密码。<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTkvMDIvcGFzc3dvcmQuaHRtbA==">这篇文章<i class="fa fa-external-link-alt"></i></span>介绍了设计找回密码功能时需要注意的事情。</p>
<h2 id="是否需要互斥">是否需要互斥？</h2>
<p>无论是业务系统，还是其他系统，均会存在多人同时操作同一账号的情况，因此在设计上需要考虑是否允许这种情况（若不允许，需要考虑是否在技术上加以限制）。</p>
<h1 id="实现方面的问题">实现方面的问题</h1>
<p>初学者被安排编码工作之后，如果经验不足，也容易犯一些错误，例如：</p>
<h2 id="绕过认证">绕过认证</h2>
<p>如果知道Helloworld页面的网址，没登录的情况下能不能依靠直接敲网址进去呢？如果能，说明只实现了登录功能，配套的会话验证和权限验证功能没实现。</p>
<h2 id="sql注入问题">SQL注入问题</h2>
<p>初学者容易这样来书写SQL：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT count(1) FROM users WHERE username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' AND password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>代码中的SQL是直接拼接的，所以只要在密码框输入<code>' or '1'='1</code>即可绕过验证，因为SQL会变成：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'admin'</span> <span class="token operator">AND</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>
                                                                <span class="token operator">^</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>所输密码成为了SQL逻辑的一部分，破坏了原来SQL的逻辑，即SQL注入。</p>
<p>建议尽可能用绑定参数的形式来查询SQL。如果非要去拼接字符串，那么必须保证用户输入全部被转义，但是不推荐拼接因为容易忘记过滤。</p>
<h2 id="前台校验">前台校验</h2>
<p>建议加入前台校验，当用户未输入用户名或密码便点击登录按钮时，系统给出提示并跳转到未输入内容的文本框上，因为前台校验和提示发生在用户的浏览器上面，耗时可以忽略不计，而提交到服务器去校验，提交和返回都需要时间，网络状况差的话速度会比较慢。另外建议采用统一的校验程序，不要自己写校验js，浪费时间精力。</p>
<p>即便如此，后台校验（特别是业务层面的校验）也是必不可少的，因为前台校验即使逻辑再严密也可以很轻松地绕过去。</p>
<h2 id="重复提交表单">重复提交表单</h2>
<p>由于用户的网络环境不一定很好，点击“登录”按钮之后可能需要等待一段时间才能出来结果，这时候不耐烦的用户可能会多点击几下按钮，因此编码时候要考虑到这一点。一个简单的处理办法是点击“登录”按钮之后立刻将按钮变灰（无法点击），直到返回结果之后再恢复按钮状态。</p>
<h2 id="明文传输">明文传输</h2>
<p>国内很多网站仍然在使用HTTP协议进行传输。HTTP传输内容都是明文，在不安全的网络环境下，用户访问的信息很容易遭到监视和篡改：</p>
<figure>
<img src="/img/2019-02-08-login-page/password.png" alt="密码被截获" />
<figcaption aria-hidden="true">密码被截获</figcaption>
</figure>
<p>而HTTPS协议传输内容是经过加密的，监听者既无法解密也无法篡改，因此建议尽可能将网站更换成HTTPS协议。</p>
<h2 id="串号">串号</h2>
<p>有些人喜欢注册小号，即使是必须本人操作的业务系统，也存在很多将账号交给他人代办的情况。假如用户操作完A账号，注销（或者直接重新进入登录页面），然后登录B账号，但是A账号相关页面并未关闭，那么在这些页面中还能继续操作吗？</p>
<h1
id="更致命的问题有必要全部自己开发吗">更致命的问题——有必要全部自己开发吗？</h1>
<p>本文章只是为了说明问题，功能也简单到只有俩页面。实际上，在生产过程中应当采用一些现成的成熟框架，不要自己从头开始实现用户管理功能，既浪费时间和金钱，又容易漏洞百出。</p>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><strong>登录页面</strong></li>
<li><a href="/2019/02/09/list-page/">信息展示列表</a></li>
<li><a href="/2019/09/21/edit-page/">信息录入表单</a></li>
<li>业务申办-审批流程</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>功能设计</tag>
      </tags>
  </entry>
  <entry>
    <title>并不简单的基础开发工作（二）：信息展示列表</title>
    <url>/2019/02/09/list-page/</url>
    <content><![CDATA[<p>本文以被各大学校学生做滥了的“学生信息管理系统”为例，讲述信息展示列表开发中的一些问题。
<span id="more"></span></p>
<h1 id="需求">需求</h1>
<p>本文只讨论一个页面：学生信息管理系统中的学生列表页面，大体上样式如下（PC浏览器）</p>
<p>身份证号码：<input type="text"> 姓名：<input type="text">
学号：<input type="text">
<button type="button">查找</button><button type="button">重置</button></p>
<button type="button">
添加学生
</button>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 8%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 9%" />
<col style="width: 6%" />
<col style="width: 8%" />
<col style="width: 9%" />
<col style="width: 6%" />
<col style="width: 6%" />
<col style="width: 7%" />
<col style="width: 9%" />
<col style="width: 5%" />
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>身份证号码</th>
<th>姓名</th>
<th>性别</th>
<th>民族</th>
<th>户籍省份</th>
<th>市</th>
<th>区县</th>
<th>出生日期</th>
<th>学院</th>
<th>班级</th>
<th>学号</th>
<th>联系电话</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1234...78</td>
<td>一花</td>
<td>女</td>
<td>汉族</td>
<td>北京市</td>
<td>西城区</td>
<td></td>
<td>19XX年X月X日</td>
<td>计算机与软件工程学院</td>
<td>软件1901</td>
<td>201901010101</td>
<td>13012345678</td>
</tr>
<tr class="even">
<td>2</td>
<td>1234...79</td>
<td>二乃</td>
<td>女</td>
<td>汉族</td>
<td>上海市</td>
<td>黄浦区</td>
<td></td>
<td>19XX年X月X日</td>
<td>计算机与软件工程学院</td>
<td>软件1901</td>
<td>201901010102</td>
<td>13012345679</td>
</tr>
<tr class="odd">
<td>3</td>
<td>1234...80</td>
<td>三玖</td>
<td>女</td>
<td>汉族</td>
<td>广东省</td>
<td>广州市</td>
<td>越秀区</td>
<td>19XX年X月X日</td>
<td>计算机与软件工程学院</td>
<td>软件1901</td>
<td>201901010103</td>
<td>13012345680</td>
</tr>
<tr class="even">
<td>4</td>
<td>1234...81</td>
<td>四叶</td>
<td>女</td>
<td>汉族</td>
<td>浙江省</td>
<td>杭州市</td>
<td>西湖区</td>
<td>19XX年X月X日</td>
<td>计算机与软件工程学院</td>
<td>软件1901</td>
<td>201901010104</td>
<td>13012345681</td>
</tr>
<tr class="odd">
<td>5</td>
<td>1234...82</td>
<td>五月</td>
<td>女</td>
<td>汉族</td>
<td>江苏省</td>
<td>南京市</td>
<td>鼓楼区</td>
<td>19XX年X月X日</td>
<td>计算机与软件工程学院</td>
<td>软件1901</td>
<td>201901010105</td>
<td>13012345682</td>
</tr>
</tbody>
</table>
<p>每页显示<select><option>10</option><option>20</option><option>50</option><option>100</option></select>条，共49条
<button type="button">首页</button>
<button type="button">上一页</button>
<select><option>1</option><option>2</option><option>3</option><option>4</option><option>5</option></select>/5页
<button type="button">下一页</button>
<button type="button">尾页</button></p>
<h1 id="原理">原理</h1>
<p>列表页面的原理比较简单，不考虑分页的话，<code>SELECT idcard, name, gender, ... FROM students WHERE 一些条件</code>，然后将查出来的结果全部展示到页面即可。但是加上分页之后逻辑会复杂很多，因此建议事先将分页功能封装成公共函数或组件（本文不再讨论分页的实现方式）。</p>
<p>对于有固定取值的数据（性别、省市县、学院等），建议准备专门的字典表或配置文件，展示时从字典中取值。建议将读取字典数据也维护成公共函数或组件。</p>
<h1 id="设计方面的问题">设计方面的问题</h1>
<h2 id="屏幕分辨率">屏幕分辨率</h2>
<p>开发人员经常使用大显示器，分辨率比较高，而用户的显示器五花八门，有大有小，甚至在当今这个满街液晶显示屏的时代仍然使用大脑袋瓜子的1024x768
CRT显示器。因此，设计页面时要考虑多种显示器宽度和高度，例如采用响应式布局，或者去除不必要的东西，或者加水平滚动条，总之要避免让窄屏用户看到像本博客上面那样“东西装不下”的页面效果。</p>
<p>如果你的显示器分辨率比较高，建议把一些常用的宽度和高度测量好，贴在你的显示器上，并且在调试的时候测试不同尺寸的浏览器窗口。</p>
<h2 id="不清楚实际数据规模">不清楚实际数据规模</h2>
<p>一个班级大约有二三十人，而一个年级会有几十至几百人，一个学校可能超过上万人。如果不考虑实际数据规模，设计和实现出来的东西有可能会使用户困扰，例如没有分页（然后把全校上万人全部展示出来）、缺少导入功能（上万人信息需要一个一个地录入）和批量操作功能（上万工作单需要一个一个地提交）。</p>
<p>即使故意要求给用户增加障碍，例如审核工作单时必须一个一个地操作，我们其实也可以设法在不违反原则的前提下给用户提供一些便利，例如审核完成后自动跳转到下一工作单，并提醒还有多少工作单未处理，而用户不想处理的单子也可以轻松跳过。</p>
<h2 id="没有搜索搜索条件不足">没有搜索/搜索条件不足</h2>
<p>数据很多的时候，应当给用户提供搜索功能，便于很快从大量数据中找到需要的内容。另外设计查询条件时要了解用户希望如何定位数据，避免漏掉常用条件或提供很多多余条件，例如去营业厅查电话费，以身份证或手机号中的前几位或后几位作为查询条件比较靠谱，而用姓名和性别作为条件就不靠谱。</p>
<p>对于上面的表单来说，查询条件里便缺少学院、班级和学号，并且身份证号和学号最好是模糊查询，因为除了学生本人以外很少有人能把这些号码记得一个数字都不差，而且就算拿着本人身份证或学生证，敲数字也挺麻烦的。</p>
<h2 id="排序">排序</h2>
<p>展示数据最好排个顺序（默认排序顺序应当取决于用户经常做什么事情），而且要让用户能选择给哪一列排序，例如拿学生名单核对数据时会希望按学号排序，找人的时候会希望按姓名拼音排序，统计生源地时会希望按出生地排序……数据库里面什么顺序就展示什么顺序的话，没准会让用户头大。</p>
<h2 id="个人隐私">个人隐私</h2>
<p>身份证号、手机号等数据属于个人隐私，没有必要的话不要随意展示给用户。如果确实需要展示，建议考虑脱敏处理（即使本人录入的也是，谁敢说不会盗号呢），例如130****5678。</p>
<h2 id="展示逻辑删除的数据">展示逻辑删除的数据</h2>
<p>对于删除的数据，无论是物理删除还是逻辑删除，只要删除就没必要再展示给用户了（除非另外设计“回收站”功能）。例如上面表单中有一个“状态”，如果“删除”的操作只是把这个“状态”由有效变成无效，那么建议直接去掉本列，而且使“无效”的数据不再呈现。</p>
<h1 id="实现方面的问题">实现方面的问题</h1>
<h2 id="跨站脚本攻击">跨站脚本攻击</h2>
<p>举个例子，在数据库里维护一个名字叫<code>张三&lt;script&gt;alert('xss');&lt;/script&gt;</code>的学生，若加载页面时弹出个窗口，说明页面有跨站脚本攻击的风险。</p>
<p>跨站脚本攻击对策有多种，建议用比较彻底的一种：将页面上的动态输出设置为默认转义。换句话讲，用<code>&lt;%= name %&gt;</code>这类模板输出内容时，让模板引擎默认自动将其中的HTML代码转义，这样在页面上展示的就是<code>张三&lt;script&gt;alert('xss');&lt;/script&gt;</code>而非张三和一个弹框。（不过前提是模板引擎支持。如果不支持，那么建议做一个统一的转义标记，并要求输出用那个统一标记）</p>
<h2 id="性能">性能</h2>
<p>查询要注意性能问题。例如</p>
<h3 id="数据库索引">数据库索引</h3>
<p>如果该建索引的地方没建索引，或者SQL写得很糟糕，根本没走索引，那么查询速度自然会变慢。</p>
<h3 id="分页">分页</h3>
<p>以Oracle为例</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>ROWNUM rn <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
        <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">)</span> s <span class="token keyword">WHERE</span> rownum<span class="token operator">&lt;=</span><span class="token number">10000000</span><span class="token operator">+</span><span class="token number">10</span>
<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> rn<span class="token operator">>=</span><span class="token number">10000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>的效率要比</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> ROWID <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
        <span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>ROWID id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>ROWNUM n <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
            <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">)</span> s <span class="token keyword">WHERE</span> rownum<span class="token operator">&lt;=</span><span class="token number">10000000</span><span class="token operator">+</span><span class="token number">10</span>
    <span class="token punctuation">)</span> <span class="token keyword">WHERE</span> n<span class="token operator">>=</span><span class="token number">10000000</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>低一些，因此建议按后者查询。</p>
<h3 id="反复查数据库">反复查数据库</h3>
<p>出生地、民族等字典数据可能也存放在数据库中。如果每次获取取值都查一遍数据库（特别是循环里面查数据库）会非常影响性能。由于字典数据变化并不频繁，建议将此类数据做成缓存，一次性从数据库查好并缓存之后就直接从缓存里面取值。</p>
<p>缓存会有缓存时效以及线程安全等问题，这里不再展开讨论。</p>
<h3 id="模糊查询">模糊查询</h3>
<p>模糊查询，特别是双“%”（<code>LIKE '%字符%'</code>）会影响性能，如果不能去掉模糊查询功能，那么要控制好条件，避免大幅度的表扫描。</p>
<h2 id="越权访问">越权访问</h2>
<p>假如查看的链接是“/students/view.do?id=10001”，那么将id=10001改成不属于你的10002，你能否看到数据呢？如果能，说明存在漏洞，应当在查数据时附上身份验证（例如在SQL加上是创建者本人的查询条件），确保用户只能看到自己的数据。</p>
<h2 id="拒绝服务">拒绝服务</h2>
<p>假如查询查出总共10000条数据（当然是把分页之后的数据合到一起），你能否通过修改请求的方式让每页展示10000条数据？如果能展示，而且性能开销还不小，那么别人也可以用类似的方法使系统变慢甚至瘫痪。</p>
<p>你的查询耗时长吗？如果耗时比较长，而且SQL层面的优化已经做得很到位，无法再进一步提高效率，那么建议增加按钮变灰（点一下查询按钮之后就无法再点击，直到查询完成）、动画反馈（Loading...）和限制操作频率（例如禁止频繁操作，或要求先输入验证码再查询）等措施，以免用户频繁提交影响系统整体性能。</p>
<h2 id="sql注入">SQL注入</h2>
<p>老生常谈的问题，不再详细讨论。假如你在某个查询条件框输入<code>' or '1'='1</code>却能查出很多数据，那么你要赶紧补漏洞了。</p>
<h2 id="未防止误操作">未防止误操作</h2>
<p>删除是一个“有危险性”的操作，如果删除之后重建比较麻烦，那么当用户点击“删除”按钮时，系统最好不要直接执行删除，而是弹出一个提示框，让用户确认无误之后再删，以免用户误操作。提交工作单（提交成功之后就不能再修改内容了）之类的“重大”操作也是如此。</p>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><a href="/2019/02/08/login-page/">登录页面</a></li>
<li><strong>信息展示列表</strong></li>
<li><a href="/2019/09/21/edit-page/">信息录入表单</a></li>
<li>业务申办-审批流程</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>功能设计</tag>
      </tags>
  </entry>
  <entry>
    <title>用Puppeteer扒漫画</title>
    <url>/2019/04/06/manga-downloader/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9wdXBwZXRlZXI=">Puppeteer<i class="fa fa-external-link-alt"></i></span>是Google搞的爬虫框架，其特点就是我们可以直接通过程序来操作Google浏览器（服务器没装图形界面也没关系，这个Google浏览器不需要图形界面）。通过这个框架，我们就可以像正常使用浏览器一样爬网站，并且像进控制台那样操作页面获取信息，甚至还可以截图。只要网站不使用验证码或reCAPTCHA之类的大杀器，而且运营者不希望正常使用浏览器的用户也无法访问页面，那么我们就可以随便扒网站了。例如本文从<a
href="tw.manhuagui.com">https://tw.manhuagui.com</a>网站扒漫画。
<span id="more"></span></p>
<p>下面直接贴代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * https://tw.manhuagui.com 扒漫画工具
 * 
 * @author infnan
 * @version 1.0
 */</span>

<span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> winston <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'winston'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用await延时</span>
<span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">timeout</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Logger</span>
<span class="token keyword">const</span> logger <span class="token operator">=</span> winston<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>
        winston<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">info</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            info<span class="token punctuation">.</span>level <span class="token operator">=</span> info<span class="token punctuation">.</span>level<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> info<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'YYYY-MM-DD HH:mm:ss'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        winston<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token parameter">info</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>info<span class="token punctuation">.</span>timestamp<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">] &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>info<span class="token punctuation">.</span>level<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>info<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">transports</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">winston<span class="token punctuation">.</span>transports<span class="token punctuation">.</span>Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 显示用法
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">showUsage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'tw.manhuagui.com 漫画下载器 v1.0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'目前支持单话或整本。下载整部作品时建议在VPS上跑。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'node manhuagui.js [--rate 频率] [--dest 存储位置] [--override] [--help] &lt;url>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  url:            例如 https://tw.manhuagui.com/comic/22843/314335.html（某一话）或 https://tw.manhuagui.com/comic/22843/（整部作品）'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  --rate 0.5:     每秒下载多少页，默认值0.5。建议两秒一张，超过这个速度很容易被网站封IP。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  --dest 存储位置: 把漫画存到哪个地方。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  --override:     即使下过也要重新下载（仅限下整部作品的时候判断）'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 建立目录。已存在的时候忽略报错。
 * @param &#123;string&#125; path 
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">mkdir</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token string">'EEXIST'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 目录已存在不要当成错误</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 下载单个文件
 * 说明： 正常情况下这样就能下载下来，但是漫画网站服务器有个配置不对，
 * 而且Chromium有个bug（ https: //github.com/GoogleChrome/puppeteer/issues/795），
 * 下载下来的东西里头带有锟斤拷，所以后面不使用这个方法下载。
 * @param &#123;Browser&#125; browser 
 * @param &#123;string&#125; url 
 * @param &#123;string&#125; filename 
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">downloadFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">browser<span class="token punctuation">,</span> url<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 打开新标签页</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 开始下载</span>
    <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token keyword">await</span> img<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 单话
 * @param &#123;Page&#125; page 
 * @param &#123;Object&#125; options 
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">processSingleManga</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 跳转到页面</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'下载错误'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 借助页面本身的jQuery取漫画名称和第几话</span>
    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$('div.w980.title h1 a').text()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> subtitle <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$('div.w980.title h2').text()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'未知内容，PASS！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 取漫画页数</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$('#pageSelect option').length</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'未获取到漫画页数，PASS！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">加载完成，页数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 在本机建立目录</span>
    <span class="token keyword">const</span> dirName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>subtitle<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> destPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>dest<span class="token punctuation">,</span> dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 用jQuery控制点击“第1页”</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$('#pageSelect').val('1').change();</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 下载漫画</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取图片URL</span>
        <span class="token keyword">const</span> imgSrc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$('#mangaFile').prop('src')</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.webp'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 下载文件</span>
        <span class="token keyword">const</span> basePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>destPath<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: url = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>imgSrc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 因为这家网站服务器有个设置不对，而且Chromium有个bug，直接爬buffer会整出锟斤拷，所以没法像下面这样下载</span>
        <span class="token comment">// await downloadFile(browser, imgSrc, `$&#123;basePath&#125;.jpg`);</span>

        <span class="token comment">// 虽然上面方法不能用，但是此网站服务器只校验Referer，不校验Cookie，所以直接请求更简单</span>
        <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">uri</span><span class="token operator">:</span> imgSrc<span class="token punctuation">,</span>
            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token string-property property">'User-Agent'</span><span class="token operator">:</span> options<span class="token punctuation">.</span>userAgent<span class="token punctuation">,</span>
                <span class="token string-property property">'Referer'</span><span class="token operator">:</span> page<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>basePath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 模拟按向右箭头按钮，进入下一页</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'ArrowRight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 延迟，以免因为速度太快被封IP</span>
        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 下载整部作品
 * @param &#123;Page&#125; page 
 * @param &#123;Object&#125; options 
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">processWholeManga</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 跳转到页面</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 借助页面本身的jQuery取漫画名称和第几话</span>
    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$('div.book-cont div.book-title').text()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'未知内容，PASS！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">开始下载《</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">》...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 爬页面上的链接，准备一个一个地点击</span>
    <span class="token keyword">const</span> mangalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> linklist <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'div.chapter div.chapter-list li a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> link <span class="token keyword">of</span> linklist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> countEle <span class="token operator">=</span> <span class="token keyword">await</span> link<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> countStr <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> countEle<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mangalist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> link<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> link<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countStr<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已发现</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>mangalist<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">话</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> manga <span class="token keyword">of</span> mangalist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> dirName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>manga<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

        <span class="token comment">// 判断是不是已经下载过了，以节省时间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>override<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> manga<span class="token punctuation">.</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>dest<span class="token punctuation">,</span> dirName<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>manga<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 已下载过，PASS</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">开始下载 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>manga<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">processSingleManga</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> manga<span class="token punctuation">.</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 开始下载
 * @param &#123;Array&#125; urllist 
 * @param &#123;Object&#125; options 
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">doWork</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">urllist<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 开启无头浏览器</span>
    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>userAgent <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">userAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> url <span class="token keyword">of</span> urllist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">【漫画URL】</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token comment">// 取浏览器第一个Tab页</span>
            <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setViewport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1366</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">768</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 浏览器窗口大小</span>

            <span class="token comment">// 判断是单话还是整个作品</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/comic\/\d+\/\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">await</span> <span class="token function">processSingleManga</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'检测到要下载整部作品'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">await</span> <span class="token function">processWholeManga</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">下载过程中出现错误: </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 关闭浏览器</span>
    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 命令行参数</span>
<span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'minimist'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>argv<span class="token punctuation">.</span>_ <span class="token operator">||</span> argv<span class="token punctuation">.</span>_<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> argv<span class="token punctuation">.</span>help <span class="token operator">||</span> argv<span class="token punctuation">.</span>version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">showUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 开工</span>
    <span class="token function">doWork</span><span class="token punctuation">(</span>argv<span class="token punctuation">.</span>_<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>rate <span class="token operator">||</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dest</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>dest <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">override</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>override<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>package.json：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"manhuagui"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"manhuagui.js"</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"minimist"</span><span class="token operator">:</span> <span class="token string">"^1.2.0"</span><span class="token punctuation">,</span>
    <span class="token property">"puppeteer"</span><span class="token operator">:</span> <span class="token string">"^1.14.0"</span><span class="token punctuation">,</span>
    <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"^2.88.0"</span><span class="token punctuation">,</span>
    <span class="token property">"winston"</span><span class="token operator">:</span> <span class="token string">"^3.2.1"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node manhuagui.js"</span><span class="token punctuation">,</span>
    <span class="token property">"install-start"</span><span class="token operator">:</span> <span class="token string">"npm install &amp;&amp; npm start"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"infnan"</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"AGPL-3.0-or-later"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Oracle数据库进行文件传输</title>
    <url>/2019/05/27/dbftp/</url>
    <content><![CDATA[<p>为甲方升级系统时，堡垒机应用服务器正常，唯独FTP出现故障，无法上传程序包（堡垒机软件不支持直接向Linux服务器传文件）。在为无法完成部署任务发愁时，我们发现借助专用VPN可以直连甲方的Oracle数据库，并以DBA身份登录，于是我们临时编写了一款“基于Oracle的文件传输工具”。
<span id="more"></span></p>
<h2 id="代码">代码</h2>
<p>由于VPN网络不太稳定，我们在上传和下载时实现了文件分块，这样一旦发生网络问题我们可以“断点续传”。至于服务器那边，网络肯定是稳定的，否则应用系统早就让用户喷下线了。</p>
<h3 id="up.java">Up.java</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Up</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_CONNSTR</span> <span class="token operator">=</span> <span class="token string">"jdbc:oracle:thin:@数据库IP地址:1521:数据库实例名"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_USERNAME</span> <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_PASSWORD</span> <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INSERT_SQL</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO TMP_FTP (ID,NAME,GROUPID,SEQ,CONTENT) VALUES (SEQ_TMP_FTP.NEXTVAL, ?, ?, ?, ?)"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误：未找到ojdbc.jar！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">String</span> fileName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> gid <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
        <span class="token comment">//String gid = args[1];</span>
        <span class="token keyword">int</span> part <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            part <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 文件分割</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">File</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1048576</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> seq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> upload <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> length <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                seq<span class="token operator">++</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>part <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>seq <span class="token operator">!=</span> part<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\rUploading "</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> seq <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> upload <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token string">")..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

                <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">DB_CONNSTR</span><span class="token punctuation">,</span> <span class="token constant">DB_USERNAME</span><span class="token punctuation">,</span> <span class="token constant">DB_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">INSERT_SQL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stmt<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stmt<span class="token punctuation">.</span><span class="token function">setBytes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> seq <span class="token operator">+</span> <span class="token string">" Done.                                 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                upload <span class="token operator">+=</span> len<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="down.java">Down.java</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Blob</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Down</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_CONNSTR</span> <span class="token operator">=</span> <span class="token string">"jdbc:oracle:thin:@数据库IP地址:1521:数据库实例名"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_USERNAME</span> <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DB_PASSWORD</span> <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUERY_SQL</span> <span class="token operator">=</span> <span class="token string">"SELECT ID,NAME,LENGTH(CONTENT) AS LEN,CONTENT FROM TMP_FTP WHERE GROUPID=? ORDER BY SEQ"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUERY_CNT_SQL</span> <span class="token operator">=</span> <span class="token string">"SELECT COUNT(1) FROM TMP_FTP WHERE GROUPID=?"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误：未找到ojdbc.jar！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">String</span> gid <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">PreparedStatement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">DB_CONNSTR</span><span class="token punctuation">,</span> <span class="token constant">DB_USERNAME</span><span class="token punctuation">,</span> <span class="token constant">DB_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">QUERY_CNT_SQL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cnt <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">QUERY_SQL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> append <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> part <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> sfileName <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sfileName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        fileName <span class="token operator">=</span> sfileName<span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>append<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            append <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">long</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> length <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"LEN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> download <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                <span class="token class-name">Blob</span> blob <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token string">"CONTENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                part<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\rDownloading "</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> download <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token string">", Part "</span> <span class="token operator">+</span> part <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> cnt <span class="token operator">+</span> <span class="token string">")..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    download <span class="token operator">+=</span> len<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" Done.                                 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="部署方式">部署方式</h2>
<ol type="1">
<li>连接VPN，登录数据库，初始化表结构： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> TMP_FTP <span class="token punctuation">(</span>
    ID NUMBER <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    NAME VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GROUPID VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    SEQ NUMBER<span class="token punctuation">,</span>
    CONTENT <span class="token keyword">BLOB</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> SEQUENCE SEQ_TMP_FTP <span class="token keyword">START</span> <span class="token keyword">WITH</span> <span class="token number">1000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改Up.java和Down.java的数据源配置。</li>
<li>上传文件（下面假设自己电脑也是Linux/Mac，并且假设ojdbc6.jar放在了家目录）
<pre class="line-numbers language-none"><code class="language-none">javac Up.java
CLASSPATH&#x3D;.:~&#x2F;ojdbc6.jar java Up 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>如果出现网络错误，记录屏幕上提示的数字，用<code>CLASSPATH=.:~/ojdbc6.jar java Up 文件名 数字</code>的方式“断点续传”。</li>
<li>登录堡垒机，进入应用服务器，将Down.java内容粘贴到服务器中，并且（假设ojdbc6.jar放在了/opt中）
<pre class="line-numbers language-none"><code class="language-none">javac Down.java
CLASSPATH&#x3D;.:&#x2F;opt&#x2F;ojdbc6.jar java Down 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>确认文件下载好了，而且内容没有错误，继续升级操作。</li>
<li>操作完成后进行清理： <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> TMP_FTP<span class="token punctuation">;</span>
<span class="token keyword">DROP</span> SEQUENCE SEQ_TMP_FTP<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Puppeteer制作微信消息通知机器人</title>
    <url>/2019/06/03/wechat-bot/</url>
    <content><![CDATA[<p>微信机器人是一个比较难搞的东西，因为微信登录比较麻烦，而且官方不仅不提供API，还积极封杀机器人和“非法登录”的途径，导致研发风险较大。目前比较成熟的两种方式是模拟微信网页版以及程序控制微信PC版应用。</p>
<p>本文采用Puppeteer框架，借助真实的浏览器访问微信网页版，模拟浏览器的正常操作，以降低被封杀的风险。
<span id="more"></span></p>
<h2 id="大致思路">大致思路</h2>
<ul>
<li>使用Express框架提供对外接口，让其他程序能够调用。</li>
<li>使用Puppeteer来访问微信网页版。由于微信网页版需要扫码登录，需要设计接口来暴露二维码（这里直接提供网页截图）。另外二维码会过期，因此需要刷新机制（本文程序的话，重启就行，不需要再另行实现）。</li>
<li>通过操作DOM来判断页面的状态。</li>
<li>通过模拟按键来寻找好友或群组、输入消息和发送消息。</li>
<li>通过捕获浏览器AJAX请求来获取新消息内容（本文未实现）。</li>
<li>实现敏感词和敏感言论过滤机制，以防无意或有意的攻击。</li>
</ul>
<h2 id="代码">代码</h2>
<p>详细参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2luZm5hbi9TaW1wbGVOb3RpZnlCb3Q=">https://github.com/infnan/SimpleNotifyBot<i class="fa fa-external-link-alt"></i></span>。</p>
<p>开启浏览器： <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 开启无头浏览器</span>
<span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">// 取浏览器第一个Tab页</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setViewport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1366</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">768</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 浏览器窗口大小</span>

<span class="token comment">// 使用简体中文界面</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">'https://wx.qq.com/?lang=zh_CN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>发送消息的过程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sendMessage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 判断是否登录</span>
    <span class="token keyword">const</span> unloginTest <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body.unlogin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>unloginTest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageError</span><span class="token punctuation">(</span><span class="token string">'Not login'</span><span class="token punctuation">,</span> <span class="token string">'NOLOGIN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageError</span><span class="token punctuation">(</span><span class="token string">'Target not found'</span><span class="token punctuation">,</span> <span class="token string">'NOTARGET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 如果当前聊天就是目标，那么不用搜了，直接蹦到聊天框</span>
    <span class="token keyword">const</span> testEle1 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#chatArea a.title_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> testEle1<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test1 <span class="token operator">!==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> searchEle <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#search_bar > input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 清空搜索框和搜索结果</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$eval</span><span class="token punctuation">(</span><span class="token string">'#search_bar input'</span><span class="token punctuation">,</span> <span class="token parameter">node</span> <span class="token operator">=></span> node<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> searchEle<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> searchEle<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> searchEle<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'Backspace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 延时，使页面上原有的搜索结果消失</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> timeout <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> testEle2 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#search_bar div.mmpop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>testEle2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 输入目标群组名称</span>
        <span class="token keyword">await</span> searchEle<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 等待出现搜索结果，最长等待5秒</span>
        <span class="token keyword">let</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> timeout <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> testEle3 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#search_bar div.mmpop h4.contact_title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>testEle3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">const</span> test3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> testEle3<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>test3 <span class="token operator">===</span> <span class="token string">'找不到匹配的结果'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageError</span><span class="token punctuation">(</span><span class="token string">'Target not found'</span><span class="token punctuation">,</span> <span class="token string">'NOTARGET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageError</span><span class="token punctuation">(</span><span class="token string">'WeChat not responding'</span><span class="token punctuation">,</span> <span class="token string">'NORESPONSE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 遍历搜索结果</span>
        <span class="token comment">// 由于overflow数字不大，且翻页需要消耗操作和等待网络请求的时间，建议目标名称独一无二，免得不好找。</span>
        <span class="token keyword">const</span> pop <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#search_bar div.mmpop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> lastname <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
        ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> overflow <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> overflow <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> overflow<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> nowEle <span class="token operator">=</span> <span class="token keyword">await</span> pop<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.contact_item.on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 说明正在loading</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nowEle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">let</span> currname <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> nowEle<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastname <span class="token operator">===</span> currname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 未找到目标，结束</span>
                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            lastname <span class="token operator">=</span> currname<span class="token punctuation">;</span>

            <span class="token comment">// 如果没找到而且能往下翻那么就继续往下翻</span>
            <span class="token comment">// 找到的话按一下回车键，进入聊天界面</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currname <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">await</span> searchEle<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">await</span> searchEle<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'ArrowDown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 等待微信响应</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> timeout <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">const</span> nowEle2 <span class="token operator">=</span> <span class="token keyword">await</span> pop<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div.contact_item.on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nowEle2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">let</span> currname2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> nowEle2<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>currname <span class="token operator">!==</span> currname2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token comment">// 暂时到底了，需要loading</span>
                        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageError</span><span class="token punctuation">(</span><span class="token string">'Target not found'</span><span class="token punctuation">,</span> <span class="token string">'NOTARGET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 等待进入聊天界面</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> timeout <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> timeout<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> titleEle <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#chatArea a.title_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> titleEle<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> testEle4 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#chatArea a.title_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> test4 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> testEle4<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test4 <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 输入消息</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$eval</span><span class="token punctuation">(</span><span class="token string">'#editArea'</span><span class="token punctuation">,</span> <span class="token parameter">node</span> <span class="token operator">=></span> node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> editEle <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#editArea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> editEle<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> line<span class="token punctuation">]</span> <span class="token keyword">of</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 发送多行消息时需要用 Ctrl+Enter 换行</span>
                <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token string">'Control'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">'Control'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">await</span> editEle<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 按下发送按钮</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageError</span><span class="token punctuation">(</span><span class="token string">'Target not confirmed'</span><span class="token punctuation">,</span> <span class="token string">'NORESPONSE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="保号注意事项">保号注意事项</h2>
<p>为确保安全，使用机器人时需要多加注意，以免封号甚至招致牢狱之灾。以下皆为网友经验，仅供参考。</p>
<h3 id="注册">注册</h3>
<ul>
<li>使用真实手机注册，避免用模拟器或双开软件。
<ul>
<li>使用模拟器的话需要先用xprivacy控制好微信的权限，否则会无法登录或被微信封禁。</li>
<li>使用双开之前先调查靠不靠谱，例如有些双开会被微信识别，导致账号被封，而小米手机的双开就比较安全。</li>
</ul></li>
<li>使用真实手机号注册，并进行实名认证，然后绑定一张银行卡，再往微信钱包里头存一块钱。</li>
<li>手机和手机号尽量专用，一个设备或手机号不要拿着注册很多微信号，也不要拿着频繁登录注销。</li>
<li>新注册的账号要在真实的手机上挂15至30天，然后再进行其他操作，以免让系统“大数据”识别。</li>
<li>不要忘记设置昵称、地区和头像。</li>
<li>至少保持三个真实好友。</li>
<li>一天之内不要加太多好友。</li>
<li>好友不要超过5000。</li>
</ul>
<h3 id="发送消息">发送消息</h3>
<ul>
<li>注意消息发送频率不要太高。几秒钟就发一大堆消息（例如像<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Mzk0MjgxLw==">脸滚键盘<i class="fa fa-external-link-alt"></i></span>那样），这样很容易被封号。</li>
<li>不定期往“filehelper”或专用群发送keepalive消息，以防掉线。</li>
<li>注意设计监控和报警机制，掉线之后能及时去恢复连接。</li>
<li>要特别注意控制消息发送内容！尤其是接受用户输入的程序，一定要做好言论控制，以免他人无意或有意触发政治敏感话题，导致你的账号被封，甚至让你被警方请去喝茶。</li>
</ul>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>Puppeteer</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>那些容易遗忘的非功能性需求</title>
    <url>/2019/07/25/non-functional-requirement/</url>
    <content><![CDATA[<p>非功能性需求不会给项目带来收益，然而非功能性需求不仅要在需求阶段考虑好，而且在设计与开发过程中也要多加留意，否则都会成为项目的坑……</p>
<p>本文以一个政府的Web应用项目为例，讨论一些容易遗忘的非功能性需求。
<span id="more"></span></p>
<h2 id="易用性">易用性</h2>
<p>用户界面应当设计友好，操作简洁，而且讲好现代标准汉语。</p>
<p>近些年来，各级政府正在大力推行政务改革，实现“一网通办”，达到“一网受理、只跑一次、一次办成”的目标。我们对用户办件条件进行校验时也要尽量做到“只跑一次”：例如用户不满足3个办件条件，我们尽量一次性把这3个条件都提示给用户，而不是挤牙膏式一项一项提醒，让用户录入三四遍才能成功申报。</p>
<p>团队开发时，每个人负责的功能都应当保持“画风一致”。要是A业务界面风格与操作方式像《喜羊羊与灰太狼》，而B业务的界面风格与操作方式像《熊出没》，这样太“沙雕”了。</p>
<h2 id="可靠性">可靠性</h2>
<p>输入数据要进行有效性检查，并给出准确友好的错误提示。虽然这样说，有些问题还是容易忽略掉，例如：</p>
<ul>
<li>过度检查：
<ul>
<li>姓名：有些民族（例如维吾尔族、藏族）的人名中没有姓氏，系统不能强制要求这些人录入姓氏。顺带一提，维吾尔姓名“尼格买提·热合曼”中的“尼格买提”是本人名字，而“热合曼”是他父亲的名字，不是姓氏。</li>
<li>手机号：“虚拟运营商”开始运营之后，中国已有170开头的手机号。2017年底，中国电信又推出了199开头的手机号……</li>
</ul></li>
<li>最大长度不够长：
<ul>
<li>姓名：阿不都热依木·伊盖木拜尔迪</li>
<li>地址：新疆维吾尔自治区伊犁哈萨克自治州塔城地区和布克赛尔蒙古自治县教育学院买依墩卡萨克能科特奈分校（虽然这只是个网上流传的段子）</li>
<li>考虑长度时，不光要考虑字数，还要考虑字节数。例如Oracle里面一个汉字占3字节，设计表结构时要留得足够长。</li>
</ul></li>
<li>串号：登录A用户，办完业务之后注销，再以B用户身份登录，结果用户因浏览器窗口没关干净就操作而串号。</li>
</ul>
<p>为避免误操作造成损失，系统应当对有影响的操作进行一定的控制，例如：</p>
<ul>
<li>点击申报、删除等按钮时，弹出确认提示框，避免意外提交、丢失数据。</li>
<li>点击查询、保存等按钮之后，立刻让按钮变灰，避免让用户再次点击，否则网速不好的时候用户容易多次操作，导致系统负载增加、产生重复数据等。</li>
</ul>
<p>需要考虑系统整体的可靠性，以及故障恢复的能力。以缴费为例，假如用户网络出现故障，或者服务器系统故障，而用户实际上未完成缴费，系统需要能够回滚支付状态，不能给工作单标记成“已缴费”，更不能让银行扣用户的钱。</p>
<h2 id="安全性">安全性</h2>
<p>关于安全，国家有一个专门的安全等保制度要求（可搜索“等保2.0”了解详细情况）。本文只讨论一些容易遗忘的需求。</p>
<p>如果你在做需求，复制粘贴现成模板时，需要留意安全需求部分：2019年12月1日等保2.0正式实施，其范围和细则均发生了较大变化，做需求时要注意按照<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlhb3podW4ub3JnL0wvNDI1OTguaHRtbA==">GB/T 22239-2019
信息安全技术 网络安全等级保护基本要求<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlhb3podW4ub3JnL0wvNDI1OTkuaHRtbA==">GB/T 25070-2019
信息安全技术
网络安全等级保护安全设计技术要求<i class="fa fa-external-link-alt"></i></span>等标准规范来调整完善。</p>
<h3 id="抵御常见攻击">抵御常见攻击</h3>
<p>系统需要能够抵挡常见的攻击，例如XSS、SQL注入、CSRF、暴力破解口令等。</p>
<h3 id="权限控制">权限控制</h3>
<p>考虑功能需求时，很容易就想到要判断哪些角色能够办理哪些业务。然而以下情况就容易忽略了：</p>
<ul>
<li>如果用户没有业务办理权限，却知道相应系统功能的URL，那么系统需要防止用户直接在浏览器录入URL来进行操作。</li>
<li>系统需要防止对其他账号（不应该接触到的）信息进行查询和操作，增加业务数据与用户身份关系的校验。举个例子，开发期间大家都用广东的账号来操作，那么你需要确认广西的账号里不会出现这些不该碰到的信息。
<ul>
<li>接上一条，在URL和&lt;form&gt;层面也要加以防范，否则用户只要修改网址上面的id与页面里的隐藏域就能操作别人的信息了。</li>
</ul></li>
</ul>
<h3 id="审计">审计</h3>
<p>系统登录注销、业务办理等操作要有跟踪记录，例如什么人、什么时间、用什么IP（注意预留IPv6支持）做了什么操作，以便在出事之后追查责任人。与第三方公司对接时更要做好日志记录，否则出问题时大家就要互相踢皮球了。</p>
<p>系统需要能够防范一些恶意操作，如猜测密码、频繁查询、构造恶意查询条件（分页每页显示10000条记录）等，例如通过按钮变灰、输入验证码等形式防止用户频繁操作，并自动封禁恶意操作的IP来防止暴力破解。</p>
<p>除应用层面，在数据库层面也要考虑审计记录，例如建立跟踪表，记录数据变化情况。</p>
<h3 id="处理敏感信息">处理敏感信息</h3>
<p>证件号码、手机号等敏感信息应考虑加密，例如“130****5678”，更要防止被人导出。</p>
<p>允许用户生产内容的地方（例如意见反馈）需考虑敏感词过滤和人工审核。假如用户利用你的系统发表了《<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUE2JTgxJUU2JUIxJTgyJUU0JUI5JUEwJUU4JUJGJTkxJUU1JUI5JUIzJUU4JUJFJTlFJUU0JUJCJUJCJUU2JTgwJUJCJUU0JUI5JUE2JUU4JUFFJUIwJUU1JTg1JUFDJUU1JUJDJTgwJUU0JUJGJUExJUU0JUJBJThCJUU0JUJCJUI2">关于要求xxx同志辞去党和国家领导职务的公开信<i class="fa fa-external-link-alt"></i></span>》，而且还登上了你的系统首页，你就等着被有关部门处理吧。当然，政府项目还好，自己做产品的时候要更加注意。</p>
<h3 id="传输安全">传输安全</h3>
<p>除了输入输出，数据传输过程也要考虑安全，例如HTTP协议是明文传输，无论是GET还是POST请求，用户与服务器之间交互的数据都能被监听和篡改，而HTTPS协议解决了此问题。建议只要有条件就使用HTTPS。</p>
<p>另外还需要注意两点，一是Base64仅仅为一种编码方式，不能当作加密使用，二是MD5安全性不高，其散列码可以用彩虹表或暴力的方式破解。</p>
<h2 id="性能">性能</h2>
<p>设计系统时，需考虑性能指标，例如响应时间、并发用户数、资源利用率等，另外也要考虑未来上线之后的业务规模与增长情况，性能和容量（包括网络带宽）都要足够才行。</p>
<p>计算性能需求时，需要留意的是“并发数”和“在线数”的区别。最大在线2000人并不等于最大并发2000，在功能上面的操作时间会“冲淡”并发数。一般场景主要是“最大在线数”，而抢票那种特殊场景要更加注重“最大并发数”。</p>
<p>设计系统架构时，需要考虑是否采用集群部署、负载均衡，考虑采用传统的单应用还是微服务架构，而且上线之前就要想好业务量增长以后该怎么办，不要等系统真的扛不住之后才想起来调整架构。</p>
<p>未来用户数大幅增长，或者会产生高并发时，则要考虑负载均衡、读写分离、分表、分库等机制。这里面每一项都是大坑，早准备少吃亏。</p>
<h2 id="兼容性">兼容性</h2>
<p>以浏览器为例。目前的开发框架基本上都能兼容主流浏览器，然而我们需要额外考虑</p>
<ul>
<li>老版本IE：有些政府部门的电脑仍然是XP系统、IE6/7/8，我们需要考虑是否兼容这些电脑。</li>
<li>新版本IE：同上。</li>
<li>移动设备：确认是否需要兼容移动设备，例如Android、iOS等。</li>
<li>“国产化”：国家已命令各政府部门和公共机构三年内实现国产化替代。对于开发人员来说，这项要求实质上就是“页面能够在龙芯处理器电脑、老版本Linux系统的个位数版本Firefox上正确展示和操作”（没错，我们说的就是中标麒麟。如果连中标麒麟都能正常使用，那么能冲进<span class="exturl" data-url="aHR0cHM6Ly9kaXN0cm93YXRjaC5jb20v">DistroWatch<i class="fa fa-external-link-alt"></i></span>前十名的深度操作系统就更没问题了）。</li>
</ul>
<p>兼容性问题必须一开始就考虑好。一旦开始开发，后面就很难再做调整了。</p>
<p>另一个例子是字符编码。字符编码一定要用UTF-8，不要用别的，否则一个名字带生僻字、拒绝去派出所改名（因为改名牵涉人事、财务等诸多问题，很麻烦）而且还经常办业务的人可以让政府部门用户与系统开发人员集体崩溃。</p>
<h2 id="扩展性">扩展性</h2>
<p>系统的硬件资源、软件资源、软件功能等应便于进行扩展调整。</p>
<p>需求不是一成不变的，甲方日后可能会提出需求变更，甚至自己打自己脸，推翻以前提出的需求。设计和开发时要提前考虑提高代码可复用性，降低需求变更成本：能参数化的地方增加参数化配置，能形成组件的东西做成组件，能避免copy-paste的地方就避免copy-paste（封装成公共类或公共函数），这样后面真发生需求变更时你能相对舒服一些。</p>
<p>开发业务系统时，还需考虑到“一网通办”的时代背景，留意未来有可能会与其他政府部门的系统进行对接。想象一下，假如你的业务逻辑代码是通过copy-paste写到不同平台的，而且Controller也夹杂着业务逻辑，没有使用服务，也没有形成公共方法或组件，那么一旦甲方提出需求变更，你就需要挨个检查PC端、移动端、自助服务终端、上海市政府一网通办接口、国家政务服务平台接口的代码然后再考虑如何修改……</p>
<h2 id="容易忽略的真功能性需求">容易忽略的真·功能性需求</h2>
<p>有一些功能需求，即使用户没提，我们也有必要加以考虑。</p>
<h3 id="查询统计">查询统计</h3>
<p>领导们都喜欢“讲大局”，这样就会产生定期或不定期的统计需求，例如用户注册量、平均访问量、高峰时期访问量、业务办理量、退单率等。实现业务功能时要记得顺便做好信息记录与数据采集，不要等到领导提统计需求时才发现系统连原始数据记录都没有。</p>
<h3 id="待办查询和提醒">待办查询和提醒</h3>
<p>很多用户工作繁忙，无法兼顾系统所有业务，而且也有个别用户神经大条，经常健忘。建议为这类用户开发一个“待办事项查询”功能，一个页面展示所有未完成的工作，并且对未及时处理的业务作出提醒，以免遗忘。</p>
<h3 id="系统公告">系统公告</h3>
<p>遇到紧急情况，可通过系统功能向用户发出公告，否则找页面文件、增加alert代码、申请修改生产系统等一系列步骤容易耽误事。</p>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>需求分析</tag>
      </tags>
  </entry>
  <entry>
    <title>从Eclipse切换到IDEA（三）：传统Web项目转为Gradle项目</title>
    <url>/2019/08/03/switch-to-idea-3/</url>
    <content><![CDATA[<p>除了在IDEA手工配置项目，也可考虑将传统Web项目转为Gradle项目，以便简化项目依赖管理、实现标准化构建等，也便于后续结合Jenkins等进一步实现自动化。
<span id="more"></span></p>
<h1 id="项目目录结构">项目目录结构</h1>
<p>我们以下面项目为例 <pre class="line-numbers language-none"><code class="language-none">&gt; WebProj1                      ----&gt; Web模块1
    &gt; src                       ----&gt; Java源代码1
    .   &gt; com
    .       ...
    &gt; config                    ----&gt; 模块配置文件1，部署时计划放到 WEB-INF&#x2F;classes 目录中
    .   SpringMVC-servlet.xml
    .   ...
    &gt; WebContent                ----&gt; Web文件目录
        &gt; WEB-INF
        .   &gt; lib               ----&gt; 所需jar包
        .       ...
        .   web.xml
        .   ...
        index.jsp
        ...

&gt; WebProj2                      ----&gt; Web模块2
    &gt; src                       ----&gt; Java源代码2
    .   &gt; com
    .       ...
    &gt; config                    ----&gt; 模块配置文件2
    .   SpringMVC-servlet.xml
    .   ...
    &gt; WebContent                ----&gt; Web文件目录
        &gt; WEB-INF
        .   &gt; lib               ----&gt; 所需jar包
        .       ...
        .   web.xml
        .   ...
        index.jsp
        ...

&gt; CommonProj                    ----&gt; 公共代码，另外两个Project的依赖项
    &gt; src                       ----&gt; Java源代码
    .   &gt; com
    .       ...
    &gt; commonConfig              ----&gt; 全局配置文件
        log4j.xml
        ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h1 id="准备工作">准备工作</h1>
<ol type="1">
<li>安装JDK 8：本文所用的Gradle 5.4既不支持古老的JDK
6，也不支持崭新的JDK 10。后文会解释如何保证不同版本JDK的兼容性。</li>
<li>检查各模块是否存在循环依赖：例如WebProj1依赖CommonProj，而CommonProj反过来又依赖WebProj1。这种情况在Eclipse里面能正常打包，然而切换到Gradle之后会出错，需要通过代码重构来消除错误。</li>
<li>统一java文件的字符编码（java就行，其他文件类型无妨）。假如一部分java代码文件是UTF-8，另一部分java代码文件用GBK，要么会出现编译错误，要么会产生乱码。</li>
<li>团队开发时，要提前和团队其他成员打好招呼，让大家有所准备。改造工作需要调整代码结构，因此在正式切换之前需要让大家理清未提交的代码，并保证配置文件能够正确构建。</li>
</ol>
<h1 id="开始改造">开始改造</h1>
<h2 id="项目文件结构调整">项目文件结构调整</h2>
<p>Maven和Gradle有很多约定俗成的要求，例如Java代码存放位置。我们需要按照这些约定来调整我们的代码结构：</p>
<ul>
<li>src（Java代码） → src/main/java</li>
<li>test（Java代码） → test/main/java</li>
<li>config（需要拷到 WEB-INF/classes 下面的配置文件） →
src/main/resources</li>
<li>WebContent（Web文件内容，例如jsp等） → src/main/webapp</li>
<li>增加gradle相关配置文件，后文将介绍如何编写这些文件。</li>
</ul>
<p>调整效果如下： <pre class="line-numbers language-none"><code class="language-none">&gt; WebProj1                      ----&gt; Web模块1
    &gt; src                       
    .   &gt; 【main】
    .   .   &gt; 【java】          ----&gt; Java源代码1挪到此处
    .   .   .   &gt; com
    .   .   .       ...
    .   .   &gt; 【resources】     ----&gt; 模块配置文件1（原config）挪到此处
    .   .   .   SpringMVC-servlet.xml
    .   .   .   ...
    .   .   &gt; 【webapp】        ----&gt; Web文件目录（原WebContent）挪到此处
    .   .       &gt; WEB-INF
    .   .       .   &gt; lib       ----&gt; 所需jar包
    .   .       .       ...
    .   .       .   web.xml
    .   .       index.jsp
    .   .       ...
    .   &gt; 【test】              ----&gt; 即使未编写测试代码，也建议保留目录结构
    .       &gt; java
    .       &gt; resources
    【build.gradle】            ----&gt; 新增的构建脚本

&gt; WebProj2                      ----&gt; Web模块2
    &gt; src                       
    .   &gt; 【main】
    .   .   &gt; 【java】          ----&gt; Java源代码2挪到此处
    .   .   .   &gt; com
    .   .   .       ...
    .   .   &gt; 【resources】     ----&gt; 模块配置文件2（原config）挪到此处
    .   .   .   SpringMVC-servlet.xml
    .   .   .   ...
    .   .   &gt; 【webapp】        ----&gt; Web文件目录（原WebContent）挪到此处
    .   .       &gt; WEB-INF
    .   .       .   &gt; lib       ----&gt; 所需jar包
    .   .       .       ...
    .   .       .   web.xml
    .   .       index.jsp
    .   .       ...
    .   &gt; 【test】
    .       &gt; java
    .       &gt; resources
    【build.gradle】            ----&gt; 新增的构建脚本

&gt; CommonProj                    ----&gt; 公共代码，另外两个Project的依赖项
    &gt; src                       
    .   &gt; 【main】
    .   .   &gt; 【java】          ----&gt; Java源代码挪到此处
    .   .   .   &gt; com
    .   .   .       ...
    .   .   &gt; 【resources】     ----&gt; 全局配置文件挪到此处
    .   .   .   log4j.xml
    .   .   .   ...
    .   &gt; test
    .       &gt; java
    .       &gt; resources
    &gt; lib                      ----&gt; 为了消除编译错误，这里需要准备一份CommonProj必需的jar包
    .   ...
    【build.gradle】            ----&gt; 新增的构建脚本

&gt; gradle                       ----&gt; Gradle Wrapper，后面会用命令来生成该目录及文件。
    &gt; wrapper
        gradle-wrapper.jar
        gradle-wrapper.properties
build.gradle                   ----&gt; 新增的构建脚本。此脚本范围为整个项目。
settings.gradle
gradle.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="配置gradle">配置Gradle</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlpYmFpLmNvbS9ncmFkbGUvaG93LWluc3RhbGwtZ3JhZGxlLXdpbmRvd3MuaHRtbA==">安装Gradle<i class="fa fa-external-link-alt"></i></span></li>
<li>放置Gradle
Wrapper：打开终端，进入项目所在的根目录，输入<code>gradle wrapper</code>。以后其他成员只要在终端中直接输入“./gradlew”就能自动下载相同版本的Gradle。</li>
</ol>
<p>考虑到国内网络情况，需要进行两种额外处理步骤（二选一）：</p>
<ol type="1">
<li>将gradle-5.4-all.zip分发给团队其他成员，让大家都按照上面方法手工安装Gradle。</li>
<li>上传到国内或公司内的服务器，例如<code>http://10.11.22.33:8088/gradle-5.4-all.zip</code>，然后修改你项目中的
gradle/wrapper/gradle-wrapper.properties 文件，将 distributionUrl
修改成该地址。后续其他成员只要执行gradlew就会自动从这个URL下载Gradle。</li>
</ol>
<p>假如需要代理才能访问网络，可在自己电脑
~/.gradle/gradle.properties（C:\Users\xxx\.gradle\gradle.properties）中配置网络代理。</p>
<p>若使用HTTP代理，地址为<code>http://127.0.0.1:1081</code>，可加入：
<pre class="line-numbers language-none"><code class="language-none">systemProp.http.proxyHost&#x3D;127.0.0.1
systemProp.http.proxyPort&#x3D;1081
systemProp.https.proxyHost&#x3D;127.0.0.1
systemProp.https.proxyPort&#x3D;1081<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>若使用SOCKS5代理，地址为<code>127.0.0.1:1080</code>，则是
<pre class="line-numbers language-none"><code class="language-none">org.gradle.jvmargs&#x3D;-DsocksProxyHost&#x3D;127.0.0.1 -DsocksProxyPort&#x3D;1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>配置代理之后，个别情况下会出现<code>Error 403 Forbidden</code>报错，这种情况说明仓库屏蔽了你的代理，你只能换梯子或换国内源了。</p>
<h2 id="编写gradle构建脚本">编写Gradle构建脚本</h2>
<h3 id="build.gradle">/build.gradle</h3>
<p>build.gradle是构建脚本的核心。由于本文的案例是多模块项目，build.gradle也就分成了两层，外层是项目整体的，内层是各模块的。本小节是整体的配置。</p>
<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">allprojects <span class="token punctuation">&#123;</span>
    group <span class="token operator">=</span> <span class="token string">'com.yourcompany.xxx'</span>
    version <span class="token operator">=</span> <span class="token string">'1.0'</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// subprojects是各模块的统一配置</span>
subprojects <span class="token punctuation">&#123;</span>
    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>

    <span class="token comment">// Java 版本</span>
    sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>
    targetCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>

    <span class="token comment">// 用Maven库管理部分依赖</span>
    repositories <span class="token punctuation">&#123;</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 使用阿里镜像</span>
        maven <span class="token punctuation">&#123;</span>
            url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>
        <span class="token punctuation">&#125;</span>
        maven <span class="token punctuation">&#123;</span>
            url <span class="token string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 默认编译器是javac，如果构建所用JDK与生产环境JDK版本不一致，可能会产生兼容性问题。</span>
    <span class="token comment">// 将javac换成Eclipse编译器可避免问题。</span>
    configurations <span class="token punctuation">&#123;</span>
        ecj
    <span class="token punctuation">&#125;</span>

    dependencies <span class="token punctuation">&#123;</span>
        ecj <span class="token string">'org.eclipse.jdt.core.compiler:ecj:4.6.1'</span>
    <span class="token punctuation">&#125;</span>

    compileJava <span class="token punctuation">&#123;</span>
        options<span class="token punctuation">.</span>fork <span class="token operator">=</span> <span class="token boolean">true</span>
        options<span class="token punctuation">.</span>forkOptions<span class="token punctuation">.</span>with <span class="token punctuation">&#123;</span>
            executable <span class="token operator">=</span> <span class="token string">'java'</span>
            jvmArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-classpath'</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>ecj<span class="token punctuation">.</span>asPath<span class="token punctuation">,</span> <span class="token string">'org.eclipse.jdt.internal.compiler.batch.Main'</span><span class="token punctuation">,</span> <span class="token string">'-nowarn'</span><span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 构建系统</span>
task <span class="token function">myproj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    dependsOn <span class="token string">':WebProj1:build'</span><span class="token punctuation">,</span> <span class="token string">':WebProj2:build'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果java代码采用GBK编码，那么需要下面的调整：</p>
<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">subprojects <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    compileJava <span class="token punctuation">&#123;</span>
        <span class="token comment">// 字符编码</span>
        options<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'GBK'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="settings.gradle">/settings.gradle</h3>
<p>该文件用于表示项目有哪些子模块（subproject）：</p>
<pre class="line-numbers language-none"><code class="language-none">rootProject.name &#x3D; &#39;myproj&#39;

include &#39;CommonProj&#39;
include &#39;WebProj1&#39;
include &#39;WebProj2&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="gradle.properties">/gradle.properties</h3>
<p>该文件用于配置Gradle本身的环境，例如JVM参数等： <pre class="line-numbers language-none"><code class="language-none"># 内存设置
org.gradle.jvmargs&#x3D;-Xmx1280m
# 允许并行
org.gradle.parallel&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>如果项目文件使用的字符编码是GBK，可加入（其中Xmx与字符编码无关，需要根据自己电脑情况设置）：
<pre class="line-numbers language-none"><code class="language-none">systemProp.file.encoding&#x3D;GBK
org.gradle.jvmargs&#x3D;-Xmx1280m -Dfile.encoding&#x3D;GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<h3 id="webproj1build.gradle">/WebProj1/build.gradle</h3>
<p>该文件负责WebProj1模块的构建。</p>
<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">&#123;</span>
    id <span class="token string">'war'</span>
<span class="token punctuation">&#125;</span>

dependencies <span class="token punctuation">&#123;</span>
    <span class="token comment">// 依赖模块：CommonProj</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':CommonProj'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 不要引入CommonProj的jar包，否则打包时依赖jar包会被打两遍</span>
        <span class="token comment">// 但这样做你需要保证WebProj1和WebProj2中有必需的jar包，否则运行应用时会报错</span>
        transitive <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 本地jar包</span>
    providedCompile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'src/main/webapp/WEB-INF/lib'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'*.jar'</span><span class="token punctuation">)</span>

    <span class="token comment">// Servlet API，部署到生产环境时实际由Tomcat等中间件提供</span>
    providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>
    providedCompile <span class="token string">'javax.servlet.jsp:jsp-api:2.1'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>传统项目的jar包需要手动管理，在切换成Gradle之后，可转交Gradle管理，例如删除SpringMVC相关jar包删除，并修改build.gradle：
<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    implementation <span class="token string">'org.springframework:spring-webmvc:4.1.6.RELEASE'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>WebProj2/build.gradle内容相同，不再赘述。</p>
<h3 id="commonprojbuild.gradle">/CommonProj/build.gradle</h3>
<p>内容比较简单。实际构建时会被打成jar包并放在其他模块的WEB-INF/lib中。
<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>
    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'*.jar'</span><span class="token punctuation">)</span>

    <span class="token comment">// Servlet API</span>
    implementation <span class="token string">'javax.servlet:servlet-api:2.5'</span>
    implementation <span class="token string">'javax.servlet.jsp:jsp-api:2.1'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h3 id="gitignore">/.gitignore</h3>
<p>需要让版本控制软件忽略Gradle产生的中间文件：</p>
<pre class="line-numbers language-none"><code class="language-none">.gradle

&#x2F;WebProj1&#x2F;build&#x2F;
&#x2F;WebProj2&#x2F;build&#x2F;
&#x2F;CommonProj&#x2F;build&#x2F;

# 不要忽略gradle-wrapper.jar
!gradle-wrapper.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然gitignore只适用于Git，不过其他版本控制软件要做的事情也是相似的。</p>
<h1 id="验证测试">验证测试</h1>
<p>打开终端，进入到项目所在目录，输入<code>gradle myproj</code>或<code>./gradlew myproj</code>。</p>
<p>如果构建成功，Gradle会生成一个jar包和两个WAR包，分别位于<code>CommonProj/build/libs</code>、<code>WebProj1/build/libs</code>和<code>WebProj2/build/libs</code>。其中CommonProj是jar包，并且会被加到另外两个WAR包中（WEB-INF/lib）。</p>
<p>接下来你需要展开两个WAR包，并与传统方式编译生成出来的内容进行比较。重点检查WEB-INF、WEB-INF/lib和WEB-INF/classes，如果二者一致，就说明打包打出来的内容是对的，否则需要根据实际情况来挪动源代码的文件。</p>
<p>可以确定的是，打出来的包缺少CommonProj模块中的class及配置文件，因为它们都在WEB-INF/lib/CommonProj-1.0.jar中。另外WEB-INF/classes中会缺少config目录，然而事实上也不需要这个目录（将config中的内容摊到WEB-INF/classes下面才是正确的）。如果部署测试之后未发现问题，那么可以忽略这两点差异。</p>
<p>项目能够正确打包，并且部署到Tomcat等中间件之后应用也能正常使用，你就可以把改动提交到版本控制系统，让同事也开始使用Gradle。</p>
<h1 id="其他需求待补完">其他需求（待补完）</h1>
<h2 id="不要改变项目目录结构">不要改变项目目录结构</h2>
<p>考虑到实际生产过程中开发团队的学习成本与切换成本，可能无法要求团队全部切换到Gradle，也不能改变代码目录结构。这样的话Gradle配置文件需要进行以下额外的调整：</p>
<p>根目录的build.gradle： <pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">subprojects <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// 手动指定路径</span>
    sourceSets <span class="token punctuation">&#123;</span>
        main <span class="token punctuation">&#123;</span>
            java <span class="token punctuation">&#123;</span>
                srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span>
            <span class="token punctuation">&#125;</span>

            resources <span class="token punctuation">&#123;</span>
                srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'src/config'</span><span class="token punctuation">]</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        test <span class="token punctuation">&#123;</span>
            java <span class="token punctuation">&#123;</span>
                srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>WebProj1/build.gradle 和 WebProj2/build.gradle 需在文件中加入：
<pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// 手动指定Web文件路径</span>
webAppDirName <span class="token operator">=</span> <span class="token string">'WebRoot'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<p>CommonProj/build.gradle不用调整，然而你仍然需要建立/CommonProj/lib目录，并把CommonProj所需的jar包放进去。</p>
<h2 id="不要将commonproj打成jar包">不要将CommonProj打成jar包</h2>
<p>从上面的项目结构中可以看出，CommonProj中有一些公共的配置文件，将其打成jar包之后可能无法正确加载。为避免这种情况发生，可在打WAR包时将CommonProj的内容展开。</p>
<p>在根目录的build.gradle中进行如下调整： <pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">subprojects <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

    processCommonProj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> excludes <span class="token operator">=</span> null <span class="token operator">-></span>
        war<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">zipTree</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':CommonProj'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>buildDir</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/libs/CommonProj.jar"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            into <span class="token string">'WEB-INF/classes'</span>

            <span class="token comment">// WEB-INF/classes/META-INF 是解压之后出现的多余的东西，需要删除</span>
            exclude <span class="token string">'META-INF/**'</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>excludes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>String s<span class="token punctuation">:</span> excludes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    exclude s
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        war<span class="token punctuation">.</span>rootSpec<span class="token punctuation">.</span>exclude <span class="token string">'CommonProj.jar'</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>在CommonProj/build.gradle中追加： <pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// 将jar包名字固定下来，以便后面处理</span>
jar <span class="token punctuation">&#123;</span>
    archiveName <span class="token operator">=</span> <span class="token string">'CommonProj.jar'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>在两个WebProj的build.gradle中追加： <pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">war <span class="token punctuation">&#123;</span>
    <span class="token function">processCommonProj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p>
<h2 id="运行待补完">运行（待补完）</h2>
<p><code>TODO</code></p>
<h2
id="按不同环境打包不同的配置文件待补完">按不同环境打包不同的配置文件（待补完）</h2>
<p><code>TODO</code></p>
<h1 id="关于idea">关于IDEA</h1>
<p>使用IDEA打开配置好的项目之后，IDEA会发现这是一个Gradle项目，并提示是否“Import”。点击屏幕右下角的“Enable
Import”，并等Sync操作完成后，便可以直接在IDEA中执行Gradle任务。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2018/12/12/switch-to-idea-0/">为什么进行切换</a></li>
<li><a href="/2018/12/13/switch-to-idea-1/">切换的基本操作</a></li>
<li><a href="/2019/01/27/switch-to-idea-2">传统Web项目在IDEA的Project
Structure</a></li>
<li><strong>传统Web项目转为Gradle项目</strong></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>风险提示：请使用正版！</title>
    <url>/2019/08/16/genius-software/</url>
    <content><![CDATA[<p>道理大家都懂，其中的坑大家却不一定都清楚。</p>
<p>在中国，使用盗版软件已经是习以为常的事情。即使你去公安局自首，说自己电脑上装了一堆破解版，警察叔叔也不会把你抓起来，只会把你轰回家。但是请注意，给公司工作就是另一码事了——律师函警告！</p>
<p>希望借本文给大家提个醒，挣钱不易，务必小心！ <span id="more"></span></p>
<h1 id="案例">案例</h1>
<p>在公司上班，使用盗版可能会给自己和公司招来严重后果。</p>
<h2 id="后门安全问题">后门安全问题</h2>
<ul>
<li>2012年1月31日，<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRob21lLmNvbS9odG1sL2l0LzEwMDY4Lmh0bQ==">部分汉化版PuTTY、WinSCP、SSH
Secure等软件存在后门<i class="fa fa-external-link-alt"></i></span>。</li>
<li>2015年，<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW50aXkuY29tL3Jlc3BvbnNlL3hjb2RlZ2hvc3QuaHRtbA==">XcodeGhost事件<i class="fa fa-external-link-alt"></i></span>：中国网络环境问题，促进了恶意版本编程软件的传播。</li>
<li>2016年11月，<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXFuaXUuY29tL3RocmVhdC1hbGVydC8yMTEzNi5odG1s">有人在CSDN等地散布含有勒索软件的PL/SQL
Developer<i class="fa fa-external-link-alt"></i></span>。</li>
</ul>
<h2 id="律师函警告">律师函警告</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2ZpbmFuY2Uuc2luYS5jb20uY24vY2hhbmppbmcvZ3NuZXdzLzIwMTQwODAxLzAxNTAxOTg3OTc4My5zaHRtbA==">公司遭到工商部门“突袭”检查盗版<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRob21lLmNvbS8wLzQxMi80NzYuaHRt">2019年3月，某公司实习生使用盗版Photoshop和字体，使公司陷入诉讼和巨额赔偿<i class="fa fa-external-link-alt"></i></span>。</li>
<li>“版权流氓”苏州思杰马克丁：在网上散布假破解版，查到企业使用后发真律师函；国内代理价格高于官方渠道……被这家代理“污染”的软件列表可见<span class="exturl" data-url="aHR0cDovL3d3dy5tYWtlZGluZy5jb20vcHJvZHVjdHMuaHRtbA==">其官网介绍<i class="fa fa-external-link-alt"></i></span>（注意其中有常用的Photoshop、TeamViewer、Xshell）。</li>
<li><del>
任天堂最强法务部、迪士尼最强法务部、蔡徐坤律师函警告
</del></li>
</ul>
<h1 id="解决方案">解决方案</h1>
<h2 id="破财消灾">破财消灾</h2>
<p>从道理上讲，花钱买正版天经地义，权益遭到侵害，维权也天经地义。如果软件真的在用，其地位不可替代，那么当然应该去买正版（虽然公司不见得能同意花钱），否则吃官司赔钱也是活该。</p>
<p>然而，有些厂商发律师函索要赔偿，更多是为了讹钱，甚至会“放长线钓大鱼”，在你们公司创业阶段视而不见，等你们公司挣到钱了再发律师函。对于这类公司，事先买些正版授权，把钱给够，没准以后用多少盗版他们也会视而不见了。</p>
<h2 id="金盆洗手">金盆洗手</h2>
<p>别急着付钱！</p>
<p>如果软件不是很常用，而且官方喜欢打官司，读完本文之后，尽快把软件和软件的使用痕迹清除掉，或者采取一些防范措施，别让人用技术手段给查出来，成为日后对方发律师函和起诉的证据。</p>
<p>假如真的有律师函发过来，你可以先评估一下他们是真的掌握证据了，还是“敲诈勒索”（有的真是敲诈勒索）。想一想自己早在几个月前就把东西给删得干干净净的，就算各种部门现在马上来突击检查，也查不到任何证据，那么就可以理所当然地不鸟他们了，甚至怼他们一下：你说我们用你家盗版，你的证据呢？（小心反告你们敲诈勒索……）</p>
<h2 id="使用免费开源替代品">使用免费/开源替代品</h2>
<p>钱不是白来的，实在不想花钱的话，也可以使用免费或开源替代品（至少要让别人觉得你有替代品）。</p>
<p>不过需要注意的是，有些软件个人使用免费，商业使用收费。在安装之前，要先阅读许可协议，别看都不看就直接点同意，除非你确定对方厂商懒得管。</p>
<h2 id="加强教育">加强教育</h2>
<p>有新入职员工时，要及时提醒注意版权问题。特别要留意喜欢“折腾”的人，要么要求他们买正版，要么要求使用无版权风险的软件，要么要求放弃个人喜好，使用与开发团队一样的软件（别集体翻车就行）。</p>
<p>除所用软件外，各种资料，例如程序代码、多媒体素材、字体等也要注意版权。要不然的话，即使躲过代理Photoshop的思杰马克丁，可能又会因应用登录页面的一张背景图片<span class="exturl" data-url="aHR0cDovL3d3dy54aW5odWFuZXQuY29tLzIwMTktMDQvMTIvY18xMjEwMTA3Mjg2Lmh0bQ==">让视觉中国找上门<i class="fa fa-external-link-alt"></i></span>（毕竟连国旗国徽的版权都是视觉中国的）。</p>
<p>即使是免费软件，也要到正规渠道下载，不要随便找“绿色版”、“汉化版”。谁知道里头有没有藏着删库（却让你跑不了路）的后门呢？</p>
<h1 id="相关问题">相关问题</h1>
<h2 id="树大招风">树大招风</h2>
<p>除了使用盗版软件，抄袭别人成果也是有风险的：</p>
<ul>
<li>汉芯：<span class="exturl" data-url="aHR0cHM6Ly9uZXdzLm15ZHJpdmVycy5jb20vMS82MTYvNjE2NzM3Lmh0bQ==">被一家装修公司“出卖”<i class="fa fa-external-link-alt"></i></span></li>
<li>银河麒麟：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2lsbGlhbWxvbmcuaW5mby9hcmNoaXZlcy81MDguaHRtbA==">被发现是改版FreeBSD<i class="fa fa-external-link-alt"></i></span>。</li>
<li>红芯浏览器：<span class="exturl" data-url="aHR0cHM6Ly93d3cudGhlcGFwZXIuY24vbmV3c0RldGFpbF9mb3J3YXJkXzIzNTUyMzk=">被发现是换了壳的Chrome<i class="fa fa-external-link-alt"></i></span></li>
<li>木兰编程语言：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRob21lLmNvbS8wLzQ2OS8yMDUuaHRt">改名“素贞编程语言”才更符合其性质<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>未经蔡徐坤本人同意就制作打篮球视频也是有风险的。</p>
<h2
id="在中国没遭到迫害出国之后却吃了牢饭">在中国没遭到迫害，出国之后却吃了牢饭</h2>
<p>本文开头提到，你去公安局自首，警察会把你直接轰回家。然而，换成重视版权的国家，结局会沦为吃官司和吃牢饭。因此，如果你有机会去发达国家，无论是出游、出差还是出逃，建议稍微注意一下。</p>
<p>不过，像非洲那类地方就无所谓了，比起挣多少钱或者用什么软件，你更需要担心自己能不能活着回国。</p>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
  </entry>
  <entry>
    <title>实现一个简单粗暴的Java Web安全过滤器</title>
    <url>/2019/08/25/security-filter/</url>
    <content><![CDATA[<p>对于行业系统来说，如果开发人员水平一般，而且又忙于赶工期，Web安全问题就很容易抛到脑后。然而，在这类系统中，用户输入内容往往是业务相关的，范围可以预测，不会特意输入敏感词语，因此又可以用简单粗暴的方法挡住大部分常见攻击。</p>
<p>在Java应用中，页面加载之前会先经过过滤器（Filter），我们便可以设置一个安全过滤器SecurityFilter，以“宁可错杀一万，不可放过一个”的方式拦截常见攻击，满足基本的安全需求。
<span id="more"></span></p>
<h1 id="框架">框架</h1>
<p>建立SecurityFilter类，假如包名称为com.testcompany.testapp.utils.filter，骨架如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>testcompany<span class="token punctuation">.</span>testapp<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token comment">//import org.springframework.stereotype.Component;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token comment">// @Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HttpServletRequest</span> httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletResponse</span> httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取请求 URL 和 URI</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> uri <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"url: "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"uri: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断是否属于白名单，直接放行</span>

        <span class="token comment">// 各种策略</span>

        <span class="token comment">// 结果</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 正常请求</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 被拦截，转发到报错页面</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 安全过滤器销毁</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码未进行任何拦截，我们将在后面逐步完善拦截规则。</p>
<p>如果你的项目有web.xml，那么需要加入以下内容： <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>SecurityFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.testcompany.testapp.utils.SecurityFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>SecurityFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>如果你的项目没有web.xml，例如SpringBoot项目，那么你需要给SecurityFilter增加相关注解（<span
class="citation" data-cites="Component">@Component</span>）。</p>
<h1 id="具体规则">具体规则</h1>
<h2
id="防止sql注入跨站脚本攻击xss">防止SQL注入、跨站脚本攻击（XSS）</h2>
<p>可考虑采取敏感词的形式来预防SQL注入和XSS攻击。假设敏感词列表（具体词语参见文末）放在了<code>bannedKeywords</code>中，那么可提取GET/POST参数进行匹配：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 获取GET/POST参数</span>
    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> paramMap <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    post_filter<span class="token operator">:</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token operator">:</span> paramMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token operator">:</span> bannedKeywords<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                message <span class="token operator">=</span> <span class="token string">"检测到非法字符【"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"】，请重新输入！"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span> post_filter<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token operator">:</span> bannedKeywords<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        message <span class="token operator">=</span> <span class="token string">"检测到非法字符【"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"】，请重新输入！"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span> post_filter<span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外再通过设置安全相关HTTP Header来加强防御：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 浏览器拒绝响应MIME类型不正确的资源</span>
httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-Content-Type-Options"</span><span class="token punctuation">,</span> <span class="token string">"nosniff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 内容安全策略（CSP）设置</span>
<span class="token comment">// 参见：http://www.ruanyifeng.com/blog/2016/09/csp.html</span>
<span class="token comment">// httpResponse.setHeader("Content-Security-Policy", "default-src 'self'");</span>

<span class="token comment">// 浏览器防XSS设置</span>
<span class="token comment">// 参见：https://www.freebuf.com/articles/web/138769.html</span>
httpResponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-XSS-Protection"</span><span class="token punctuation">,</span> <span class="token string">"1; mode=block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是：</p>
<ol type="1">
<li>敏感词机制非常容易导致误判（例如拦截<code>AND</code>会把正常的英语内容也给拦截掉），需要增加例外机制，并结合业务进行充分测试。</li>
<li>敏感词机制无法防止所有注入，例如攻击者仍然可以通过字符编码、加空格、加回车、加注释等方式来绕过拦截。</li>
<li>上面GET/POST参数检测无法检测Restful
API和JSON请求。如果业务有这两种请求，需另外写代码进行处理。</li>
</ol>
<h2 id="防止跨站请求伪造csrf">防止跨站请求伪造（CSRF）</h2>
<p>可以通过两种方式预防CSRF攻击，一个是校验Referer，另一个是在表单中设置并验证token。对于拦截器来说，前一种实现方式比较简单。</p>
<p>假如Referer域名白名单为<code>hostWhiteList</code>，那么代码可以写成：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> referer <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept <span class="token operator">&amp;&amp;</span> referer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> domain <span class="token operator">=</span> referer<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"^https?:\\/\\/(.*?)\\/.*"</span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hostWhiteList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        message <span class="token operator">=</span> <span class="token string">"检测到未经授权的访问，请从官方网站登录系统，并检查操作是否正常！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了防止非法提交，可进一步考虑限制POST请求中必须有合法Referer。</p>
<h2 id="host头攻击">Host头攻击</h2>
<p>此攻击主要针对虚拟主机，换句话说，如果服务器上只有一个站点，Host头攻击实际上没有意义。然而，为了应付甲方检查，可能需要再加一遍限制：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> host <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept <span class="token operator">&amp;&amp;</span> host <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hostWhiteList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    message <span class="token operator">=</span> <span class="token string">"检测到未授权访问，请重新从官方网站登录系统！"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="点击劫持clickjacking漏洞">点击劫持（Clickjacking）漏洞</h2>
<p>加一句话即可：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 避免点击劫持漏洞</span>
httpResponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-Frame-Options"</span><span class="token punctuation">,</span> <span class="token string">"sameorigin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="防止未登录访问防止越权访问">防止未登录访问、防止越权访问</h2>
<p>应用需要防止用户未登录就直接访问特定功能的URL。由于不同认证组件的管理方式不同，本文不再展开讨论。</p>
<p>在校验Cookie和会话时，需留意生产环境是否为集群。若配置负载均衡等设备，同一用户的请求不见得会被同一台服务器接收，实现会话机制时要考虑会话共享问题（例如配置Redis服务器）。</p>
<h2 id="cookie加固">Cookie加固</h2>
<p>Cookie需设置为HttpOnly、Secure，防止前台通过JavaScript获取到Cookie内容。</p>
<p>使用比较新的中间件，Cookie应该已经是HttpOnly，或者可以很容易设置成HttpOnly。然而，如果Tomcat等软件太老，你需要手工修改Cookie：
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> sessionId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> header <span class="token operator">=</span> <span class="token string">"JSESSIONID="</span> <span class="token operator">+</span> sessionId <span class="token operator">+</span> <span class="token string">"; Secure; HttpOnly; Path=/"</span><span class="token punctuation">;</span>
    httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="使用http动词篡改的认证旁路">“使用HTTP动词篡改的认证旁路”</h2>
<p>使用AppScan等扫描软件进行扫描，可能会出现这个问题。解决起来很简单，只留一些常用的动词（GET、POST、OPTIONS等），其余全部拦截。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> method <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"GET,POST,HEAD,OPTIONS,PUT,DELETE"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    message <span class="token operator">=</span> <span class="token string">"检测到未授权的请求方式！"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果你的系统使用了PUT、DELETE等浏览器不支持的动词，需要分两种情况讨论：</p>
<ul>
<li>浏览器页面：框架往往会进行一些特殊处理（例如将实际请求方式保存在name为_method的隐藏域中），使浏览器以POST方式提交用户请求。这样的话不需要特意放行PUT和DELETE。</li>
<li>后台接口：由于调用方不是浏览器，可直接使用相应动词，此时过滤器需放行PUT和DELETE等动词。</li>
</ul>
<h2 id="限制指定ip访问-获取用户ip地址">限制指定IP访问 /
获取用户IP地址</h2>
<p>不建议在Java层面进行控制。下面只给出获取用户IP的方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取用户 IP</span>
<span class="token comment">// 注意：</span>
<span class="token comment">// （1）X-Real-IP需要反向代理软件进行配合设置才能获取到。</span>
<span class="token comment">//      如果反向代理软件配置正确，其值可被信任。</span>
<span class="token comment">// （2）X-Forwarded-For记录了用户真实IP，但该Header能被用户伪造，不可信任。</span>
<span class="token comment">// （3）getRemoteAddr返回的是直接访问服务器的IP地址。虽然取值可信，</span>
<span class="token comment">//     但是配置反向代理、负载均衡等设备之后，getRemoteAddr将返回网络设备IP，而不是用户IP。</span>
<span class="token comment">// 建议：设置nginx等软件，将用户真实IP记录在X-Real-IP头中。</span>
<span class="token class-name">String</span> ip <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Real-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ip <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// X-Forwarded-For中可能有多个IP地址，第一个IP是用户真实IP。</span>
        ip <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ip: "</span> <span class="token operator">+</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="限制指定浏览器访问">限制指定浏览器访问</h2>
<p>如果应用不应该直接通过浏览器访问，可对浏览器UA进行限制。例如仅允许微信浏览器访问：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取用户 User-Agent</span>
<span class="token comment">// 注意：用户可以篡改User-Agent，伪装成各种浏览器</span>
<span class="token class-name">String</span> ua <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ua: "</span> <span class="token operator">+</span> ua<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept <span class="token operator">&amp;&amp;</span> ua <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ua<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"MicroMessenger"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    message <span class="token operator">=</span> <span class="token string">"请使用微信访问本页面！"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外，出于友好性考虑，可将报错页面换成微信公众号二维码，以便用户扫描关注。</p>
<h2 id="直接放行">直接放行</h2>
<p>有些文件格式完全无害，例如服务器本身提供的js、css等静态资源，可考虑直接放行此类扩展名。</p>
<p>由于重定向之后会再次经过SecurityFilter，而所有已经拦截的请求都重定向到了报错页面，所以报错页面也需要放行，不要再将报错页面forward到报错页面，导致死循环。</p>
<h1 id="注意事项">注意事项</h1>
<p>本过滤器功能简单粗暴，然而仍然会有漏网之鱼，例如通过加注释符号便可绕过SQL注入拦截。</p>
<p>最有效的解决方案，还是要求开发人员平时就注重安全（例如SQL使用参数绑定、页面渲染时进行HTML转义等），测试人员也针对安全问题进行测试，在上线之前就尽量消除隐患。</p>
<h1 id="完整代码">完整代码</h1>
<p>以Spring框架为例，将上述代码组合到一起，并加入yml配置文件支持，完整代码如下：</p>
<p>SecurityFilter.java： <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>testcompany<span class="token punctuation">.</span>testapp<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ClassPathResource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>snakeyaml<span class="token punctuation">.</span></span><span class="token class-name">Yaml</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>snakeyaml<span class="token punctuation">.</span>error<span class="token punctuation">.</span></span><span class="token class-name">YAMLException</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SecurityFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 系统安全参数设置</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SecurityConfig</span> config <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">// 从配置文件读取系统安全参数配置</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Yaml</span> yaml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Yaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"security.yml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            config <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">loadAs</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 报错页面加入安全白名单</span>
            config<span class="token punctuation">.</span><span class="token function">getUriWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getErrorPageUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">YAMLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"加载安全设置失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HttpServletRequest</span> httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletResponse</span> httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"系统安全设置加载失败，请检查错误并重新启动系统！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 获取请求 URL 和 URI</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> uri <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"url: "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"uri: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断是否属于不过滤的白名单URI</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getUriWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 判断是否为白名单扩展名</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> extName <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>extWhiteList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">boolean</span> intercept <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token comment">// 指定输入/输出字符编码</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>encoding <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
            httpResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 判断用户是否登录（略）</span>

        <span class="token comment">// 验证用户权限（略）</span>

        <span class="token comment">// 增加Cookie安全性：添加HttpOnly和Secure属性，防止Cookie被通过js非法获取</span>
        <span class="token comment">// 注意：一般是很老的中间件才需要手动设置</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> sessionId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> header <span class="token operator">=</span> <span class="token string">"JSESSIONID="</span> <span class="token operator">+</span> sessionId <span class="token operator">+</span> <span class="token string">"; Secure; HttpOnly; Path=/"</span><span class="token punctuation">;</span>
            httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 避免点击劫持漏洞</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-Frame-Options"</span><span class="token punctuation">,</span> <span class="token string">"sameorigin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 跨域资源共享CORS</span>
        <span class="token class-name">String</span> origin <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getCorsWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
                httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"POST,GET,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"86400"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 浏览器拒绝响应MIME类型不正确的资源</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-Content-Type-Options"</span><span class="token punctuation">,</span> <span class="token string">"nosniff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 内容安全策略（CSP）设置</span>
        <span class="token comment">// 参见：http://www.ruanyifeng.com/blog/2016/09/csp.html</span>
        <span class="token comment">// httpResponse.setHeader("Content-Security-Policy", "default-src 'self'");</span>

        <span class="token comment">// 浏览器防XSS设置</span>
        <span class="token comment">// 参见：https://www.freebuf.com/articles/web/138769.html</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-XSS-Protection"</span><span class="token punctuation">,</span> <span class="token string">"1; mode=block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// GET/POST请求参数过滤</span>
        <span class="token comment">// 主要用于防止各类注入（XSS、SQL注入等）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 获取GET参数，实际上不需要</span>
            <span class="token comment">// String queryString = httpRequest.getQueryString();</span>
            <span class="token comment">// MultiValueMap&lt;String, String> parameters = UriComponentsBuilder.fromUriString(uri).build().getQueryParams();</span>

            <span class="token comment">// 获取GET/POST参数</span>
            <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> paramMap <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            post_filter<span class="token operator">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token operator">:</span> paramMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getBannedKeywords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        message <span class="token operator">=</span> <span class="token string">"检测到非法字符【"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"】，请重新输入！"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span> post_filter<span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> whiteList <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getKeywordWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getBannedKeywords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>whiteList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> whiteList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                                message <span class="token operator">=</span> <span class="token string">"检测到非法字符【"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"】，请重新输入！"</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span> post_filter<span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">// 注意：如使用Restful风格的URL，还需要考虑检查url本身，并需要防止误判</span>
            <span class="token comment">// for (String keyword: config.getBannedKeywords()) &#123;</span>
            <span class="token comment">//     if (uri.toLowerCase().contains(keyword)) &#123;</span>
            <span class="token comment">//         intercept = true;</span>
            <span class="token comment">//         message = "检测到非法字符【" + keyword + "】，请重新输入！";</span>
            <span class="token comment">//         break;</span>
            <span class="token comment">//     &#125;</span>
            <span class="token comment">// &#125;</span>

            <span class="token comment">// 注意：上面无法检查JSON格式内容，如有需要，可在下面代码基础上进行完善</span>
            <span class="token comment">// String contentType = httpRequest.getHeader("Content-Type");</span>
            <span class="token comment">// if (contentType != null &amp;&amp; contentType.toLowerCase().contains("json")) &#123;</span>
            <span class="token comment">//     // 获取JSON提交内容</span>
            <span class="token comment">//     StringBuilder jsonStr = new StringBuilder();</span>
            <span class="token comment">//     try &#123;</span>
            <span class="token comment">//         BufferedReader reader = request.getReader();</span>
            <span class="token comment">//         String line;</span>
            <span class="token comment">//         while ((line = reader.readLine()) != null) &#123;</span>
            <span class="token comment">//             jsonStr.append(line);</span>
            <span class="token comment">//         &#125;</span>
            <span class="token comment">//     &#125; catch (IOException e) &#123;</span>
            <span class="token comment">//         logger.error("JSON读取错误", e);</span>
            <span class="token comment">//     &#125;</span>

            <span class="token comment">//     // 测试是否为合法JSON对象</span>
            <span class="token comment">//     String json = jsonStr.toString();</span>
            <span class="token comment">//     try &#123;</span>
            <span class="token comment">//         JSON.parse(json);</span>
            <span class="token comment">//     &#125; catch (JSONException e) &#123;</span>
            <span class="token comment">//         intercept = true;</span>
            <span class="token comment">//         message = "无效JSON";</span>
            <span class="token comment">//     &#125;</span>

            <span class="token comment">//     // 检查是否包含敏感字符</span>
            <span class="token comment">//     for (String keyword: config.getBannedKeywords()) &#123;</span>
            <span class="token comment">//         if ("\"".equals(keyword) || "'".equals(keyword)) &#123;</span>
            <span class="token comment">//             continue;</span>
            <span class="token comment">//         &#125;</span>
            <span class="token comment">//         if (json.toLowerCase().contains(keyword)) &#123;</span>
            <span class="token comment">//             intercept = true;</span>
            <span class="token comment">//             message = "检测到非法字符【" + keyword + "】，请重新输入！";</span>
            <span class="token comment">//             break;</span>
            <span class="token comment">//         &#125;</span>
            <span class="token comment">//     &#125;</span>
            <span class="token comment">// &#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// "使用HTTP动词篡改的认证旁路"</span>
        <span class="token comment">// 该策略用于应对甲方的安全扫测，实际无安全风险。</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"GET,POST,HEAD,OPTIONS,PUT,DELETE"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            message <span class="token operator">=</span> <span class="token string">"检测到未授权的请求方式！"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// Host头攻击拦截</span>
        <span class="token comment">// 该策略用于应对甲方的安全扫测，实际安全风险不大。</span>
        <span class="token class-name">String</span> host <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept <span class="token operator">&amp;&amp;</span> host <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">getHostWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            message <span class="token operator">=</span> <span class="token string">"检测到未授权访问，请重新从官方网站登录系统！"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// Referer拦截</span>
        <span class="token comment">// 该策略主要用于预防CSRF攻击，并可在一定程度上预防盗链</span>
        <span class="token comment">// 注意：</span>
        <span class="token comment">// （1）Referer内容可被用户伪造</span>
        <span class="token comment">// （2）仅凭Referer拦截的话，防盗链效果有限。如果想有效地防盗链，需要再采取其他措施，这里不再展开讨论。</span>
        <span class="token class-name">String</span> referer <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>referer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">String</span> domain <span class="token operator">=</span> referer<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"^https?:\\/\\/(.*?)\\/.*"</span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">getHostWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    message <span class="token operator">=</span> <span class="token string">"检测到未经授权的访问，请从官方网站登录系统，并检查操作是否正常！"</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 要求POST请求中包含Referer，防止非法提交表单</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    intercept <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    message <span class="token operator">=</span> <span class="token string">"检测到未经授权的访问，请从官方网站登录系统，并检查操作是否正常！"</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 结果</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>intercept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 正常请求</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 被拦截，转发到报错页面</span>
            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getErrorPageUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 安全配置文件格式</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> uriWhiteList<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> extWhiteList<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hostWhiteList<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> bannedKeywords<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> keywordWhiteList<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> corsWhiteList<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> encoding<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> errorPageUrl<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getUriWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> uriWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUriWhiteList</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> uriWhiteList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uriWhiteList <span class="token operator">=</span> uriWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getExtWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> extWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExtWhiteList</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> extWhiteList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>extWhiteList <span class="token operator">=</span> extWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getHostWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> hostWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHostWhiteList</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hostWhiteList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>hostWhiteList <span class="token operator">=</span> hostWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getBannedKeywords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> bannedKeywords<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBannedKeywords</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> bannedKeywords<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bannedKeywords <span class="token operator">=</span> bannedKeywords<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getKeywordWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> keywordWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKeywordWhiteList</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> keywordWhiteList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>keywordWhiteList <span class="token operator">=</span> keywordWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCorsWhiteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> corsWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorsWhiteList</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> corsWhiteList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>corsWhiteList <span class="token operator">=</span> corsWhiteList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> encoding<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token class-name">String</span> encoding<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">=</span> encoding<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorPageUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> errorPageUrl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setErrorPageUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorPageUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>errorPageUrl <span class="token operator">=</span> errorPageUrl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>security.yml: <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 输入/输出字符编码</span>
<span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>

<span class="token comment"># 报错页面</span>
<span class="token key atrule">errorPageUrl</span><span class="token punctuation">:</span> /error

<span class="token comment"># 不拦截的URI的白名单</span>
<span class="token key atrule">uriWhiteList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> /error

<span class="token comment"># 不拦截的扩展名</span>
<span class="token key atrule">extWhiteList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> jpg
  <span class="token punctuation">-</span> gif
  <span class="token punctuation">-</span> png
  <span class="token punctuation">-</span> zip
  <span class="token punctuation">-</span> rar
  <span class="token punctuation">-</span> pdf
  <span class="token punctuation">-</span> doc
  <span class="token punctuation">-</span> docx
  <span class="token punctuation">-</span> xls
  <span class="token punctuation">-</span> xlsx
  <span class="token punctuation">-</span> ppt
  <span class="token punctuation">-</span> pptx
  <span class="token punctuation">-</span> js
  <span class="token punctuation">-</span> css

<span class="token comment"># 可合法访问域名白名单（小写；不写协议；80和443不需要写端口）</span>
<span class="token comment"># 用于Host和Referer校验</span>
<span class="token comment"># 注意把自己电脑、测试环境、生产环境等都配置好</span>
<span class="token key atrule">hostWhiteList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span>
  <span class="token punctuation">-</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
  <span class="token punctuation">-</span> www.yourdomain.com

<span class="token comment"># XSS、SQL注入字符黑名单（小写）</span>
<span class="token comment"># 注意：因绕过注入过滤方法很多，安全负责人需持续关注</span>
<span class="token key atrule">bannedKeywords</span><span class="token punctuation">:</span>
  <span class="token comment"># 防SQL注入</span>
  <span class="token comment"># 各种引号</span>
  <span class="token punctuation">-</span> <span class="token string">"'"</span>
  <span class="token punctuation">-</span> <span class="token string">'"'</span>
  <span class="token punctuation">-</span> <span class="token string">"%uff07"</span>
  <span class="token punctuation">-</span> <span class="token string">"%u0022"</span>
  <span class="token punctuation">-</span> <span class="token string">"%u0027"</span>
  <span class="token punctuation">-</span> <span class="token string">"%22"</span>
  <span class="token punctuation">-</span> <span class="token string">"%27"</span>
  <span class="token punctuation">-</span> <span class="token string">"%c0%a7"</span>
  <span class="token punctuation">-</span> <span class="token string">"%c0%27"</span>

  <span class="token comment"># SQL关键字</span>
  <span class="token punctuation">-</span> <span class="token string">"@@"</span>
  <span class="token punctuation">-</span> <span class="token string">"select "</span>
  <span class="token punctuation">-</span> <span class="token string">" from "</span>
  <span class="token punctuation">-</span> <span class="token string">" where "</span>
  <span class="token punctuation">-</span> <span class="token string">"delete "</span>
  <span class="token punctuation">-</span> <span class="token string">"update "</span>
  <span class="token punctuation">-</span> <span class="token string">"exec "</span>
  <span class="token punctuation">-</span> <span class="token string">"drop "</span>
  <span class="token punctuation">-</span> <span class="token string">"create "</span>
  <span class="token punctuation">-</span> <span class="token string">"alter "</span>
  <span class="token punctuation">-</span> <span class="token string">" union "</span>
  <span class="token punctuation">-</span> <span class="token string">" or "</span>      <span class="token comment"># 注意容易误判</span>
  <span class="token punctuation">-</span> <span class="token string">"+or+"</span>
  <span class="token punctuation">-</span> <span class="token string">"+or "</span>
  <span class="token punctuation">-</span> <span class="token string">" or+"</span>
  <span class="token punctuation">-</span> <span class="token string">" and "</span>     <span class="token comment"># 注意容易误判</span>
  <span class="token punctuation">-</span> <span class="token string">"+and+"</span>
  <span class="token punctuation">-</span> <span class="token string">"+and "</span>
  <span class="token punctuation">-</span> <span class="token string">" and+"</span>
  <span class="token punctuation">-</span> <span class="token string">" having "</span>
  <span class="token punctuation">-</span> <span class="token string">" sys"</span>
  <span class="token punctuation">-</span> <span class="token string">" sp_"</span>
  <span class="token punctuation">-</span> <span class="token string">"db_name"</span>
  <span class="token punctuation">-</span> <span class="token string">"db_id"</span>
  <span class="token punctuation">-</span> <span class="token string">"host_name"</span>
  <span class="token punctuation">-</span> <span class="token string">"host_id"</span>

  <span class="token comment"># 防XSS</span>
  <span class="token comment"># 标签</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;a"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;audio"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;iframe"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;img"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;input"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;noscript"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;object"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;script"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;style"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt;title"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; a"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; audio"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; iframe"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; img"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; input"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; noscript"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; object"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; script"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; style"</span>
  <span class="token punctuation">-</span> <span class="token string">"&lt; title"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3ca"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3caudio"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3ciframe"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3cimg"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3cinput"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3cnoscript"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3cobject"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3cscript"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3cstyle"</span>
  <span class="token punctuation">-</span> <span class="token string">"%3ctitle"</span>
  <span class="token punctuation">-</span> <span class="token string">" src="</span>
  <span class="token punctuation">-</span> <span class="token string">"%20src="</span>
  <span class="token punctuation">-</span> <span class="token string">"style="</span>
  <span class="token punctuation">-</span> <span class="token string">"style ="</span>
  <span class="token punctuation">-</span> <span class="token string">"style%20="</span>
  <span class="token punctuation">-</span> <span class="token string">"&amp;lt;"</span>
  <span class="token punctuation">-</span> <span class="token string">"&amp;gt;"</span>
  <span class="token punctuation">-</span> <span class="token string">"&amp;amp;lt;"</span>
  <span class="token punctuation">-</span> <span class="token string">"&amp;amp;gt;"</span>
  <span class="token punctuation">-</span> <span class="token string">"%0a"</span>
  <span class="token punctuation">-</span> <span class="token string">"%0d"</span>

  <span class="token comment"># JavaScript</span>
  <span class="token punctuation">-</span> <span class="token string">"onclick"</span>
  <span class="token punctuation">-</span> <span class="token string">"ondblclick"</span>
  <span class="token punctuation">-</span> <span class="token string">"onmousedown"</span>
  <span class="token punctuation">-</span> <span class="token string">"onmousemove"</span>
  <span class="token punctuation">-</span> <span class="token string">"onmouseout"</span>
  <span class="token punctuation">-</span> <span class="token string">"onmouseover"</span>
  <span class="token punctuation">-</span> <span class="token string">"onmouseup"</span>
  <span class="token punctuation">-</span> <span class="token string">"onkeydown"</span>
  <span class="token punctuation">-</span> <span class="token string">"onkeyup"</span>
  <span class="token punctuation">-</span> <span class="token string">"onkeypress"</span>
  <span class="token punctuation">-</span> <span class="token string">"onchange"</span>
  <span class="token punctuation">-</span> <span class="token string">"onselect"</span>
  <span class="token punctuation">-</span> <span class="token string">"onfocus"</span>
  <span class="token punctuation">-</span> <span class="token string">"onblur"</span>
  <span class="token punctuation">-</span> <span class="token string">"onerror"</span>
  <span class="token punctuation">-</span> <span class="token string">"onhelp"</span>
  <span class="token punctuation">-</span> <span class="token string">"onload"</span>
  <span class="token punctuation">-</span> <span class="token string">"onunload"</span>
  <span class="token punctuation">-</span> <span class="token string">"javascript"</span>
  <span class="token punctuation">-</span> <span class="token string">"vbscript"</span>
  <span class="token punctuation">-</span> <span class="token string">"jscript"</span>
  <span class="token punctuation">-</span> <span class="token string">"window."</span>
  <span class="token punctuation">-</span> <span class="token string">"window["</span>
  <span class="token punctuation">-</span> <span class="token string">"document."</span>
  <span class="token punctuation">-</span> <span class="token string">".do("</span>
  <span class="token punctuation">-</span> <span class="token string">".do ("</span>
  <span class="token punctuation">-</span> <span class="token string">".do%20("</span>
  <span class="token punctuation">-</span> <span class="token string">"expression("</span>
  <span class="token punctuation">-</span> <span class="token string">"expression ("</span>
  <span class="token punctuation">-</span> <span class="token string">"expression%20("</span>
  <span class="token punctuation">-</span> <span class="token string">"eval("</span>
  <span class="token punctuation">-</span> <span class="token string">"eval ("</span>
  <span class="token punctuation">-</span> <span class="token string">"eval%20("</span>
  <span class="token punctuation">-</span> <span class="token string">"function("</span>
  <span class="token punctuation">-</span> <span class="token string">"function ("</span>
  <span class="token punctuation">-</span> <span class="token string">"function%20("</span>
  <span class="token punctuation">-</span> <span class="token string">"=>"</span>

  <span class="token comment"># 恶意脚本（应付检查的成分更多一些）</span>
  <span class="token punctuation">-</span> <span class="token string">".bak"</span>
  <span class="token punctuation">-</span> <span class="token string">".php"</span>
  <span class="token punctuation">-</span> <span class="token string">".asp"</span>
  <span class="token punctuation">-</span> <span class="token string">".source"</span>

  <span class="token comment"># 其他注入</span>
  <span class="token punctuation">-</span> <span class="token string">"$&#123;"</span>
  <span class="token punctuation">-</span> <span class="token string">"#&#123;"</span>


<span class="token comment"># 防注入例外字段名单</span>
<span class="token comment"># 例如公司英文名字段（company_name）中出现"联合跨国公司"，英文名中带有" UNION "，可加入例外）</span>
<span class="token key atrule">keywordWhiteList</span><span class="token punctuation">:</span>
  <span class="token key atrule">company_name</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">" union "</span>
    <span class="token punctuation">-</span> <span class="token string">" and "</span>

<span class="token comment"># 允许跨域资源共享白名单（需要完整URL）</span>
<span class="token key atrule">corsWhiteList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//www.theirdomain.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>pom.xml： <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.52<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>snakeyaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>build.gradle： <pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    implementation <span class="token string">'org.apache.commons:commons-lang3'</span>
    implementation <span class="token string">'com.alibaba:fastjson:1.2.52'</span>
    implementation <span class="token string">'org.yaml:snakeyaml:1.25'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>并不简单的基础开发工作（三）：信息录入表单</title>
    <url>/2019/09/21/edit-page/</url>
    <content><![CDATA[<p>本文继续以“学生信息管理系统”为例，讲述信息录入表单设计与开发中的一些问题。
<span id="more"></span></p>
<h1 id="需求">需求</h1>
<p>在<a
href="/2019/02/09/list-page/">前一篇文章所需功能</a>的基础上，实现学生信息录入页面：</p>
<table>
<tbody>
<tr>
<td>
身份证号码：
</td>
<td>
<input type="text">
</td>
<td rowspan="5" style="text-align: center;">
<img width="150" src="/img/2019-09-21-edit-page/photo.png">
<a class="btn" href="#"><i class="fa fa-arrow-circle-up fa-fw"></i> 上传照片</a>
</td>
</tr>
<tr>
<td>
姓名：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td>
性别：
</td>
<td>
<input type="radio" name="gender" id="male">
<label for="male">男</label>
<input type="radio" name="gender" id="female">
<label for="female">女</label>
</td>
</tr>
<tr>
<td>
民族：
</td>
<td>
<select><option>请选择</option></select>
</td>
</tr>
<tr>
<td>
户籍地址：
</td>
<td>
<select><option>请选择</option></select><select><option>--</option></select><select><option>--</option></select>
</td>
</tr>
<tr>
<td>
出生日期：
</td>
<td colspan="2">
<input type="text">年<input type="text">月<input type="text">日
</td>
</tr>
<tr>
<td>
学院：
</td>
<td colspan="2">
<select><option>请选择</option></select>
</td>
</tr>
<tr>
<td>
班级：
</td>
<td colspan="2">
<input type="text">
</td>
</tr>
<tr>
<td>
学号：
</td>
<td colspan="2">
<input type="text">
</td>
</tr>
<tr>
<td>
联系电话：
</td>
<td colspan="2">
<input type="text">
</td>
</tr>
<tr>
<td>
未来意向：
</td>
<td colspan="2">
<select><option>请选择</option></select>
</td>
</tr>
<tr>
<td>
荣誉或奖励：
</td>
<td colspan="2">
<textarea></textarea>
</td>
</tr>
<tr>
<td>
所受处分：
</td>
<td colspan="2">
<textarea></textarea>
</td>
</tr>
</tbody>
</table>
<button type="button">
保存
</button>
<h1 id="原理">原理</h1>
<p>当用户点击“保存”按钮时，浏览器会将表单输入内容发送给后台，后台接收到数据（通常由框架实现）之后，需要进行一些校验，校验通过后，将输入内容INSERT到数据库中。</p>
<p>除了新增内容，用户有时需要对现有内容进行修改。这时候需要由列表页面向表单页面传入现有内容的id。表单页面加载之前，需根据此id去数据库读取记录，并将数据库内容展示到用户页面中。当用户点击保存时，除了页面输入内容，此id也要传到后台，这样后台才能得知用户是修改已有记录并执行UPDATE操作，而不是增加新记录。</p>
<h1 id="设计方面的问题">设计方面的问题</h1>
<h2 id="自由输入">自由输入</h2>
<p>能做成选择题的地方就不要做成填空题！</p>
<p>如果把可以做成选择题的地方做成填空题，让用户自由输入，会难以规范输入内容，给后续统计、分析等工作带来麻烦。例如填写地址，同样是山东莱芜（莱芜已并入山东省会济南），用户可以填成：</p>
<ul>
<li>莱芜</li>
<li>莱芜市</li>
<li>山东莱芜</li>
<li>山东省莱芜市</li>
<li>山东莱芜市</li>
<li>山东省莱芜</li>
<li>山东省济南市莱芜区</li>
<li>山东省济南市来无区（不小心打错字了）</li>
<li>山东省济南市莱城区（写成了旧地名，还写错了）</li>
<li>济南市莱芜区</li>
<li>山东 莱芜</li>
<li>山東省濟南市萊蕪區（忘把繁体字开关关掉了）</li>
<li>……</li>
</ul>
<h2 id="页面布局">页面布局</h2>
<p>录入表单是一件令人不爽的事情，操作时间长了，很容易陷入疲劳。</p>
<p>如果页面摆放凌乱，该对齐的地方不对齐，字体、字号、间距不一致，用户肯定感到不爽。就算有对齐，各页面风格不一致（甚至同一页面内部风格就不一致）也会让人迷惑。</p>
<p>如果需要录入的字段很多，页面应适当分组，让用户有“喘气”的时间，例如：</p>
<table>
<tbody>
<tr>
<th colspan="2">
基本信息
</th>
</tr>
<tr>
<td>
身份证号码：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td>
姓名：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td>
性别：
</td>
<td>
<input type="radio" name="gender" id="male">
<label for="male">男</label>
<input type="radio" name="gender" id="female">
<label for="female">女</label>
</td>
</tr>
<tr>
<td colspan="2">
...
</td>
</tr>
<tr>
<th colspan="2">
学籍信息
</th>
</tr>
<tr>
<td>
学院：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td>
班级：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td>
学号：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td colspan="2">
...
</td>
</tr>
<tr>
<th colspan="2">
学生个人发展信息
</th>
</tr>
<tr>
<td>
未来意向：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td colspan="2">
...
</td>
</tr>
</tbody>
</table>
<p>或者</p>
<table>
<tbody>
<tr>
<td colspan="2" style="text-align: center;">
<span
style="border: 1px solid black; border-radius: 50px; width: 30px; height: 30px; display: inline-block; color: white; background-color: black;">1</span>
基本信息 → <span
style="border: 1px solid black; border-radius: 50px; width: 30px; height: 30px; display: inline-block;;">2</span>
学籍信息 → <span
style="border: 1px solid black; border-radius: 50px; width: 30px; height: 30px; display: inline-block;">3</span>
学生发展情况
</td>
</tr>
<tr>
<td>
身份证号码：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td>
姓名：
</td>
<td>
<input type="text">
</td>
</tr>
<tr>
<td colspan="2">
...
</td>
</tr>
<tr>
<th colspan="2" style="text-align: right;">
<a class="btn" href="#"><i class="fa fa-arrow-circle-right fa-fw"></i> 下一步</a>
</th>
</tr>
</tbody>
</table>
<h2 id="选填与必填">选填与必填</h2>
<p>如果页面既有必填项，也有选填项，应明确告知用户，这样用户就能及时把必填项填好。如果用户点提交按钮的时候才知道页面开头有个东西是必填项，而且需要自己翻到页面开头把东西填好，心情一定会非常差。</p>
<p>区分必填和选填也有一些技巧，例如：</p>
<ul>
<li>全部为必填项时，不需要特意告知用户字段必填。可以用校验代替。</li>
<li>必填项比选填项多时，选填项提示<code>（选填）</code>。</li>
<li>选填项比必填项多时，必填项提示<code>(*)</code>。</li>
<li>全部是选填项时，需要在业务层面考虑一下必要性。如果确实需要，在页面顶部显眼位置给出提示。</li>
</ul>
<p>排布字段时，尽量把必填项放前面，选填项放后面。</p>
<h2 id="不必要的字段">不必要的字段</h2>
<p>尽量减少字段数量。如果字段在业务上没有意义，而技术上又是必需的（例如id、数据有效性等），那么不要暴露给用户，放到后台处理。</p>
<p>常用字段可以提供默认值，例如“民族”默认值可以设置成“汉族”（通常是汉族人多——如果不是民族学校的话）。能自动填写的字段也尽量做成自动填写，例如自动带出历史数据，或者在填好“身份证号”之后，由系统自动填写“生日”和“性别”。</p>
<h2 id="提示信息">提示信息</h2>
<p>提示信息应该简单、明确，并且措辞要考虑实际业务场景，避免产生歧义。举一些不好的例子：</p>
<ul>
<li><code>请输入姓名（必填）：[    ]</code>（啰嗦，<code>姓名(*)：</code>就够了）</li>
<li><code>电话号（格式：xxx-xxxxxxx）：[     ]</code>（应当用input标签的placeholder代替）</li>
<li><code>类型：[     ]</code>（“类型”、“情况”等词语语意含糊，容易产生歧义，除非业务本身就这么叫）</li>
</ul>
<p>对于用户容易犯错误的地方：</p>
<ul>
<li>如果能由程序“消化”，例如输入数据包含空格，那么默默地“消化”即可。</li>
<li>否则给加个显眼的提示，例如提示“2019级”和“2019届”的区别。</li>
</ul>
<p>“表单填写注意事项”要放在醒目位置，用醒目的样式书写，以便引起用户重视。许多人经常不在乎注意事项，所以行文更要挑重点，避免占篇幅。值得注意但能让用户在填写时顺便留意的事情可以交给校验处理。</p>
<h2 id="下一个">“下一个”</h2>
<p>需要考虑一下业务场景：在实际操作时，用户需要录入的数据多吗？</p>
<p>如果数据量比较多，那么建议给用户加个“下一个”按钮，录完一个就直接进下一个（当然别忘了把数据给保存好），节约时间。数量越多，节约效果越好。</p>
<h1 id="实现方面的问题">实现方面的问题</h1>
<h2 id="权限问题">权限问题</h2>
<p>在读取数据和保存数据时应对用户权限进行验证，防止读取或修改无权操作的记录。</p>
<p>假如编辑的URL是<code>http://127.0.0.1:8080/student/edit/3</code>，而数据库id=2的记录是其他人录入的，我们无权操作，那么在浏览器输入<code>http://127.0.0.1:8080/student/edit/2</code>之后就不应该把数据库里的数据查出来，否则就是一个严重的安全漏洞。</p>
<h2 id="重复提交问题">重复提交问题</h2>
<p>开发环境的网络往往非常好，点完按钮就能跳转到操作成功的页面。但是，用户的网络不一定非常好，他们可能急于操作，担心系统保存不上而反复点击提交按钮，这样会产生多条提交的请求，系统可能也会产生多条相同记录。</p>
<p>这类问题有两种解决方法：</p>
<p>一种是在表单中设置隐藏的token，每次进入表单都生成不同的token。一旦重复提交，系统会发现token已经无效而拒绝进一步操作。有一种常见的Web攻击方式是跨站请求伪造攻击（CSRF），Web框架通常会提供基于token的解决方案，顺便就把重复提交问题给解决了。</p>
<p>还有一种简单粗暴却很有效果的方法：点击提交按钮之后，相关按钮立刻变灰，不允许用户点击，并且由页面给出“正在保存”的反馈信息，使用户能够耐心等待表单提交。当然，一旦保存失败，不要忘记让按钮变回原来可以点击的状态。</p>
<h2 id="校验问题">校验问题</h2>
<p>前台校验是不可信任的：如果只在前台进行校验，未在后台进行校验，那么用户就可以先进入浏览器控制台，再输入<code>document.forms[0].submit()</code>来绕过各类校验。出于安全考虑，即使赶工或偷懒，也要先把后台校验给做好。</p>
<p>校验失败的错误提示不要含糊不清，不要只告诉用户“输入内容有误”，而是要告诉用户“手机号格式错误、学号格式错误”。除此之外，报错要避免像挤牙膏一样一次只提示一种错误，尽量一口气把所有错误都告诉用户，否则用户改了好几遍还提交不上去，心情就是崩溃的了。</p>
<p>另外，各表单校验风格应当统一：A页面将所有错误用一个弹窗提示出来，而B页面将每个错误字段的提示信息都放在对应字段右边，这样也会让用户困扰。</p>
<p>为了规避这些问题，建议使用（或自行实现专门的）校验框架来实现校验，既能统一行为，又能简化代码，让后续调整也变得方便些。</p>
<h2 id="没有反馈">没有反馈</h2>
<p>用户提交完成后，系统不要什么反馈都没有，否则用户容易认为系统有故障。系统要给用户一个明显的信号，例如提示“提交成功”，或者直接进入下一步操作页面。即使又回到了输入页面，也不要让用户输入数据发生变化甚至消失。</p>
<h1 id="本系列目录">本系列目录</h1>
<ol type="1">
<li><a href="/2019/02/08/login-page/">登录页面</a></li>
<li><a href="/2019/02/09/list-page/">信息展示列表</a></li>
<li><strong>信息录入表单</strong></li>
<li>业务申办-审批流程</li>
</ol>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>功能设计</tag>
      </tags>
  </entry>
  <entry>
    <title>在Web开发中，如果无法回避ActiveX控件——一种让用户在非IE浏览器调用控件的思路</title>
    <url>/2019/11/25/activex-helper/</url>
    <content><![CDATA[<p>如果Web系统需要调用特定ActiveX控件才能操作，像身份证阅读器、读卡器、获取电脑网卡MAC地址等，而且预计控件厂商在一段时间内无法解决浏览器兼容性问题，那我们能不能想法让用户在非IE浏览器中也能调用控件呢？</p>
<p>本文提出一种解决思路：开发一个“控件小助手”代理程序。该程序安装在用户电脑中，负责调用ActiveX控件，并在本地建立一个简易Web
Server，而业务系统相关页面则通过Ajax（备注：实际是JSONP）调用代理接口，从而间接地与控件交互。</p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<p>假设业务系统未开启HTTPS，因为启用HTTPS后问题会变得复杂。</p>
<h1 id="示意图">示意图</h1>
<p>以身份证阅读器为例： <pre class="line-numbers language-none"><code class="language-none">|-----------------------------------|                      |
|              IE浏览器              |      Windows系统      |      外设
|                                   |                      |
|  |------------|   |------------|  |                      |
|  | JavaScript |---| ActiveX控件 |-------身份证阅读器驱动--------身份证阅读器
|  |------------|   |------------|  |                      |
|                                   |                      |
|-----------------------------------|                      |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>ActiveX是微软专利，其他浏览器无法调用。然而，在用户电脑中安装一个代理程序（即“控件小助手”），便可通过代理程序来操作控件：</p>
<pre class="line-numbers language-none"><code class="language-none">                             |------------------------------------|                |
|------------------|         |               代理程序              |   Windows系统   |      外设
|   Chrome浏览器    |         |                                    |                |
|                  |         |  |--------------|   |----------|   |                |
|  |------------|  |         |  |     小型      |   | ActiveX  |  |     身份证       |
|  | JavaScript |-----JSONP-----|  Web Server  |---|   控件    |--------阅读器-----------身份证阅读器
|  |------------|  |         |  |--------------|   |----------|   |     驱动        |
|                  |         |                                    |                |
|------------------|         |------------------------------------|                |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="原型">原型</h1>
<p>假设原先的读卡逻辑为： <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readCardButton<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">readCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>读取身份证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">readCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>cardReader<span class="token punctuation">.</span>Check<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> check <span class="token operator">=</span> window<span class="token punctuation">.</span>cardReader<span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">var</span> ret <span class="token operator">=</span> window<span class="token punctuation">.</span>cardReader<span class="token punctuation">.</span><span class="token function">ReadCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// 读取不成功，需要重试</span>
                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token function">readCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'读卡成功！身份证号码为'</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>cardReader<span class="token punctuation">.</span>IdCard<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'无法读取身份证，请检查身份证阅读器是否连接到电脑，驱动是否正确安装！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'无法读取身份证，请检查身份证阅读器控件是否正确安装！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">classid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clsid:xxxxxx<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cardReader<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="小助手原型">小助手原型</h2>
<p>我们采用C#快速实现原型程序，这样的话需要提前准备好Visual Studio。</p>
<p>进入Visual Studio，新建“Windows 窗体应用 (.Net
Framework)”，命名为ControlHelper，并在NuGet管理器中安装<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05hbmN5RngvTmFuY3k=">Nancy<i class="fa fa-external-link-alt"></i></span>。在窗体Form1中添加身份证阅读器控件，命名为CardReader。</p>
<p>Form1.cs代码如下： <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Nancy<span class="token punctuation">.</span>Hosting<span class="token punctuation">.</span>Self</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">ControlHelper</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Form1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Form</span></span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">NancyHost</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Form1_Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">// 启动Web Server</span>
            server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NancyHost</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:12345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            server<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">CheckResult</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> CardReader<span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CheckResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                obj<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token string">"身份证阅读器检测成功！"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
                obj<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token string">"无法读取身份证，请检查身份证阅读器是否连接到电脑，驱动是否正确安装！"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IdCard<span class="token punctuation">></span></span> <span class="token function">ReadIdCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            obj<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            obj<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">"无法读取身份证，请重试！"</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> retry <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> retry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> retry<span class="token operator">--</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> CardReader<span class="token punctuation">.</span><span class="token function">ReadCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        obj<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        obj<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token string">"读卡成功"</span><span class="token punctuation">;</span>
                        obj<span class="token punctuation">.</span>IdCard <span class="token operator">=</span> CardReader<span class="token punctuation">.</span>IdCard<span class="token punctuation">;</span>
                        <span class="token comment">// 此处省略其他属性</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>Helper.cs： <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Nancy</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">ControlHelper</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">NancyModule</span></span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token function">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"/idcard/check"</span><span class="token punctuation">,</span> param <span class="token operator">=></span> Response<span class="token punctuation">.</span><span class="token function">AsJson</span><span class="token punctuation">(</span>Program<span class="token punctuation">.</span>mainForm<span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 读卡不一定能立刻返回结果，使用async</span>
            <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"/idcard/read"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=></span> Response<span class="token punctuation">.</span><span class="token function">AsJson</span><span class="token punctuation">(</span><span class="token keyword">await</span> Program<span class="token punctuation">.</span>mainForm<span class="token punctuation">.</span><span class="token function">ReadIdCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdCard</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Result <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Message <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> IdCard <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// 其他属性：姓名、性别、民族、出生日期、地址、签发机关、有效期、照片等</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckResult</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Result <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Message <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>代码中的监听端口为12345。为了避免冲突，可以修改成其他端口（最大65535，尽量用五位数）。由于监听地址为127.0.0.1（本机），与业务系统不同，会涉及跨域问题。为了避免离题讨论，本文代码以GET方式提供服务，并返回JSON格式数据，以便业务系统通过JSONP调用，不使用POST。</p>
<h2 id="web应用页面代码调整">Web应用页面代码调整</h2>
<p>调整读卡按钮的逻辑，先判断ActiveX控件是否可用。如果可用，沿用原先的ActiveX操作方式；如果不可用，则尝试通过$.ajax向“小助手”的小型Web
Server发送请求。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">readCardNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#readCardButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 先尝试调用ActiveX控件，调不通的话就调用辅助程序</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>cardreader<span class="token punctuation">.</span>ReadCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">readCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#readCardButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://localhost:12345/idcard/check'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>
            <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
            <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>data1<span class="token punctuation">.</span>Result <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span>data1<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#readCardButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://localhost:12345/idcard/read'</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#readCardButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>data2<span class="token punctuation">.</span>Result <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token function">alert</span><span class="token punctuation">(</span>data2<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'读卡成功！身份证号为'</span> <span class="token operator">+</span> data2<span class="token punctuation">.</span>IdCard<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'无法读取身份证，请重试！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#readCardButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'无法读取身份证，请检查小助手是否启动！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#readCardButton'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="投入商业使用之前">投入商业使用之前</h1>
<p>以上是实验用原型，质量粗糙，还需要进行一些功能优化才能交付用户，例如：</p>
<ul>
<li>兼顾不同操作系统的兼容性，以及不同版本.Net
Framework的兼容性。（建议使用Visual C++重新开发）</li>
<li>增加校验，检测用户是否已经正确安装驱动和控件，并帮助用户完成安装（需注意遵守驱动和控件的许可协议，以免吃官司）。目前状态下，如控件未正确安装，程序一启动就会崩溃。</li>
<li>增加开机自启、版本更新等功能。</li>
</ul>
<p>如果团队有Windows桌面应用开发经验，或者能够接受研发成本，可以考虑进一步将工具开发出来，满足用户需求，解决实际问题。当然，无论是从解决问题的角度来看，还是从开发成本的角度来看，让控件厂商去做浏览器兼容才是最合适的解决办法。</p>
<h2 id="关于https">关于HTTPS</h2>
<p>在决定开发之前，还需要特别留意一个问题：业务系统若进行HTTPS改造，“小助手”将完全失效，因为浏览器会拒绝HTTPS网站访问HTTP网站。这是浏览器的安全特性，JavaScript脚本无法干预此行为。</p>
<p>这样的话，需要为“localhost”签发（自签名）证书，让“小助手”也使用HTTPS服务，并要求用户（或通过安装程序自动地）将该证书添加到系统信任中。注意，除了操作系统证书库，Firefox也有自己的证书库，因此Firefox浏览器要另外添加信任。</p>
<h1 id="进一步思考">进一步思考</h1>
<p>从上面代码可以看出，控件读取的身份证号是明文，用户可通过浏览器控制台等途径篡改数据，带来安全隐患，而且这个漏洞无法在前端与控件层面补救。但是，如果全面改用“小助手”，便可在“小助手”一端“动手脚”，用可逆算法加密身份证信息，传到服务器之后才进行解密，从而防止用户在浏览器非法录入信息或篡改数据。</p>
]]></content>
      <categories>
        <category>技术思考</category>
      </categories>
      <tags>
        <tag>ActiveX</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确地打日志</title>
    <url>/2020/01/22/logger/</url>
    <content><![CDATA[<p>在程序中打日志很简单，<code>logger.debug("Hello, Happy World!")</code>，OK。可是，正确地打日志并不简单，需要注意以下几个问题。</p>
<span id="more"></span>
<h1 id="日志的目的">日志的目的</h1>
<p><strong>备注：本文中的“日志”专指程序内部日志。</strong></p>
<p>打日志是为了记录程序的运行情况，这样可以：</p>
<ul>
<li>确认事件发生顺序、时间节点</li>
<li>记录问题，便于在系统发生异常时定位问题、解决问题。</li>
<li>在多线程、集群等复杂环境中，利用日志分析时序</li>
<li>监控某些程序的状态</li>
<li>……</li>
</ul>
<p>因此，日志要记好有助于解决问题的各类信息，不要堆积无助于解决问题的垃圾，而且要遵循一定的规范，便于查找、定位。</p>
<p>在这里向没有开发经验的人强调一下：生产系统的日志量非常大，而且出于性能考虑不会展示调试日志。在海量日志中找信息是件很麻烦的事情，请不要给维护人员挖坑。</p>
<h1 id="日志的内容">日志的内容</h1>
<p>通过日志，应该能快速地了解“什么时间在哪里大概发生了什么事”，猜到“大概是什么原因导致了问题”，然后进一步定位程序代码，确认问题、解决问题。例如：</p>
<pre class="line-numbers language-none"><code class="language-none">2020-01-02 12:34:56 [UserService] WARN 查询用户不存在，uid &#x3D; 1234567890
2020-01-03 12:45:06 [AuthService] INFO 实名核验成功，uid &#x3D; 1234567899，身份证号 &#x3D; 110101123412341234，耗时 &#x3D; 12ms
2020-01-04 12:56:01 [InfoService] ERROR 用户保存个人信息时发生异常
java.sql.SQLException: ORA-12899: value too large for column &quot;XXXXX&quot;.&quot;YYYYY&quot;.&quot;ZZZZZ&quot; (actual: 60, maximum: 30)
        at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:445)
        at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:396)
        ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一条日志应该包含以下内容：</p>
<ul>
<li><strong>时间（“何时”）</strong>：日志要记录事件的发生时间。
<ul>
<li>日志组件记录的实际上是“打日志的时间”，而非“事件发生时间”。不过，通常事件执行时间很短，这个差异可以忽略不计。</li>
<li>如果事件执行时间比较长，“时间”就要区分为“发生时间”、“结束时间”和“持续时间”。</li>
</ul></li>
<li><strong>具体位置（“何地”）</strong>：记录事件于哪个模块、文件、函数等产生。建议至少把模块名打上，以便翻代码。</li>
<li><strong>事件简要描述（“什么事情”）</strong>：看到日志之后大概能猜到发生了什么事情。语言要简洁。
<ul>
<li>不好的例子：“发生错误”、“数据库异常”、“数据不存在”</li>
<li>好的例子：“查询用户信息时产生异常”、“执行用户信息保存时数据库异常”、“用户id不存在”</li>
<li>建议描述文字不要完全相同。比方说，都是“数据查询失败”，其中一处可以写成“数据查询失败了”，而另一处写成“数据查询的失败”，这样便于直接使用全文搜索功能查代码。</li>
</ul></li>
<li><strong>日志等级</strong>：把日志等级写好，出问题时就可以根据问题的严重性来找日志。</li>
<li><strong>上下文</strong>：例如
<ul>
<li>异常的堆栈</li>
<li>重要参数：有时需要复现问题，可以记录某些重要参数（例如uid）以便还原现场</li>
<li>重要状态变化：例如线程启动/中断、特殊进程进入/退出等</li>
</ul></li>
</ul>
<p>在开发时要用团队封装好的框架，不要自己造轮子。</p>
<h1 id="日志的等级">日志的等级</h1>
<p>以Java为例，Java日志通常分为ERROR、WARN、INFO、DEBUG和TRACE。其他语言和框架情况类似。</p>
<p>这几个级别用法通常如下：</p>
<ul>
<li>ERROR：记录影响系统与业务的严重问题，例如系统异常、数据库故障等。</li>
<li>WARN：记录“确实是问题，不过不耽误使用”的问题，以便后续跟踪检查。</li>
<li>INFO：比较重要的信息，例如系统参数、线程启动/结束、特殊任务等。</li>
<li>DEBUG、TRACE：记录开发调试过程中的细节。这类信息只要能方便开发人员调试即可。在生产环境中，这类信息应该被屏蔽掉，不往日志里头打，或者仅在跟踪问题时临时启用，用完之后立刻关掉。</li>
</ul>
<h1 id="打日志的位置">打日志的位置</h1>
<p>假设信息查询的堆栈如下： <pre class="line-numbers language-none"><code class="language-none">QueryController.queryInfo()
    UserService.getUserInfo()
        UserDAO.getUser()
        RoleDAO.getRole()
    InfoService.getInformation()
        InfoDAO.getInfo()
    InfoCommonMethod.generateOutput()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>捕获异常、输出异常日志的操作尽量都交给最外层的调用方，即上面的<code>QueryController.queryInfo()</code>。</p>
<p>里层的函数（<code>UserService.getUserInfo()</code>、<code>UserDAO.getUser()</code>等）在抛出异常时不要打日志。否则里面打一遍，外面打一遍，日志就重复了。</p>
<p>像下面这样写函数就是在坑人：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> param <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 业务逻辑</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 清理</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码存在三个问题： 1.
发生异常时，异常直接catch掉，未往上抛（<code>throw e;</code>），导致调用者无法捕获异常。
2. 在此处打日志，调用者捕获异常之后还要打日志，日志信息就重复了。 3.
如使用数据库事务（例如Spring的@Transactional），那么将无法正确回滚，导致状态错误。</p>
<h1 id="日志文件">日志文件</h1>
<p>不要假设日志全部都会输出到屏幕上，或者全部输出到特定的日志文件中！</p>
<p>日志输出目标是可以调整的，例如直接输出到stdout/stderr（生产环境不会这样干）、输出到特定日志文件、输出到数据库，或输出到特定的日志服务器中。日志不仅可以输出到单个文件，也可以根据子系统、日志级别、日志目的、日期时间等条件将日志拆分成多个文件。</p>
<p>因此要杜绝用<code>System.out.println()</code>、<code>System.error.println()</code>与<code>e.printStackTrace()</code>打日志！这样打出来的日志，不仅缺乏信息，而且有可能会打错地方，让人找不到。</p>
<p>第三方接口务必要打日志，而且不仅要记一些关键参数，还要便于查询（例如放入专门的XX公司接口日志文件中），以免出问题时互相踢皮球。</p>
<h1 id="其他的坑">其他的坑</h1>
<ul>
<li><code>catch</code>里面不要空着。遇到异常时，如果不处理，不上抛，也不打日志，一旦出现问题，就把大家全都坑了。</li>
<li>不要只输出<code>e.getMesssage()</code>，要输出整个堆栈，否则难以定位。</li>
<li>不要把详细信息（特别是堆栈）暴露给用户。</li>
<li>再强调一遍，不要<code>System.out.println()</code>、<code>System.error.println()</code>与<code>e.printStackTrace()</code>。这样打，不仅缺乏信息，而且有可能会打错地方，让人找不到。</li>
<li>生产环境不要打DEBUG日志，否则影响性能。生产系统部署时，应通过配置文件或开关调整日志等级，把DEBUG日志屏蔽掉。
<ul>
<li><em>系统刚上线时，为了便于调整，可能也会把DEBUG日志打出来。此时要留意服务器磁盘空间，别让日志把磁盘撑爆。</em></li>
</ul></li>
<li>日志是各线程公用的。需要换行的话，要先使用<code>\n</code>拼接字符串，拼好之后一口气打出来。多次执行打日志语句，日志内容可能会被其他业务打断。</li>
<li>频繁执行的代码、数据量大的数据要尽量避免打调试日志，同样影响性能。</li>
</ul>
<h1 id="补充一种便于诊断的方案">补充：一种便于诊断的方案</h1>
<p>仅在后台打日志，实际上不便于问题定位诊断，而直接把细节打到前台，虽然方便定位了，但不仅对用户不友好，还会引发安全风险。所以可以稍微变通一下：</p>
<ul>
<li>设计一套错误编码，例如：<code>I-1A2B-7F-03</code>，I指IOException，1A2B是class名字经过hash之后取前四位，7F是行号转为十六进制，03是个随机数。</li>
<li>在系统发生异常时，除了错误信息，把这个编码打到前台页面与后台日志中，并要求用户反馈异常时提供这个代号。</li>
<li>因为这个编码是很独特的，所以翻日志的时候直接搜这个编号就能比较容易地定位。即使不找日志，通过“1A2B”和“7F”两个代码也可以反查到是哪个class与哪一行代码了。</li>
</ul>
]]></content>
      <categories>
        <category>技术思考</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写好软件文档</title>
    <url>/2020/02/20/how-to-write-document/</url>
    <content><![CDATA[<p>不写文档会挨骂，写烂文档更挨骂，写好文档，才能少挨骂。</p>
<span id="more"></span>
<h1 id="动笔之前">动笔之前</h1>
<h2 id="明确受众">明确受众</h2>
<p>开始动笔之前，先问领导与自己：<strong>文档是写给谁看的？</strong></p>
<p>受众不同，文档的侧重点也要有所不同。</p>
<p>写给技术人员，文档的语言要尽可能精确，而且要明白他们关心的是什么内容。例如同样是写接口手册，开发人员文档要把重点放在接口规范方面，而运维文档要把重点放在接口服务的监控与维护方面。</p>
<p>写给用户时，文档的语言要直观，不必特别精确，能用通俗的语言描述，就不要用技术的语言描述；能用结构示意图、流程图、折线图、条形图、饼图等图片形式描述，就要避免用密密麻麻的文字描述。总之要让新手看得懂。至于特殊情况，能不提就不提，毕竟正常情况他们还不一定能看得懂呢。</p>
<h2 id="明确形式">明确形式</h2>
<p>要确认好文档以什么形式展现：设计文档、操作说明书、汇报PPT？</p>
<p>特别是刚参加工作、没写过文档的新人，经常会犯些低级错误——明明让写需求文档，把系统具体实现写进去了；让写操作手册，却从需求文档复制粘贴，写了一堆业务规则，看完仍然不知道系统该点什么按钮；让做PPT，页面文字密密麻麻，别说投影，看屏幕都觉得累……</p>
<p>除了文件的格式，内容也要考虑好形式。例如设计文档要重点讲系统的功能实现，而操作说明书则要避免提及系统的内部原理，重点讲用户眼睛能看到的外部现象。还有技术文档要关注细节，而商务文档要注重表达形式，弱化细节。</p>
<h2 id="确定结构">确定结构</h2>
<p>俗话说“磨刀不误砍柴工”。写文档的时候，也不要直接动笔，先“磨磨刀”，确定一下文档的结构，把地基打牢以后再继续填充材料。</p>
<p>在学生时代的语文课，老师肯定教过大家说要按“总-分-总”结构来写作文。不光语文作文如此，学术论文和软件文档也是一样。</p>
<p>写作文要先确定主题立意，然后再根据主题展开表达。写文档也是如此，“总”应该按以下结构和顺序来写：</p>
<ul>
<li>总述：使读者了解文档的主题、目的、适用情况等。</li>
<li>分述：按照总体架构、总体流程等顺序，对主题依次进行介绍。每部分内部也按照“总述-分述”的模式进行叙述。</li>
</ul>
<p>可以用以下三种方法来建构文档。我们以软件设计文档为例：</p>
<h3 id="先建立结构再填充细节">先建立结构，再填充细节</h3>
<p>我们对上面提到的“总述”和“分述”进行分解：</p>
<p><img src="/img/2020-02-20-how-to-write-document/g1.png" /></p>
<p>很显然这样是不够的。我们继续挑其中一个点（功能设计）继续分解：</p>
<p><img src="/img/2020-02-20-how-to-write-document/g2.png" /></p>
<p>这时不用急着填充内容，先参照国家标准和其他现有文档，把“应该有什么内容”梳理出来，力求覆盖全面。当然这个工作不是必须一次性独立完成的，可以先形成一版，然后让领导同事帮你查漏补缺。</p>
<p>确认无误后，就可以按照这个结构开始填充内容了。</p>
<h3 id="先整理素材再形成结构">先整理素材，再形成结构</h3>
<p>我们从另一个角度来考虑系统设计：</p>
<p>假设设计面向社会用户的“xx证申请”功能，那么这个功能需要考虑以下方面：</p>
<p><img src="/img/2020-02-20-how-to-write-document/g3.png" /></p>
<p>整理出来之后，需要进行一个取舍，哪些是要写进文档的，哪些是不适合写进文档的（离题或者过于细节），然后整理出一个结构：</p>
<p><img src="/img/2020-02-20-how-to-write-document/g4.png" /></p>
<p>总结出结构后，按照规范的文档的结构进行调整，该功能设计的初稿就差不多了。</p>
<h3 id="综合运用以上两种方式">综合运用以上两种方式</h3>
<p>写作方式不是一成不变的。在写作过程中，要时不时地改变一下视角，在整体结构与局部细节之中切换，同时也在上述两种工作方式之间进行切换，从两个角度分别进行“进攻”，否则的话容易产生两种极端：</p>
<ol type="1">
<li>长时间关注整体结构，会导致内容叙述得不够细致。内容面面俱到，而细节叙述不足，难以指导具体工作。</li>
<li>长时间关注局部细节，会导致整体逻辑不清，使读者需要费一些精力才能“入门”。</li>
</ol>
<p>另外建议善于利用思维导图工具，维护写作思路。</p>
<h1 id="编写之中">编写之中</h1>
<h2 id="表达准确">表达准确</h2>
<p>即使不使用精确的技术语言，语言表达仍然要保持准确，以免产生分歧。</p>
<h3 id="准确地领会任务目的">准确地领会任务目的</h3>
<p>当领导在微信里发了一句“写清什么功能在哪里如何实现”，实际上你收到的是一个含糊的要求，需要与领导进行确认：这个要求的目的是什么？“哪里”是什么含义？指的是一个功能模块，还是一个操作步骤，还是一个文档的位置？“如何”又是什么含义？是某一套开发框架，还是一套业务流程，还是一句简单的“用Java开发”？</p>
<h3 id="避免模棱两可的语言表达">避免模棱两可的语言表达</h3>
<p>例如“接口”，是指Java的interface呢，还是后端调用的API呢，还是浏览器调用的API呢，还是指用户输入输出的界面呢，或者是物理的插头插座？如果无法从上下文看出接口具体在指什么东西，那么就要界定好“接口”的具体含义。</p>
<p>除了模棱两可的话，还要避免“正确的废话”。例如“该接口应当在需要的功能中进行调用”，道理正确，在开发规范中写这句话没问题，但是在设计文档中写这句话就不具备可操作性——“需要的功能”有哪些？如果没有该怎么办？难道是“不应当在不需要的功能中进行调用”吗？当然解决方法也简单，就是要“具体”，明确哪些功能是“需要的功能”，举出实际案例，这样这句话就有意义了。</p>
<h3 id="注意符合目标读者的语言体系">注意符合目标读者的语言体系</h3>
<p>面向用户的文档，要更加注意匹配用户的语言体系。例如，开发政府系统，文档和界面用词就应当规范、严谨、死板，你把“报备”误写成“审批”，虽然在系统实现上都是把数据库表格里的CURRENT_STATE字段给UPDATE成完全相同的字符，没有任何技术上的区别，但在用户眼里这就是一个设计缺陷，因为“报备”和“审批”是两种性质完全不同的操作，具体来讲，在系统之外的人工流程，以及用户在点击操作按钮之后需要承担的责任都是不一样的。</p>
<h2 id="注意规范">注意规范</h2>
<p>团队通常会制定文档模板和规范，有些文档还受国家或行业规范制约。开始编辑之前，先找领导同事要一份现成模板，然后再动手。不要随便自己找模板，不要违反文档规范。</p>
<p>文档要特别注意格式！例如：</p>
<ul>
<li>不要有错别字</li>
<li>英语单词拼写要正确，例如是MySQL而非mysql、MySql、MYSQL</li>
<li>标点符号要正确，特别是不要在中文中使用英文标点</li>
<li>字体、字号要统一</li>
<li>不要有多余空白</li>
<li>该对齐的地方要对齐</li>
</ul>
<p>关于格式方面的规则，可参考阮一峰《<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi9kb2N1bWVudC1zdHlsZS1ndWlkZQ==">中文技术文档的写作规范<i class="fa fa-external-link-alt"></i></span>》。</p>
<h1 id="完成以后">完成以后</h1>
<h2 id="先完成后优化">先完成后优化</h2>
<p>刚刚走出校园就进入职场的新人容易犯一个错误：总想着把工作做好再提交。</p>
<p>这正是职场大忌！假如你不熟悉工作，又没有及时与领导沟通，等你费尽九牛二虎之力勉强在deadline之前完成，领导却发现你写出来的东西根本不符合要求，那时候领导的心情一定是非常激动的，你以后的工作也会充满（负面）挑战。</p>
<p>工作质量很重要，用合适的方法按时完成同样重要。特别是职场新人，干活应当这样干：</p>
<ol type="1">
<li>接到任务后，先稍微想一下整体思路，和分配任务的领导确认一下自己思路对不对。</li>
<li>不定期跟领导反馈自己做得怎么样，遇到问题及时找领导同事问。</li>
<li>不要糊弄，但是也要优先保证总体进度，先把“垃圾”堆出来，做出一个大体上说得过去的东西，然后再优化细节。职场上很难弄出完美的东西，只能是不断优化，早点把垃圾堆好，优化的空间就相对大一些。（本条不适用于纯粹压榨人的公司）</li>
</ol>
<p>再强调一下，别怕挨训，就算挨训，在过程中挨训比到最后才挨训要好得多。</p>
<h2 id="多读多改">多读、多改</h2>
<p>初稿肯定会有不少语文方面的问题，句子不通顺，语义不清楚，前后逻辑不连贯。因此，写完之后要通读文档，PPT的话还要试着讲一下，将整个文档顺一顺，大小毛病改一改，然后再从头检查一遍，重复以上几个步骤，直到大体满意为止。</p>
<p>直接提交不行吗？当然不行了！明明是自己能挑出来改好的低级错误，却放着交给别人检查，这就是在浪费别人时间，而且会让人觉得你工作态度不好。虽然你努力完善的结果可能也是返工，但返工原因由低级的格式问题变成高级的业务问题，至少不会让人太扫兴。</p>
<h1 id="管理提升">管理提升</h1>
<h2 id="版本管理">版本管理</h2>
<p>文档应做好版本管理。</p>
<p>即便无法版本管理（例如净是些照片、Word、Excel、PowerPoint文件），至少要有个固定地方集中存放，而不是乱七八糟散落在邮箱附件、微信聊天记录、QQ群文件、张三电脑C盘、李四电脑D盘……特别是与外界沟通协调的文件，如果不集中管理，日后需要追查记录时便无处可寻，让人觉得管理混乱。</p>
<p>文档要分门别类存放。就算要偷懒，至少文件名要有个规范（包含关键词、日期时间等），不要“QQ文件1231231231.doc”、“预算.xls”，免得日后找不到。另外也可以考虑使用Everything等文件搜索工具来查找文件。</p>
<p>对于内部开发文档，个人提倡使用纯文本与Markdown格式，不要使用Word格式。Word格式需要浪费时间排版，难以搜索，而且很难管理版本，而Markdown格式简洁明了，便于全文搜索，并且可以直接扔到SVN/Git仓库里面进行版本管理。</p>
<p>文档发生重要改动，如需求变更、用户确认结论等，务必记录修改时间和修改原因，并做好变更管理（例如commit
message），以便日后追查。受影响的程序代码也要用注释和提交信息加以说明。</p>
<p>提倡在编写过程中使用在线文档（例如<span class="exturl" data-url="aHR0cHM6Ly9zaGltby5pbQ==">石墨文档<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnFxLmNvbQ==">腾讯文档<i class="fa fa-external-link-alt"></i></span>），或者使用一些专门的文档/知识库软件，例如ShowDoc（<span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hvd2RvYy5jb20uY24=">在线版<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0YXI3dGgvc2hvd2RvYw==">本地部署版<i class="fa fa-external-link-alt"></i></span>）。这类软件操作方便，适合团队协作维护文档，又有版本管理功能，可随时检查修订记录。</p>
<h2 id="文档要随时维护不要攒着">文档要随时维护，不要攒着</h2>
<p>当用户需求、功能设计、接口规范、数据库结构等信息发生变化时，务必及时更新相应的文档。今天不把文档维护好，明天会有新的事情来烦扰你，让你更没有心思管文档，日积月累，最终变成一个大坑。</p>
<p>建议在小组安排一个专门的文档人员，在有人往工作群丢文件的时候，他/她能默默地把文件收集整理好。当一项阶段性任务完成的时候，也能把团队成员工作的素材给整理好。</p>
<p>如果没有专门的文档团队，那么在管理项目时应当将文档也作为开发任务之一来管理，将光写代码（特别是变更了设计的代码）、不维护相关开发文档视为没完成任务。</p>
<p>当然现在已经是内卷的时代，能把工作卷完就已经很难了，所以即便无力将文档维护到最新，至少要维护一份比较规范的备忘录，指出文档哪个地方与实际不符，文档希望按A实现而实际上已经按B思路来做，然后再对备忘录进行统一的版本管理，这样总比什么文字记录都没有强。</p>
<h2 id="平时抽空练习练习">平时抽空练习练习</h2>
<p>很多技术人员的语言表达能力不强，虽然大佬心里清楚他是什么意思，但是一般萌新却难以理解。建议大家去CSDN、GitHub等网站开个博客，或者去知乎问答编故事，用长篇回答装装逼，提高自己的语言表达能力、搜索资料的能力与整理信息的能力。</p>
<h1 id="本系列文档">本系列文档</h1>
<ul>
<li><strong>如何写好软件文档</strong></li>
<li><a href="/2020/10/24/how-to-draw-graph/">如何画架构图</a></li>
<li><a href="/2022/11/05/how-to-make-ppt/">如何做PPT</a></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>使用脚本快速从本地提取、替换生产服务器class文件</title>
    <url>/2020/03/02/quick-replace-file/</url>
    <content><![CDATA[<p>生产环境遇到bug，需要紧急修改几个Java文件，然后尽快部署到生产系统中。如果代码中混有其他改动，无法完整打包，那么如何尽快提取出改完的class文件并快速地放到服务器的正确位置呢？</p>
<span id="more"></span>
<h1 id="从本机提取文件">从本机提取文件</h1>
<p>先在自己的IDE中把代码改出来，编译，运行。避免打WAR包，否则还要费心思解压，而且有些系统（例如Mac）解出来之后时间戳还不对。</p>
<p>重新生成的class文件的修改时间肯定比其他class文件新，这样我们就能用一些脚本将它们挑出来了。</p>
<h2 id="windows系统">Windows系统</h2>
<p>使用PowerShell脚本。放在 D:\tiqu.ps1 中： <pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[CmdletBinding()]</span>
<span class="token keyword">Param</span> <span class="token punctuation">(</span>
    <span class="token namespace">[string]</span> 
    <span class="token variable">$from</span> = <span class="token string">'.'</span><span class="token punctuation">,</span> 

    <span class="token namespace">[string]</span>
    <span class="token variable">$to</span> = <span class="token string">'..\output'</span><span class="token punctuation">,</span>

    <span class="token namespace">[AllowNull()]</span>
    <span class="token namespace">[string]</span>
    <span class="token variable">$time</span><span class="token punctuation">,</span>

    <span class="token namespace">[AllowNull()]</span>
    <span class="token namespace">[int]</span>
    <span class="token variable">$min</span><span class="token punctuation">,</span>

    <span class="token namespace">[int]</span>
    <span class="token variable">$flat</span> = 0
<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$minTime</span> = <span class="token namespace">[DateTime]</span>::ParseExact<span class="token punctuation">(</span><span class="token variable">$time</span><span class="token punctuation">,</span> <span class="token string">'hh:mm'</span><span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$min</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$minTime</span> = <span class="token punctuation">(</span><span class="token function">Get-Date</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddMinutes<span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$min</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$minTime</span> = <span class="token namespace">[DateTime]</span>::ParseExact<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token punctuation">,</span> <span class="token string">'hh'</span><span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 新建文件夹</span>
<span class="token function">New-Item</span> <span class="token operator">-</span>Path <span class="token variable">$to</span> <span class="token operator">-</span>ItemType Directory <span class="token operator">-</span>Force <span class="token punctuation">|</span> <span class="token function">Out-Null</span>

<span class="token comment"># 搜索文件</span>
<span class="token function">Push-Location</span> <span class="token variable">$from</span>

<span class="token variable">$fileList</span> = <span class="token function">Get-ChildItem</span> <span class="token operator">-</span>Path <span class="token punctuation">.</span> <span class="token operator">-</span>Recurse <span class="token punctuation">|</span> ? <span class="token punctuation">&#123;</span><span class="token variable">$_</span><span class="token punctuation">.</span>LastWriteTime <span class="token operator">-gt</span> <span class="token variable">$minTime</span><span class="token punctuation">&#125;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$file</span> in <span class="token variable">$fileList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$relativePath</span> = <span class="token function">Resolve-Path</span> <span class="token operator">-</span>Path <span class="token variable">$file</span><span class="token punctuation">.</span>FullName <span class="token operator">-</span>Relative
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flat</span> <span class="token operator">-eq</span> 0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment"># 保持目录结构</span>
        <span class="token function">Write-Output</span> <span class="token variable">$relativePath</span>
        <span class="token variable">$newPath</span> = <span class="token function">Join-Path</span> <span class="token operator">-</span>Path <span class="token variable">$to</span> <span class="token operator">-</span>ChildPath <span class="token variable">$relativePath</span>
        <span class="token variable">$newDir</span> = <span class="token function">Split-Path</span> <span class="token operator">-</span>Path <span class="token variable">$newPath</span>
        <span class="token function">New-Item</span> <span class="token operator">-</span>Path <span class="token variable">$newDir</span> <span class="token operator">-</span>ItemType Directory <span class="token operator">-</span>Force <span class="token punctuation">|</span> <span class="token function">Out-Null</span>
        <span class="token function">Copy-Item</span> <span class="token operator">-</span>Path <span class="token variable">$file</span><span class="token punctuation">.</span>FullName <span class="token operator">-</span>Destination <span class="token variable">$newDir</span> <span class="token operator">-</span>Force <span class="token punctuation">|</span> <span class="token function">Out-Null</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment"># 不保持目录结构，直接复制</span>
        <span class="token function">Write-Output</span> <span class="token variable">$file</span><span class="token punctuation">.</span>Name
        <span class="token function">Copy-Item</span> <span class="token operator">-</span>Path <span class="token variable">$file</span><span class="token punctuation">.</span>FullName <span class="token operator">-</span>Destination <span class="token variable">$to</span> <span class="token operator">-</span>Force <span class="token punctuation">|</span> <span class="token function">Out-Null</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">Pop-Location</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>操作时，启动PowerShell，输入</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 进入到Web应用所在目录，IDEA通常是artifacts，Eclipse通常是WebRoot</span>
cd X:\xxxxxx\out\artifacts

<span class="token comment"># 提取5分钟之前到现在修改的文件，放到 ..\临时替换 目录中</span>
D:\tiqu<span class="token punctuation">.</span>ps1 <span class="token operator">-</span>to <span class="token punctuation">.</span><span class="token punctuation">.</span>\临时替换 <span class="token operator">-</span>min 5

<span class="token comment"># 提取从9:20到现在之间修改的文件，放到 ..\output 目录中</span>
D:\tiqu<span class="token punctuation">.</span>ps1 <span class="token operator">-</span>time 09:20 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="linuxmaccygwin">Linux/Mac/Cygwin</h2>
<p>将以下脚本放在<code>/usr/local/bin/tiqu</code>中，设置好<code>x</code>权限。</p>
<p>注意Mac系统自带getopt是BSD版本，功能比GNU版少，只支持一个字母的短参数，需另外安装gnu-getopt（后面假设安装到了<code>/usr/local/opt/gnu-getopt/bin/getopt</code>）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
 
<span class="token function-name function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"tiqu [options]"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"默认值：把当前目录、当天修改文件放到 out 目录中"</span>
    <span class="token builtin class-name">echo</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --from=&lt;path>, -f       指定待查找目录"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --to=&lt;path>, -t         指定放置位置，如果没有则自动 mkdir"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --time=&lt;HH:mm>          复制 HH:mm 之后修改的文件"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --min=&lt;min>             复制从 min 分钟之前到现在的文件，和上面参数冲突"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --exclude=&lt;list>, -e    复制时排除符合&lt;list>规则的文件"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --exclude-from=&lt;file>   复制时排除匹配了&lt;file>规则配置列表文件的文件"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --flat, -b              把所有文件平摊到同一目录中，不要保持目录结构（默认值：保持目录结构）"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --help                  显示本帮助"</span>
    <span class="token builtin class-name">echo</span>
<span class="token punctuation">&#125;</span>
 
<span class="token assign-left variable">fromPath</span><span class="token operator">=</span><span class="token string">"."</span>
<span class="token assign-left variable">toPath</span><span class="token operator">=</span><span class="token string">"./out"</span>
<span class="token assign-left variable">findTime</span><span class="token operator">=</span><span class="token string">"00:00"</span>
<span class="token assign-left variable">findMin</span><span class="token operator">=</span>-1
<span class="token assign-left variable">excludeCmd</span><span class="token operator">=</span><span class="token string">""</span>
<span class="token assign-left variable">flat</span><span class="token operator">=</span><span class="token number">0</span>
 
<span class="token comment"># 苹果系统</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/local/opt/gnu-getopt/bin:<span class="token environment constant">$PATH</span>"</span>
 
<span class="token assign-left variable">TEMP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>getopt <span class="token parameter variable">-o</span> hf:t:e:b <span class="token parameter variable">--long</span> help,from:,to:,time:,min:,exclude:,exclude-from,flat -- <span class="token string">"<span class="token variable">$@</span>"</span><span class="token variable">`</span></span>
<span class="token builtin class-name">eval</span> <span class="token builtin class-name">set</span> -- <span class="token string">"<span class="token variable">$TEMP</span>"</span>
 
<span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
        -f<span class="token operator">|</span>--from<span class="token punctuation">)</span>
            <span class="token assign-left variable">fromPath</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -t<span class="token operator">|</span>--to<span class="token punctuation">)</span>
            <span class="token assign-left variable">toPath</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        --time<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=~</span> ^<span class="token punctuation">[</span>01<span class="token punctuation">]</span>?<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>:<span class="token punctuation">[</span><span class="token number">0</span>-5<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token assign-left variable">findTime</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>
            <span class="token keyword">else</span>
                <span class="token builtin class-name">echo</span> 错误：无效时间格式！
                <span class="token builtin class-name">exit</span> <span class="token number">1</span>
            <span class="token keyword">fi</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        --min<span class="token punctuation">)</span>
            <span class="token assign-left variable">findMin</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -e<span class="token operator">|</span>--exclude<span class="token punctuation">)</span>
            <span class="token assign-left variable">excludeCmd</span><span class="token operator">=</span><span class="token string">"--exclude=<span class="token entity" title="\&quot;">\"</span><span class="token variable">$2</span><span class="token entity" title="\&quot;">\"</span>"</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        --exclude-from<span class="token punctuation">)</span>
            <span class="token assign-left variable">excludeCmd</span><span class="token operator">=</span><span class="token string">"--exclude-from=<span class="token entity" title="\&quot;">\"</span><span class="token variable">$2</span><span class="token entity" title="\&quot;">\"</span>"</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -b<span class="token operator">|</span>--flat<span class="token punctuation">)</span>
            <span class="token assign-left variable">flat</span><span class="token operator">=</span><span class="token number">1</span>
            <span class="token builtin class-name">shift</span> <span class="token number">1</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -h<span class="token operator">|</span>--help<span class="token punctuation">)</span>
            <span class="token builtin class-name">help</span>
            <span class="token builtin class-name">exit</span> <span class="token number">0</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        --<span class="token punctuation">)</span>
            <span class="token builtin class-name">shift</span>
            <span class="token builtin class-name">break</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        *<span class="token punctuation">)</span>
            <span class="token comment"># echo "Internal error!"</span>
            <span class="token comment"># exit 1</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
 
<span class="token comment"># 计算时间</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$findMin</span> <span class="token parameter variable">-eq</span> <span class="token parameter variable">-1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span>: <span class="token builtin class-name">read</span> nowh nowm nows <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%T<span class="token variable">`</span></span>"</span>
    <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span>: <span class="token builtin class-name">read</span> bh bm <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$findTime</span>"</span>

    <span class="token assign-left variable">nowh</span><span class="token operator">=</span><span class="token variable">$&#123;nowh<span class="token operator">#</span>0&#125;</span>
    <span class="token assign-left variable">nowm</span><span class="token operator">=</span><span class="token variable">$&#123;nowm<span class="token operator">#</span>0&#125;</span>
    <span class="token assign-left variable">bh</span><span class="token operator">=</span><span class="token variable">$&#123;bh<span class="token operator">#</span>0&#125;</span>
    <span class="token assign-left variable">bm</span><span class="token operator">=</span><span class="token variable">$&#123;bm<span class="token operator">#</span>0&#125;</span>
 
    <span class="token assign-left variable">findMin</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span>nowh<span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span>nowm<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>bh<span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span>bm<span class="token variable">))</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$findMin</span> <span class="token parameter variable">-lt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">findMin</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">fi</span>
<span class="token keyword">fi</span>
 
<span class="token assign-left variable">findMin</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">-</span>findMin<span class="token variable">))</span></span>
 
<span class="token comment"># 将toPath转成绝对路径</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$toPath</span>"</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$toPath</span>"</span>
<span class="token assign-left variable">toPath</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>"</span>
<span class="token builtin class-name">cd</span> -
 
<span class="token comment"># 使用rsync复制文件</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$fromPath</span>"</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$flat</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># 保持目录结构</span>
    <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mmin</span> <span class="token variable">$findMin</span> <span class="token parameter variable">-exec</span> <span class="token function">rsync</span> <span class="token parameter variable">-aR</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">"<span class="token variable">$toPath</span>"</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    <span class="token comment"># 不要保持目录结构</span>
    <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mmin</span> <span class="token variable">$findMin</span> <span class="token parameter variable">-exec</span> <span class="token function">rsync</span> <span class="token parameter variable">-a</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">"<span class="token variable">$toPath</span>"</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>
<span class="token keyword">fi</span>
 
<span class="token comment"># 展示已复制文件</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$toPath</span>"</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>操作时：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入到Web应用所在目录，IDEA通常是artifacts，Eclipse通常是WebRoot</span>
<span class="token builtin class-name">cd</span> xxxxxx/out/artifacts

<span class="token comment"># 提取5分钟之前到现在修改的文件，放到 ../临时替换 目录中</span>
tiqu <span class="token parameter variable">--to</span><span class="token operator">=</span><span class="token punctuation">..</span>/临时替换 <span class="token parameter variable">--min</span><span class="token operator">=</span><span class="token number">5</span>

<span class="token comment"># 提取从9:20到现在之间修改到文件，放到 ./out 目录中</span>
tiqu <span class="token parameter variable">--time</span><span class="token operator">=</span><span class="token number">9</span>:20 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>程序会自动搜索已修改文件，并且会按目录结构组织好，之后你就可以直接打包了。</p>
<h1 id="在服务器上替换linux">在服务器上替换（Linux）</h1>
<p>如果已经按目录结构整理好，直接解压替换（<code>unzip -o xxx.zip -d 应用所在目录</code>）便是。对于war包，可使用zip命令直接把文件替换到包里面（<code>cd xxx; zip -r war包 *</code>）。</p>
<p>如果提供的是散装的class文件，那么找目录会很费劲，可以借助脚本自动找目录，自动替换。可修改以下脚本中的MYBASE变量，然后保存到<code>/usr/local/bin/tihuan</code>中，加好<code>x</code>权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 应用所在位置。通常不会变化，可以写死在脚本里头。</span>
<span class="token assign-left variable">MYBASE</span><span class="token operator">=</span>/opt/xxx

<span class="token function-name function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"tihuan [options] 文件名1 文件名2 ..."</span>
    <span class="token builtin class-name">echo</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --to=&lt;path>, -t         指定搜索目录（默认值：<span class="token variable">$&#123;MYBASE&#125;</span>）"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --dry-run, -n           只生成命令，不要实际替换"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --force, -f             不用确认，直接动手替换"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"  --help                  显示本帮助"</span>
<span class="token punctuation">&#125;</span>
 
<span class="token comment"># 苹果系统</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/local/opt/gnu-getopt/bin:<span class="token environment constant">$PATH</span>"</span>
 
<span class="token assign-left variable">TEMP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>getopt <span class="token parameter variable">-o</span> ht:nf <span class="token parameter variable">--long</span> help,to:,dry-run,force -- <span class="token string">"<span class="token variable">$@</span>"</span><span class="token variable">`</span></span>
<span class="token builtin class-name">eval</span> <span class="token builtin class-name">set</span> -- <span class="token string">"<span class="token variable">$TEMP</span>"</span>

<span class="token assign-left variable">toPath</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$MYBASE</span>"</span>
<span class="token assign-left variable">dryrun</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">force</span><span class="token operator">=</span><span class="token number">0</span>
 
<span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
        -t<span class="token operator">|</span>--to<span class="token punctuation">)</span>
            <span class="token assign-left variable">toPath</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>
            <span class="token builtin class-name">shift</span> <span class="token number">2</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -n<span class="token operator">|</span>--dry-run<span class="token punctuation">)</span>
            <span class="token assign-left variable">dryrun</span><span class="token operator">=</span><span class="token number">1</span>
            <span class="token builtin class-name">shift</span> <span class="token number">1</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -f<span class="token operator">|</span>--force<span class="token punctuation">)</span>
            <span class="token assign-left variable">force</span><span class="token operator">=</span><span class="token number">1</span>
            <span class="token builtin class-name">shift</span> <span class="token number">1</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        -h<span class="token operator">|</span>--help<span class="token punctuation">)</span>
            <span class="token builtin class-name">help</span>
            <span class="token builtin class-name">exit</span> <span class="token number">0</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        --<span class="token punctuation">)</span>
            <span class="token builtin class-name">shift</span>
            <span class="token builtin class-name">break</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
        *<span class="token punctuation">)</span>
            <span class="token comment"># echo "Internal error!"</span>
            <span class="token comment"># exit 1</span>
            <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>

<span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>

    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span> <span class="token builtin class-name">echo</span> <span class="token string">"[文件 #<span class="token variable">$&#123;i&#125;</span>] 源文件不存在：<span class="token variable">$&#123;file&#125;</span>"</span>
        <span class="token builtin class-name">continue</span>
    <span class="token keyword">fi</span>

    <span class="token assign-left variable">fileName</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">$file</span>"</span><span class="token variable">`</span></span>

    <span class="token function">find</span> <span class="token string">"<span class="token variable">$toPath</span>"</span> <span class="token parameter variable">-name</span> <span class="token string">"<span class="token variable">$fileName</span>"</span> <span class="token operator">></span> /tmp/tmpfilelist
    <span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/tmpfilelist<span class="token variable">`</span></span>

    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$list</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$list</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"[文件 #<span class="token variable">$&#123;i&#125;</span>] 已找到"</span>

        <span class="token function">cat</span> /tmp/tmpfilelist <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> target<span class="token punctuation">;</span> <span class="token keyword">do</span>
            <span class="token builtin class-name">echo</span> <span class="token variable">$target</span>
        <span class="token keyword">done</span>

        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$force</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"是否继续替换 [y/n]？"</span>
            <span class="token builtin class-name">read</span> choice
        <span class="token keyword">else</span>
            <span class="token assign-left variable">choice</span><span class="token operator">=</span><span class="token string">"y"</span>
        <span class="token keyword">fi</span>

        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$choice</span>"</span> <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$dryrun</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token builtin class-name">echo</span> <span class="token string">"[文件 #<span class="token variable">$&#123;i&#125;</span>] 已进行替换"</span>
            <span class="token keyword">else</span>
                <span class="token builtin class-name">echo</span> <span class="token string">"[文件 #<span class="token variable">$&#123;i&#125;</span>] 请运行以下命令"</span>
            <span class="token keyword">fi</span>
            <span class="token function">cat</span> /tmp/tmpfilelist <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> target<span class="token punctuation">;</span> <span class="token keyword">do</span>
                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$dryrun</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                    <span class="token function">cp</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"<span class="token variable">$target</span>"</span>
                <span class="token keyword">else</span>
                    <span class="token builtin class-name">echo</span> <span class="token string">"cp <span class="token entity" title="\&quot;">\"</span><span class="token variable">$file</span><span class="token entity" title="\&quot;">\"</span> <span class="token entity" title="\&quot;">\"</span><span class="token variable">$target</span><span class="token entity" title="\&quot;">\"</span>"</span>
                <span class="token keyword">fi</span>
            <span class="token keyword">done</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"[文件 #<span class="token variable">$&#123;i&#125;</span>] 已放弃替换"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"[文件 #<span class="token variable">$&#123;i&#125;</span>] 未找到文件，未进行替换"</span>
    <span class="token keyword">fi</span>

    <span class="token builtin class-name">echo</span>
<span class="token keyword">done</span>

<span class="token function">rm</span> /tmp/tmpfilelist <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>操作时： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 此处省略下载文件与备份操作。实际操作时注意备份！</span>
<span class="token comment"># 以下根据实际情况二选一</span>

<span class="token comment"># 展开（exploded）模式</span>
tihuan XXXXX.class

<span class="token comment"># war包模式</span>
<span class="token function">mkdir</span> tmp
<span class="token function">unzip</span> <span class="token parameter variable">-o</span> war包 <span class="token parameter variable">-d</span> tmp
tihuan <span class="token parameter variable">--to</span><span class="token operator">=</span>tmp XXXXX.class
<span class="token builtin class-name">cd</span> tmp
<span class="token function">zip</span> <span class="token parameter variable">-r</span> 原先的war包 *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h1 id="后续操作">后续操作</h1>
<ul>
<li>本文的操作应当只用于应急处置。问题处理好之后，代码该提交提交，基线该打patch打patch，忘了的话就是极大的隐患。</li>
<li>这次事情紧急，直接从开发库中取了文件。给不紧急的bug打patch时，一定要取基线代码，从基线上打，打完再合并回去。</li>
<li>每次正式升级之前一定要打基线，从基线取代码，打整包，生产环境配置文件用事先预备好的备份覆盖升级包，不要单独换文件！换文件升级，有第一次，就会有第二次。越是换文件，后面就越不敢打整包，几个星期以后，全世界就没有人知道生产环境与本地代码有什么区别了。</li>
</ul>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈社招招聘（一）：作为招聘者，筛选简历的关注点</title>
    <url>/2020/08/16/resume-filtering/</url>
    <content><![CDATA[<p>因公司业务发展，需要招聘一些初、中级Java开发人员。本系列文章将面向求职者，以招聘者的视角来进行讨论，希望能为疫情期间苦于找工作的求职者带来一些启发。</p>
<p>由于不同公司情况不同，有着急的，有不着急的，有舍得花钱的，有比周扒皮还抠门的，因此本系列文章意见仅供参考。</p>
<span id="more"></span>
<h1 id="招聘流程和分工">招聘流程和分工</h1>
<p>正常情况下，招聘的流程如下：</p>
<ol type="1">
<li>提出招聘需求，分配招聘指标</li>
<li>发布招聘广告、收简历等事务性工作</li>
<li>简历筛选</li>
<li>组织笔试、面试：很多单位不安排笔试，但一定会安排面试。有些单位还会组织多轮面试</li>
<li>发放Offer、背景调查、入职手续等事务性工作</li>
</ol>
<p>其中，发布招聘信息、筛选简历可能有以下几种情况：</p>
<ul>
<li>主流情况：人力资源部门发布信息、收取简历，人力资源初步筛选并扔掉明显不靠谱的简历，然后将看起来合适的移交用人部门判断。用人部门再进一步筛选简历，确定可以面试之后再由人力部门进行发通知等事务性工作。</li>
<li>个别情况：用人部门在取得公司授权之后，自行发布招聘信息，收取简历、组织面试，人力部门辅助。考核通过后由人力部门办理背调、入职等手续。小公司缺乏人力部门，也会选择这样做。</li>
</ul>
<p>因此，收你简历并与你联系的，通常是代收者。</p>
<h1 id="同样的jdjob-description不同的目的">同样的JD（Job
Description），不同的目的</h1>
<p>在招聘网站上，各公司的JD（Job
Description，岗位介绍）看起来都差不多，但关注点是不同的。</p>
<p>为了节约成本，公司会倾向于内部调配人员，实在无法调配才会去招聘，例如：</p>
<ul>
<li>业务扩张
<ul>
<li>组建新团队</li>
<li>项目实施缺人，需要拉人干活</li>
</ul></li>
<li>有人辞职，需要从外面拉个接盘侠</li>
<li>需要特殊技能</li>
</ul>
<p>根据业务性质不同，对技能深度要求会有所不同。例如：</p>
<ul>
<li>小型政府项目，可能用户数不大，也可以要求业主堆硬件，出问题时用户也能有所容忍，这样对开发人员能力要求就不会特别高，能熟练使用一些东西就行。</li>
<li>互联网产品，用户数很大，一个微小的问题可能就会引发系统不稳定，而且用户无法容忍系统宕机，这样对开发人员基础知识要求就比较高，以免挖坑。</li>
<li>外包公司，员工只会被安排做些没什么含金量、但还不得不去做的低级工作，所以公司只要找个省钱能干的年轻人就行。</li>
</ul>
<p>对技能广度要求也有差异，例如：</p>
<ul>
<li>新公司、新团队或者并非专门做软件的公司会要一些复合型人才，例如“全栈工程师”，各类工作都要懂一些，这样可以少招人。</li>
<li>大型团队内部分工明确，只需要一些“螺丝钉”，最典型的就是专门的前端、后端、测试、DBA、运维等，而且可能对这些职位的所用的工具和框架也有固定要求。</li>
</ul>
<p>在投递简历之前，可以通过各种途径了解一下公司，从而针对性地调整简历内容。</p>
<h1
id="用正确方法投递简历我们才有机会看到你的简历">用正确方法投递简历，我们才有机会看到你的简历</h1>
<p>首先，你需要用正确的方法投递简历。HR的邮箱总是堆满垃圾，如果投递方法错误，你的简历连被看的机会都没有，更不用说筛选和面试了。</p>
<h2 id="邮件投递">邮件投递</h2>
<p>请注意邮件标题！邮箱里面总是堆满垃圾，如果你的邮件标题不能明显看出是应聘，我们可能会错过你的邮件。</p>
<p>建议邮件标题采用“【应聘】姓名-岗位名-3年工作经验”之类的格式，让我们一眼就能看出你是在应聘，而且能够一眼看出你的基本情况。附件文件名也采用类似格式，方便我们保存和查找。</p>
<p>发送邮件之前，请检查邮件发件人姓名，不要使用乱七八糟的网名，并且确认邮件中确实包含了简历附件。如果你害怕邮件内容有误，你可以先给自己发一封邮件，检查邮件内容是否正确，然后再发给HR。</p>
<p>邮件正文实际上是无所谓的。收到邮件，我们至少要看一下简历内容，不会单纯因为你没写正文或者在正文中又写了一遍简历内容就把你Pass掉。</p>
<h2 id="boss直聘-拉勾网">BOSS直聘 / 拉勾网</h2>
<p>BOSS直聘 /
拉勾网的特殊之处在于你可以提前与HR（当然不是BOSS）进行一些简单的交流。建议维护一份在线简历，让招聘者能够简单地了解你的基本情况，然后决定收简历。</p>
<p>招聘经常是人力资源部门的人来做，所以请避免问工作细节，因为他们也不见得知道。</p>
<h2 id="内推">内推</h2>
<p>如果你为人靠谱，而且有熟人，可以考虑走内推去他们的公司，省去一切麻烦事情。</p>
<p>注意，即便是内推，甚至内定入职，简历也要好好写，否则的话，轻则给人留下负面印象，重则容易失去面试和入职机会（到时你还有何面目去见替你内推的人？）</p>
<h2 id="简历文件格式">简历文件格式</h2>
<p>请使用PDF格式！不要使用其他文件格式！</p>
<p>很多时候HR会用手机来登录邮箱或BOSS直聘，然后通过微信或QQ向同事传送文件。PDF格式不需要装插件，还可以保证样式稳定，而Word文件经常排版错乱，这会给我们留下极坏的第一印象。</p>
<h1 id="解读简历中的信息">解读简历中的信息</h1>
<p>牢记：<strong>简历的目的是让招聘者认为你能够胜任他们的工作</strong>。简历内容务必围绕这个主题展开。</p>
<p>如果你的简历质量不高，缺乏有效信息，那么你就容易被Pass掉——连个人简历都写不好，如何保证以后能高质量地完成工作？</p>
<p>收到简历后，我们会在十几秒钟之内扫描你的简历。挖掘到有效信息，才会仔细阅读并通知你参加面试。</p>
<h2 id="页面排版">页面排版</h2>
<p>简历模板请保持整体主题整洁、内容条理清晰、风格样式统一、字体字号得当。不要层次不清，也不要参差不齐，否则会给人留下很坏的印象，例如：</p>
<figure>
<img src="/img/2020-08-29-bad-resume/mixed-1.png" alt="混合样式" />
<figcaption aria-hidden="true">混合样式</figcaption>
</figure>
<p>编程是一项注重细节的工作，而这一段话中，既有半角标点<span
style="display:none;">x</span>,又有全角标点<span
style="display:none;">x</span>;既 有 留 空 格，<span
style="letter-spacing: -0.2em;">又有紧贴的数字序号</span>；既使用<span
style="font-family:&#39;Times New Roman&#39;,Times,serif;">Times New
Roman</span>，<span
style="font-family:&#39;Songti SC&#39;, STSong, NSimSun, SimSun, serif;">又使用宋体</span>；<big>有些字大</big>，<small>有些字小</small>。这样会让人感觉此人“不拘小节”，爱给同事挖坑。</p>
<p>另外：</p>
<ul>
<li>页面篇幅不要太长，两三页就好。社招项目经验多，只写一页不见得能装得下，不用强求。</li>
<li>不要用填表式模板，不好看。</li>
<li>建议自己设计模板，不要用网上被用滥的模板。</li>
<li>简历请保持简约风格，不要太花哨，我们关心的是你的简历内容。</li>
</ul>
<h2 id="个人基本信息">个人基本信息</h2>
<p>请写清姓名、电话、邮箱这三项内容，并保证联系方式畅通。电话用来向你发通知，邮箱用来发Offer，如果这两种联系方式都联系不上，对不起，你的工作机会没了。</p>
<p>其他信息例如籍贯、政治面貌、民族等，没有特殊要求的话不用写，我们不关心这些事情。如果应聘国企或事业单位，而且是党员或预备党员的话，可以把党员身份写上。</p>
<p>如果有软件开发相关的社交媒体账号，例如GitHub账号、CSDN账号、个人博客，而且有一定的成果，那么请务必写到简历中，这会成为一个重大加分项。但是，如果没有，千万别拿这些东西装X——我们会核实你的账号，发现没有什么实质内容的话，例如只有helloworld，或者只是些fork仓库或转载文章，那么社交媒体账号会成为扣分项。</p>
<h2 id="照片">照片</h2>
<p>建议不要放照片，因为脸不是判断你适不适合工作的因素。</p>
<p>如果放照片，请放一张好看的照片。假如照片很难看，或者PS/美颜痕迹明显，那么你的第一印象就会崩坏，甚至会直接把我们“劝退”。</p>
<h2 id="年龄">年龄</h2>
<p>注意：“不限年龄”或者不提年龄限制，不代表没有年龄限制。为规避法律风险，避免被举报就业歧视，招聘者往往会采用更加隐蔽的手段来进行限制，例如把年龄不合适的人直接筛掉。</p>
<p>软件行业是青春饭，30岁以下的年轻人，人傻、肯干、学习能力强，可以少发工资，而且简单工作的话年轻人稍微学习学习就能掌握，所以初中级岗位倾向于招年轻人。为了省钱，很多公司还会设法逼走年龄较大的员工，也就是所谓的“35岁危机”。</p>
<p>如果年龄超过30还想投递简历，除非应聘高级岗位，或者有稀缺技能，或者项目/行业经验非常出色，而且愿意少挣钱，否则没戏。在初中级岗位中，年长者比不过年轻人的。如果已经有10年或以上经验，建议找熟人内推，或者让猎头挖，不要再用普通招聘形式找工作。</p>
<h2 id="性别">性别</h2>
<p>注意：“不招女性”也是就业歧视行为，而且明显违反劳动法，只要去劳动仲裁挥一挥女拳，公司必输。因此有些招聘者不会直说“不招女性”，而是把女性投递的简历直接筛掉，避免引来女拳麻烦。</p>
<p>因为人们对女性有着刻板印象，加上害怕女性怀孕（已经有孩子？那还要二胎吗？）、休产假影响团队整体工作，女性找工作本身就吃亏，所以要更加注意简历中项目经验的优化。</p>
<h2 id="教育信息">教育信息</h2>
<p>请正确填写教育信息。学历从大专/大本开始往上写。虽然你学过的大学知识已经还给了老师，但是你的两个证（毕业证、学位证）还是有用的，不要弄丢。</p>
<h3 id="学历">学历</h3>
<p>学历歧视也是存在的。通常情况下，不仅只接受本科生或研究生（博士生年龄太大，除非算法岗位，否则对应聘者和招聘者来说都不划算），而且只接受重点大学毕业生。本科还得是全日制的，因为光是本科生就够HR忍受的了。尽管大专、专升本或非全日制学生也有工作能力强的，但通常会被无视，而且应聘要求不会说得太明确，免得被举报。</p>
<p>从统计学意义上讲，学生个人素质通常是“重点大学&gt;普通大学&gt;三本专科”，从个人言谈举止方面也能看出比较明显的区别。当然，这只是一般规律：我们也认识到，即便是二本、三本、专科学校的毕业生，也能成为公司的业务或技术骨干，而985学校毕业生也有工作不认真、爱给同事挖坑的。所以，我们会考虑学校，但不会把学校当作唯一考察因素。</p>
<p>我们招聘时不太考虑专业，无论是否计算机软件专业都可以考虑。有些学生虽然非计算机专业毕业，但他们出于个人兴趣爱好选择了软件行业，这类人的个人能力往往比科班出身的人还强。但是，由于非计算机专业学生可能只学过写代码，底子较差，工程意识薄弱，在面试时要注意考察数据结构与算法之类的基础知识。相对的，这类人找工作之前也要补一下相关知识。</p>
<p>最后学历千万不要隐瞒或造假，如果背景调查时发现实际学历与简历内容不一致，那么不好意思，拜拜。就算你工作确实出色，被争取挽留了下来，我们也不敢再提拔你了，连入职都敢违法，谁敢保证你以后不去犯别的法呢？</p>
<h3 id="培训班">培训班</h3>
<p>如果参加过社会培训班，建议调整一下工作的时间节点，把这段经历隐藏掉。如果只参加过社会培训班，没有实际经验，那么请节哀，因为有经验的招聘者能看出来你只去过培训班，没有实际工作经历。</p>
<p>由于培训班培训内容经常与行业实际脱节，而且我们认为花钱进补习班=学习能力差，所以我们不喜欢招参加过培训班的人，甚至会直接将有培训班经历的人给Pass掉。</p>
<h3 id="在校期间表现">在校期间表现</h3>
<p>如果毕业时间不长，而且在大学期间拿过ACM区域赛、全国数学建模竞赛、美国数学建模比赛、飞思卡尔智能车大赛等含金量较高的奖项，或者已经通过英语六级与更高水平的考试，建议将其写到简历上。我们会认为这类人比较有潜力。</p>
<p>其他表现没必要往简历上写。走向社会，学校期间的表现都是浮云了。</p>
<h2 id="工作单位">工作单位</h2>
<p>在工作单位方面，我们关心：</p>
<ul>
<li>工作单位与行业：大厂出身更容易吸引人，而外包公司或小公司出身会让人敬而远之。
<ul>
<li>外包公司：因为外包员工经常做技术含量不高的低级工作，无论工作多少年都只能折算成一年经验，除非项目经验感人，否则倾向于Pass。</li>
<li>小公司、创业公司或非软件公司：在这类公司工作的人，找工作时可能也会遇到困难，因为他们通常没经历过正规开发流程，缺乏规范意识。在面试时要注意考察他们的质量把控情况。</li>
</ul></li>
<li>跳槽频率：假如你频繁跳槽，一年跑一次，甚至不到一年就跑路，你说我们还敢招你吗？
<ul>
<li>如果是不可控原因被迫跳槽，例如公司欠薪、倒闭，建议明确标在简历上，以免被当成频繁跑路。</li>
</ul></li>
</ul>
<p>工作时间不要有断档。如果确实因为脱产进修、裸辞在家或出门环游世界等原因产生了空档，请把空档时间和原因写出来，否则会认为你“逆水行舟，不进则退”。</p>
<p>社招简历，除非是大厂，实习经验写不写都行，因为我们都清楚实习生其实没做什么实际工作。请用最近一两年的项目经历来证明自己工作能力。</p>
<p>请不要编造或隐瞒工作单位。公司会在你入职前后对你进行背景调查，核实工作经历，有可疑之处的话就会拒绝录用你，以免遇到法律问题。</p>
<p>另外建议投简历之前在知乎、看准网（2021年更新：看准网已经没有员工评论了）等平台对即将投递简历的公司进行背景调查，免得刚逃出一个坑，又在不经意间跳进下一个坑。</p>
<h2 id="项目信息">项目信息</h2>
<p>项目信息是简历的重点。我们需要通过你的项目信息来判断你的阅历与能力，例如：</p>
<ul>
<li>你的语言表达能力、总结提练能力如何？</li>
<li>有没有做过大型项目？</li>
<li>是否熟悉大型系统会遇到的问题（数据量大、并发量高，等等）？</li>
<li>有没有经历过完整、规范的工作流程？</li>
<li>独立完成，还是团队协作完成？</li>
<li>在项目中是凑数、普通成员，还是核心成员或救火队员？</li>
<li>曾经参与过哪些行业，是否与本公司一致？</li>
<li>实践过哪些技术栈（Vue/React，Spring
Boot……）？只是肤浅地增删改查，还是深入研究、优化完善？</li>
<li>只做过开发工作，还是做过管理工作，或是多面手？</li>
<li>有没有个人思考？</li>
<li>……</li>
</ul>
<p>对于每个项目，请在不泄露商业机密的前提下简短地介绍一下项目是做什么的，否则我们这些外人会看得一头雾水。然后不要忘记写一下自己在项目中的角色与工作内容，让我们意识到你不是来“打酱油”的。</p>
<p>很多系统，从本质上讲就是一大堆的增删改查，或者说是“数据库前端”，因此工作内容不要只写“开发XX模块”，否则会被认为只做了些微小的增删改查工作。工作内容应当尽量遵循“STAR法则”（情境、任务、行动、结果）来写，让人知道你不是机械地执行命令，而是有针对性地解决了实际问题：</p>
<ul>
<li>情境：需要解决什么问题，或者遇到了什么事情</li>
<li>任务：你的目标是什么</li>
<li>行动：你做了什么事情</li>
<li>结果：最后达到了什么效果。如果能量化，那么务必提供一个有说服力的数字，例如系统响应时间从2s降低到200ms。</li>
</ul>
<p>举一个具体例子：“开发XX功能，用到了Redis”，这没什么意思，因为很多项目都会用这个东西。但是，如果你改写“针对项目XX功能具有瞬时高并发特点，使用Redis实现XX，解决XX问题”，那么就会成为一个亮点。<a
href="/2020/08/20/resume-improvement/">后续</a>会专门介绍如何优化你的项目经验。</p>
<p>项目经历也可以稍微吹吹牛。假如你读过其他人写的代码，熟悉了它的内部逻辑，换成自己写，大体上也能搞出来，那么你完全可以“剽窃”他人的劳动成果，将其据为己有，反正我们又不可能去核实真假。无论实际开发工作是不是你做的，只要面试时候能把事情说得像你做的一样就行。</p>
<p>项目经历请按从新到旧的顺序写。两三年的事情可能已经记不清，而且当时你工作可能还没那么熟练，所以我们面试官也没必要再深究了。</p>
<p>在实际招聘过程中，我们发现大部分人未能正确地拼写他们所用的技术框架或工具，例如把“Spring
Boot”写成“springboot”、“Springboot”，把“MySQL”写成“mysql”、“Mysql”、“MySql”……虽然很多招聘者并不会在意这个事情，但是花点时间查阅正确拼写肯定没有坏处。至少我们会觉得你更加专业。</p>
<h2 id="薪资">薪资</h2>
<p>建议不要写任何有关薪资的内容，包括起始薪资、当前薪资和期望薪资。</p>
<ul>
<li>如果薪资写得低了，那么谈薪资的时候，我们会尽量在你写的范围往下压，这样你会吃亏。</li>
<li>如果薪资写得高了，我们会直接Pass你的简历（工资开不起），或者在面试的时候为难你，以便找理由压低工资，同样会让你吃亏。</li>
</ul>
<p>非要写薪资的话，如何写期望薪资才合适呢？先通过同学、同事、招聘网站等渠道，调查一下所在城市的行业平均收入水平，再估计一下自己实际能力，然后写一个区间，而且最低值不要低于平均水平。例如期望值15k，你写成17～20k（当然你要有这个水平），谈判时没有暴露心理预期，而且谈判失利，只得到16k，那么你实际上还赚了一千块。</p>
<h2 id="个人技能">个人技能</h2>
<p>个人技能是一个“锦上添花”的东西。项目经历这个“锦”不好看的话，个人技能这些“花”也不会起太大作用。这个东西你可以认为是给那些外行HR们进行关键词匹配用的，对内行人来说作用不大。</p>
<p>根据掌握程度分类，通常分为三种程度：精通、熟悉、了解。除非你真的精通到了底层的程度，否则请写成“熟悉”。不熟悉的东西请写成“了解”。因为这些东西很可能会成为面试问题，所以不要写自己不熟悉的东西，以免面试翻车。</p>
<p>技能有容易上手的，也有难于上手的。例如XML、JSON数据格式或Postman工具用几分钟就能学会，而Linux系统操作技能需要花一些时间来积累，所以说自己熟悉JSON就没什么实际意义，而说自己熟悉Linux就会高人半等。尽量不要写那类容易上手的东西，没有意义，写多了还会让人找不到你的特长，结果只能是减分。</p>
<p>不要简单地“熟悉XX”、“了解XX”就结束了，后面要再写点东西，例如“熟悉JavaScript，熟悉原型链、Promise等原理”，这样才能说明你真熟悉JavaScript。另外个人技能不用局限于具体的工具或框架，像英语水平好、热爱研究开源软件、使用Google搜索这类事情都可以写（当然要和软件开发工作相关），只要简历和面试能自圆其说就行。</p>
<h2 id="自我评价">自我评价</h2>
<p>别给自己做评价！</p>
<p>在见过各种年轻员工的工作能力和工作态度之后，我们眼里的自我评价是这样的——</p>
<ul>
<li>已通过英语四级——英语水平差，六级没过</li>
<li>有责任心，工作认真负责——员工做好本职工作，有什么可夸的？</li>
<li>学习能力强——实际上什么都不会，有事情都是去问百度</li>
<li>爱好广泛——没有特长</li>
<li>热爱编程——只会编程，不会别的事情（例如写文档、与用户沟通），无法胜任工作</li>
<li>自我驱动力强——天天刷微博、抖音，你敢说你自我驱动力强？</li>
<li>富有团队精神——个人能力差，工作需要“抱大腿”</li>
<li>热爱运动——技术水平烂，所以拿日常生活充数</li>
<li>能吃苦，肯加班——这可是你说的，后边不要食言！</li>
<li>愿与公司共同进步——找工作太难了，我今天放下身段，不图别的，只求能被贵司的HR大人录用</li>
<li>实现人生价值——钱给够才行，否则不会好好干活的（我们的想法：你先好好干活，我们才能给你涨工资）</li>
</ul>
<p>以上是玩笑。严肃地讲，因为大家写的基本上都是些固定的客套话，都会抱着谦虚的态度，所以“自我评价”没什么实际意义，我们也不会特意看，只会把说大话和瞎抱怨的简历给Pass掉。</p>
<h2 id="其他">其他</h2>
<p>简历中不要出现错别字，不要把英语单词拼错，要使用规范汉字与规范标点符号，并且要符合中文语法，否则你的简历容易被直接Pass掉。要想避免这类细节错误，最简单的方法就是写完之后从头到尾认真检查两遍。</p>
<h2 id="最后一步">最后一步</h2>
<p>请把简历转成PDF格式之后再发送，原因见前文解释。</p>
<h1
id="不要问我们收没收到简历也不要傻等回复">不要问我们收没收到简历，也不要傻等回复</h1>
<p>如果是研发部门直接招聘，那么你的简历发过来之后就会由研发部门直接筛选。如果是公司人力部门招聘，他们会对简历进行一个初选，筛掉看起来不靠谱的简历，再把看起来靠谱的简历交给研发部门精选。所以</p>
<ul>
<li>不要主动问收没收到简历。正常情况下，只要你的简历没有被当成垃圾邮件，那么你的简历肯定被收到了，但处置方法不同团队做法会不一样。你要是问我收没收到，这个我真不知道，而且这种事也不值得去浪费同事时间特意检查。</li>
<li>不要傻等我们回复。如果你的简历看起来合适，我们会很快联系你面试。然而大部分人的简历并不匹配，有些人的简历还是垃圾，这些简历我们会直接扔到垃圾箱里，无暇挨个回复。因此投完简历之后，应该马上去下一家公司投简历，不要一棵树上吊死。</li>
</ul>
<p>如果有事情，正常情况下应该会在工作日的白天联系你，因为HR不加班。碰到晚上或周末联系的，大概率是996公司，或者公司太小没有专业HR，建议敬而远之。BOSS直聘或看准网这样的APP除外，因为他真的有可能是晚上刷抖音的时候顺便看了一下简历。</p>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><strong>作为招聘者，筛选简历的关注点</strong></li>
<li><a
href="/2020/08/20/resume-improvement/">来自招聘者的建议——如何优化简历</a></li>
<li><a href="/2020/08/29/bad-resume/">迷惑简历大赏</a></li>
<li><a href="/2021/02/12/hiring-test-paper/">笔试的设计</a></li>
<li><a href="/2021/05/12/interview/">面试的安排</a></li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDA5LzA0L2RlZmVjdC1vZi1oaXJlLmh0bWw=">招聘的误区<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDExLzAzL2hpcmluZy1leHBlcmllbmNlLTAuaHRtbA==">俺的招聘经验
- 编程随想的博客<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>招聘</tag>
        <tag>简历</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈社招招聘（二）：来自招聘者的建议——如何优化简历</title>
    <url>/2020/08/20/resume-improvement/</url>
    <content><![CDATA[<p>“是金子总会发光”不适用于招聘。为了提高简历通过率，你需要针对招聘者关心的东西来优化你的简历。</p>
<span id="more"></span>
<h1 id="优化整体格式">优化整体格式</h1>
<p>不要忽略排版细节！收到简历时，良好的排版会给人留下良好的第一印象，而差劣的排版会让人怀疑此人是否能认真工作。</p>
<p>你的简历请满足以下要求：</p>
<ol type="1">
<li>内容、版式简洁明了；</li>
<li>排版清晰，逻辑顺畅；</li>
<li>字体字号整齐，标点符号规范；</li>
<li>正确拼写英文单词，例如<code>MySQL</code>而非<code>mysql</code>、<code>Mysql</code>或<code>MySql</code>。</li>
</ol>
<p>请避免套用网上模板：下载量越多，说明用的人越多，也越容易让HR审美疲劳（甚至会让人觉得你参加过培训班）。“keep
simple and
naive”的设计也是可以的，例如只有标题加下划线、正文加项目符号、内容保持对齐三种样式，足够了。</p>
<p>以下问题会导致你直接出局：</p>
<ol type="1">
<li>错别字和语病——中国话都写不好，说明你工作不认真；</li>
<li>篇幅过长，例如写了五六页内容——说明你表达能力和总结提炼的能力差；</li>
<li>页面版式太花哨，或者有背景色/背景图，让人难以阅读重要内容——面试时简历是要打印出来的；</li>
<li>使用了乱七八糟的文件格式，无法打开，或者打开之后乱码——浪费HR时间；</li>
</ol>
<p>投递简历时请将文件转为PDF格式，因为Word格式容易导致排版错乱。</p>
<h1 id="梳理项目经历">梳理项目经历</h1>
<p>工作与项目经历是招聘者最关心的内容。通过项目经历，招聘者可以了解到：</p>
<ul>
<li>你的语言表达能力、总结提练能力如何？</li>
<li>有没有做过大型项目？</li>
<li>是否熟悉大型系统会遇到的问题（数据量大、并发量高，等等）？</li>
<li>有没有经历过完整、规范的工作流程？</li>
<li>独立完成，还是团队协作完成？</li>
<li>在项目中是凑数、普通成员，还是核心成员或救火队员？</li>
<li>曾经参与过哪些行业，是否与本公司一致？</li>
<li>实践过哪些技术栈（Vue/React，Spring
Boot……）？只是肤浅地增删改查，还是深入研究、优化完善？</li>
<li>只做过开发工作，还是做过管理工作，或是多面手？</li>
<li>有没有个人思考？</li>
<li>……</li>
</ul>
<h2 id="反例与分析">反例与分析</h2>
<p>先看几个非常典型的反面案例：</p>
<h3 id="案例一">案例一</h3>
<ul>
<li>项目名称：XXX项目</li>
<li>项目简介：XXX……</li>
<li>工作职责：
<ol type="1">
<li>参与系统需求、设计</li>
<li>开发了XX模块、XX模块</li>
<li>系统部署与维护</li>
</ol></li>
</ul>
<p>分析：没有体现技术栈，我们无法得知你用了什么语言和技术，也无法得知你的参与程度，只能认为你在凑数。</p>
<h3 id="案例二">案例二</h3>
<ul>
<li>项目名称：XXX项目</li>
<li>项目简介：XXX……</li>
<li>工作职责：
<ol type="1">
<li>参与系统需求、设计</li>
<li>开发了XX模块、XX模块，使用了Spring
Boot+MyBatis+Redis+Kafka+XXXXXX</li>
<li>系统部署与维护，系统部署在Linux服务器，使用Tomcat+MySQL+XXX</li>
</ol></li>
</ul>
<p>分析：虽然介绍了技术栈，但只是简单地堆砌单词，没有结合项目具体工作描述，无法体现出你是如何利用这些技术的。</p>
<h3 id="案例三">案例三</h3>
<ul>
<li>项目名称：XXX项目</li>
<li>项目简介：XXX……</li>
</ul>
<p>分析：只介绍了项目，没写自己做什么事情，怎么认定你有项目经验？（这就好比我把QQ、微信、支付宝等产品介绍写到简历中，我就是参与过大型互联网产品开发的人了）</p>
<h3 id="案例四">案例四</h3>
<ul>
<li>项目名称：XXX项目</li>
<li>项目简介：XXX……</li>
<li>工作内容：
<ul>
<li>针对XX功能进行判断：在A情况下，系统采取a措施，处理b数据，做出c操作，实现d效果；在E情况下，采用f方法，提示用户录入g数据，根据h规则与i规则进行j处理，得出k结果。</li>
</ul></li>
</ul>
<p>分析：请专注于技术，不要钻到业务细节中，一是招聘者不会关心具体业务（我们用不到你们的业务），二是你会泄露你们公司的商业机密。</p>
<h2 id="整理工作内容">整理工作内容</h2>
<p>通过上面几个反例，你需要意识到合适的项目经历应该包含以下内容：</p>
<ul>
<li>项目名称</li>
<li>项目背景</li>
<li>技术栈</li>
<li>工作职责（说明不是凑数的）</li>
<li>个人亮点（说明不是应付工作的）</li>
</ul>
<h3 id="项目背景">项目背景</h3>
<p>用简洁的语言交待项目背景：</p>
<ul>
<li>项目或产品大概是做什么事情的；</li>
<li>项目的意义或优势，例如政府项目可以是提高了信息化管理水平；</li>
<li>简要交待技术栈，用了什么框架，用了什么技术。</li>
</ul>
<p>目的是让他人对你项目的价值、技术有个基本的了解。</p>
<h3 id="工作职责">工作职责</h3>
<p>简单讲一下自己在团队中的主要职责（例如开发人员），让招聘者知道你在项目中不是吃干饭的。当然，如果项目经历充实，不写角色也无妨。</p>
<h3 id="提炼亮点">提炼亮点</h3>
<p>要想说明工作能力强，就要拿出实际的证据，例如解决了项目问题，或者干出了业绩，拿亮点闪瞎招聘者的眼睛。</p>
<p>工作内容应当尽量遵循“STAR法则”（情境、任务、行动、结果）来写，让人知道你不是机械地执行命令，而是有针对性地解决了实际问题：</p>
<ul>
<li>情境：需要解决什么问题，或者遇到了什么事情</li>
<li>任务：你的目标是什么</li>
<li>行动：你做了什么事情</li>
<li>结果：最后达到了什么效果。如果能量化，那么务必提供一个有说服力的数字，例如系统响应时间从2s降低到200ms，或者承担了30%的开发工作。</li>
</ul>
<p>举两个典型例子：</p>
<ul>
<li>开发XX、XX模块
<ul>
<li>分析：只有“行动”，没有背景和结果，也无法体现XX模块的重要性，会让人认为只做了一些基础的增删改查。</li>
<li>优化：
<ul>
<li>使用XXX框架、XX技术
<em>（行动：使用了XX技术）</em>，开发XX、XX等<strong>核心功能</strong>模块
<em>（如果是核心功能，强调核心）</em></li>
<li>使用XXX框架、XX技术
<em>（行动：使用了XX技术）</em>，开发XX、XX等模块，开发工作量占全系统的30%。<em>（如果不是核心功能，强调工作量）</em></li>
</ul></li>
</ul></li>
<li>SQL性能优化
<ul>
<li>分析：优化怎么做的？有效果吗？</li>
<li>优化：
<ul>
<li>通过慢查询日志、执行计划识别分析执行效率较低的SQL
<em>（行动之一：通过两种方法发现问题）</em>，根据具体情况改写SQL，调整索引
<em>（行动之二：通过改SQL和建索引解决了这个问题）</em>，提高数据库查询效率，查询时间从平均xx降低到xx
<em>（情境和结果：系统性能低，经过优化，系统性能提高）</em>。</li>
</ul></li>
</ul></li>
</ul>
<p>除主要工作外，为了提高工作效率而搞研究也是能接受的：</p>
<ul>
<li>编写Python脚本
<em>（行动：写Python脚本）</em>实现XX、XX等任务的自动化
<em>（目标：自动化）</em>，大幅提高团队工作效率，有效地避免了内容遗漏、操作失误等问题
<em>（情境和结果：解决了人工操作效率低、容易出错的问题）</em>。</li>
<li>在开发过程中指导其他员工，并进行了X次技术分享活动，主题包括XX、XX等。</li>
</ul>
<p>如果是一个参与程度不高的项目，提练不出什么亮点，那么建议隐藏掉，只谈大项目。<!-- TODO 加分：系统架构、整体认知；带团队经历 ；忌讳：学习了XXX；写不熟悉东西 --></p>
<h3 id="加分项">加分项</h3>
<p>以下事情会从侧面证明你的工作能力，如果与你参与的项目匹配，请在简历上进行体现：</p>
<ul>
<li>成型产品：有成型产品，说明系统已经上线了。如果产品评价好，说明系统做得不错，不是糊弄的。</li>
<li>技术栈：大家都喜欢新技术。用过各类新技术的员工更受欢迎。</li>
<li>团队规模：小团队工作可以随意一些，而大团队工作不规范就会变成屎山。在大型团队中工作，阅历应该更丰富了。</li>
<li>合同额、开发周期：项目制公司的话，合同额和开发周期也能证明软件规模。做过大型项目，阅历和规范程度应该会比较高。</li>
<li>用户量：道理同上。</li>
<li>相同行业：就算技术差点，至少业务知识不是零蛋。</li>
</ul>
<h3 id="如果技术栈太老旧">如果技术栈太老旧</h3>
<p>因为商业项目更加追求稳定，所以很多项目仍然用比较旧的技术栈，甚至还在使用JDK
5，这是正常现象。不必隐瞒具体技术：老旧技术用熟了，能够掌握基本原理，切换起来也容易。</p>
<p>很多公司希望员工进去就能干活。完全没碰过新技术的话，找工作会非常吃亏，所以建议在简历中体现自己特意学习过某些新技术（例如因XX技术较为落后，曾自学XXX并尝试用新技术实践项目功能，让HR觉得你比较上进），或者直接假装自己项目是用新技术开发的。但是，除了在简历提及以外，你必须要确实实践过，否则面试会穿帮。</p>
<h2 id="优化结果">优化结果</h2>
<p>根据以上建议，简历优化结果如下：</p>
<ul>
<li>项目名称：XXX项目</li>
<li>项目简介：XXX，目前用户访问量已达XXX万。项目使用了XXX、YYY、ZZZ等技术。<em>（把项目使用到，但是你自己没有深入使用过的技术框架放到项目简介里，让招聘者了解你们项目大体的技术栈）</em></li>
<li>工作职责：主要负责前期需求调研、需求编写、系统设计，以及XX与XX模块开发工作。<em>（让人知道你的主要职责是开发人员，而不是测试、运维或者PPT岗位）</em></li>
<li>工作内容：<em>（此处专注于展示亮点）</em>
<ul>
<li>作为项目主要成员，使用XX框架开发XX模块，实现XX、XX、XX等核心功能。</li>
<li>使用XXX作为消息队列服务，实现后台数据推送功能。</li>
<li>在技术选型过程中，考虑到XX功能会存在瞬时高并发场景，选择XX框架进行处理。实际开发过程中，利用XX框架，将XX数据进行XX处理，并发能力xx%。</li>
<li>通过慢查询日志、执行计划识别分析执行效率较低的SQL，根据具体情况改写SQL，调整索引，提高数据库查询效率，查询时间从平均xx降低到xx。</li>
<li>与其他同事合作，对项目进行拆分和重构，实现基于XXX的持续集成和自动化部署。</li>
<li>编写Python脚本实现XX、XX等任务的自动化，大幅提高团队工作效率，有效地避免了内容遗漏、操作失误等问题。</li>
<li>在开发过程中指导其他员工，并进行了X次技术分享活动，主题包括XX、XX等。</li>
</ul></li>
</ul>
<p>这样写，就算仍然找不到工作，至少会有更多公司通知你参加面试了。</p>
<h1 id="个人技能优化">个人技能优化</h1>
<p>通常简历上还会写着“熟悉XXX”、“了解XXX”。这个地方也是有优化空间的：</p>
<ol type="1">
<li>注意招聘中的招聘要求（JD），“熟悉”、“了解”的内容尽量贴近JD。碰到不太懂技术、会用Ctrl+F来检查单词的HR时不吃亏。</li>
<li>梳理你“熟悉”、“了解”的东西，确定这些技能的学习成本。尽量少写那些只需要几分钟或者一两天就能掌握的东西，多写一些需要时间积累才能熟练掌握的东西。</li>
<li>不要简单地“熟悉XX”、“了解XX”。熟悉了解之后要再写点东西，例如“熟悉JavaScript，掌握原型链、Promise等原理”，这样才能说明你真熟悉JavaScript。</li>
<li>如果你英语好，或者会翻墙（注意不要明说，以免因言获罪），或者有一些软件开发方面的个人爱好，也可以稍微提及。</li>
</ol>
<h1 id="了解其他加分项与减分项">了解其他加分项与减分项</h1>
<h2 id="加分项-1">加分项</h2>
<p>如果工作时间不长，大学英语六级过了，或者拿过ACM区域赛之类等含金量较高的奖项，请把它们写到简历中。</p>
<p>如果有软考高级证书，或者拿到了行业认证（例如Oracle认证），请务必写到简历里。</p>
<p>如果以下账号有实际内容，也请写到简历中让人知道：</p>
<ul>
<li>GitHub：例如参与过开源项目，提交过代码，或者自己的GitHub仓库被打了很多Star，我们会认为你有一定的能力。</li>
<li>个人博客：如果个人博客活跃，而且有一些写得好的原创文章，我们就知道你对技术有所思开，擅长总结。</li>
<li>技术论坛：例如活跃于Stack
Overflow，我们会认为你对技术掌握比较好，有解决问题能力。</li>
</ul>
<p>注意：如果你在简历中写了社交媒体链接，那么我们一定会进入这些网站来核实真伪。假如你的GitHub或博客中缺乏原创内容，只有些helloworld级的练习文件，或者都是些转载或fork内容，或者在找工作时候才胡乱凑些东西，那么我们会认为你是在装X，然后把你的简历给Pass掉。</p>
<h2 id="减分项">减分项</h2>
<ul>
<li>培训班经历：由于培训班培训内容经常与行业实际脱节，所以很多公司不喜欢招参加过培训班的人，甚至会直接将有培训班经历的人给Pass掉。实际工作中用到的技术知识基本上都是“实践型”知识，照着网上的培训教程就能学会基本用法，实在没必要去培训班。</li>
<li>外包公司经历：外包公司员工经常被安排做一些初级工作，接触不到核心功能与技术。如果简历中体现不出你有所思考，那么我们只能当作民工来使唤了。</li>
<li>小公司/非软件公司经历：小公司，或主业不是软件的公司（例如电子商务），通常缺乏标准开发规范，其中的开发者可能也缺乏规范意识。</li>
</ul>
<h1 id="最后的注意事项">最后的注意事项</h1>
<p>写完之后务必从头到尾认真检查几遍。如果有信得过的哥们，可以再让他们帮忙检查一下简历。</p>
<p>只要你能把事情说得像自己做过一样，那么项目经历就可以稍微吹吹牛，毕竟我们不可能去你们公司系统里核实代码提交记录。但是，简历的内容会被拿来当作面试的话题，因此要提前想好实施细节（甚至包括版本号），而且不懂的东西不要乱编，以免被打脸。</p>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><a
href="/2020/08/16/resume-filtering/">作为招聘者，筛选简历的关注点</a></li>
<li><strong>来自招聘者的建议——如何优化简历</strong></li>
<li><a href="/2020/08/29/bad-resume/">迷惑简历大赏</a></li>
<li><a href="/2021/02/12/hiring-test-paper/">笔试的设计</a></li>
<li><a href="/2021/05/12/interview/">面试的安排</a></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>招聘</tag>
        <tag>简历</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈社招招聘（三）：迷惑简历大赏</title>
    <url>/2020/08/29/bad-resume/</url>
    <content><![CDATA[<p>本文收录个人在筛选简历时看到的令人哭笑不得的内容。在博君一笑的同时，希望也能引以为戒，不要因本可以避免的低级错误耽误前途。</p>
<p>为保护当事人隐私，本文会用文字转述简历内容，或者对简历内容进行处理后再截图。本文无意针对任何人，如果你发现简历内容是你写的，请保持低调并吸取教训，不要回怼，以免贻笑大方。</p>
<span id="more"></span>
<h1 id="与hr躲猫猫">与HR躲猫猫？</h1>
<ul>
<li><code>电话：130****5678  邮件：zhang***@163.com</code>
<ul>
<li><strong>点评：</strong>我对你的经验比较满意，请问如何通知你参加面试？</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>电话：1301234567</code>
<ul>
<li><strong>点评：</strong>同上。（电话位数错了，您拨打的电话是空号）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>电话：13012345678</code>（打了两三遍也打不通）
<ul>
<li><strong>点评：</strong>比上面那两位强点，至少能把电话打出去了。（所以请保持电话畅通）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>邮件：123456789qq.com</code>
<ul>
<li><strong>点评：</strong>本来QQ邮箱就在鄙视链最底端，少写个@符号，鄙视链长度+1。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>照片：<img src="/img/2020-08-29-bad-resume/modest-3.png" />
<ul>
<li><strong>点评：</strong>既不是三次元也不是二次元，失望。（请不要放照片！如果非要放照片，请放一张颜值高而且又不做作的照片）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>工作单位：20XX.X-20XX.X  保密</code>
<ul>
<li><strong>点评：</strong>简历审查结果——保密。（公司会对入职者进行背景调查。不核实学历和以往工作单位的话，公司是不敢录用的，怕在法律方面出问题。如果是涉密单位，请写成“涉密”）</li>
</ul></li>
</ul>
<p> </p>
<h1 id="逼死强迫症症">逼死强迫症症</h1>
<ul>
<li><code>了解Vue、BootStrep等框架</code>
<ul>
<li><strong>点评：</strong>很抱歉，我们公司使用Bootstrap框架进行开发。作为BootStrep开发者，您不适合我们公司的工作。（不要把关键词语写错）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>熟练使用postMan工具</code>
<ul>
<li><strong>点评：</strong>您也熟练地使用了<small>小</small>驼<small>峰</small>命名法？（IT行业有非常多的英文词语，请使用正确的大小写来拼写这些名字。该软件的正确写法是<code>Postman</code>，写成<code>postman</code>或<code>POSTMAN</code>会降低我们的好感度，写成<code>postMan</code>则直接PASS）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>利用Redis技术较少系统的压力</code>
<ul>
<li><strong>点评：</strong>输入法出买了你，增加了你求值的鸭梨。（别写错别字）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>掌握HTML5、javascript、CSS3、XML等WEb前段基础</code>、<code>具有良好的编码习惯，习惯在代码中加入注视说明</code>
<ul>
<li><strong>点评：</strong>“WEb前段”和“注视说明”是哪门子传统艺能？（中英文双语都有错字，绝了……）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>熟练SpringBoot、SpringCloud的使用</code>
<ul>
<li><strong>点评：</strong>熟练？你为什么会这么熟练啊？（请保证自己写的东西符合汉语语法）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>系统使用javaweb开发，后端使用springboot redis mybatis rabbitmq mysql进行调用。主要负责需求文档 设计文档 数据库设计 系统架构设计 功能开发 后端与vue.js前端交互</code>
<ul>
<li><strong>点评：</strong>大哥麻烦用一下标点符号否则句子那么长看起来很费劲而且简历是求职重要依据那么使用规范汉字和规范标点符号都是最起码的事情吧还有后面那堆词语都用空格分割了为什么前面的javaweb反倒没使用空格难道这是一个固定词语吗（请使用规范的标点符号）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>工作经历：XXXXX公司       XXXX.X-XXXX.X    开发攻城狮</code>
<ul>
<li><strong>点评：</strong>我们不是动物园，我们只招聘人类。（不要用外号描述工作。从面试环节了解你的性格之前，外号既可以理解成热爱工作，也可以理解成对现有工作的不满或嘲讽）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>混合样式——<img src="/img/2020-08-29-bad-resume/mixed-1.png"
alt="混合样式" />
<ul>
<li><strong>点评：</strong>既用半角标点<span
style="display:none;">x</span>,又用全角标点<span
style="display:none;">x</span>;既 要 留 空 格，<span
style="letter-spacing: -0.2em;">又紧贴列表数字序号</span>；既使用<span
style="font-family:&#39;Times New Roman&#39;,Times,serif;">Times New
Roman</span>，<span
style="font-family:&#39;Songti SC&#39;, STSong, NSimSun, SimSun, serif;">又使用宋体</span>；<big>有些字大</big>，<small>有些字小</small>……我的<em>强迫症</em>又<strong>发作</strong>了。（请统一字体、字号等格式，这是写文档最起码的要求之一）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>高端Word模板——<img src="/img/2020-08-29-bad-resume/preview.png" />
<ul>
<li><strong>点评：</strong>你使用了高端大气上档次的简历模板，而我低调奢华有内涵的MacBook
Pro却无法正确显示，实在可惜。（你不知道HR会用什么东西来看你的简历，所以请把简历转成全设备通用的PDF格式之后再投递）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>躲开了上面两个坑，跳进了另一个坑：<img
src="/img/2020-08-29-bad-resume/noformat.png" />
<ul>
<li><strong>点评：</strong>格式整齐，模板兼容性好，然而内容没有条理，看不清楚！（请注意使用空行、分割线、项目符号等形式把不同项目分割开，保持清晰）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>简历表：<img src="/img/2020-08-29-bad-resume/table.png" />
<ul>
<li><strong>点评：</strong> | 项目 | 说明 |
|------------|------------------------------------| | 总体排版 |
表格式简历看起来不舒服 | | 内容项 |
格式不一致，而且明明有表头，还在使用冒号 | | 项目经历亮点 | 无 | | 结论
| PASS |</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>システム処理功能开发，SpringMVC+Redis+Kafka予約受付実現。</code>
<ul>
<li><strong>点评：</strong><span
lang="ja">我們的、中国人的幹活。你的、日本語的、八格牙路、死啦死啦的！</span>（即使做过外国项目，也请用中国话来表达）</li>
</ul></li>
</ul>
<p> </p>
<h1 id="装不成反被">装◯不成反被◯</h1>
<ul>
<li><code>精通Java</code>
<ul>
<li><strong>点评：</strong>只要你敢说精通，我就敢把面试问题准备到字节码那种等级。所以，除非你真的精通底层原理，否则不要用“精通”这个词语。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>GitHub：https://github.com/xxxxxx</code>
<ul>
<li><strong>点评：</strong><img
src="/img/2020-08-29-bad-resume/gayhub.png" alt="新账号" />
GitHub网站是个人就能注册，所以有账号不代表你水平高。如果你想证明自己能力，请在找工作之前就在GitHub或个人博客放入一些有实质内容的、自己原创的东西，否则会被视为装◯。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>Blog：https://xxxxxx.me</code>
<ul>
<li><strong>点评：</strong><img
src="/img/2020-08-29-bad-resume/502.png" />
我们要通过你的Blog来判断你的能力，因此请保证网站状态正常，能够在中国进行访问，并且不要设置注册墙或付费墙（必须登录甚至付费之后才能看到内容），否则把地址贴出来就没有意义了。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>最新版本简历参见boss直聘电子版</code>
<ul>
<li><strong>点评：</strong>请扫描以下二维码查看简历审核结果<br><img
src="/img/2020-08-29-bad-resume/lazyguy.png"
alt="扫描二维码获取简历审核结果" /></li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>期望从事职业：互联网软件工程师、数据库开发工程师、Java开发工程师</code>
<ul>
<li><strong>点评：</strong>不要同时往一家公司的多个岗位投简历。顺便提醒一下，日常生活中不要同时搞多个对象，否则后果更严重——<a
href="https://baike.baidu.com/item/%E7%99%BD%E5%AD%A6%E7%8E%B0%E5%9C%BA"><img
src="/img/2020-08-29-bad-resume/wa2.jpg" /></a></li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>个人优势：熟悉spring框架，熟悉springmvc框架，熟悉oracle数据库，熟悉mybatis框架……（中间内容略）……写不下了……</code>（备注：此人直接使用BOSS直聘生成的电子简历）
<ul>
<li><strong>点评：</strong>你太优秀，我们公司装不下了……</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>个人爱好：唱歌、跑步、篮球</code>
<ul>
<li><strong>点评：</strong>全民制作人们大家好，我是练习时长两年半的个人练习生蔡徐坤，喜欢唱、跳、rap、篮球，music……（鸡你太美～）<img
src="/img/2020-08-29-bad-resume/chickenyoubeautiful.jpg"
alt="鸡你太美" />
不建议写个人爱好，除非你了解到目标公司喜欢团建活动，而且你的爱好恰好可以在团建活动中派上用场。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>证书奖项：XX学院社团活动积极分子、XX学院三等奖学金、计算机二级证书</code>
<ul>
<li><strong>点评：</strong>不要列举含金量比较低的奖项，也不要列举985/211学校中多数人都能拿到手的证书。（例外情况：如果大学拿过ACM区域赛等与软件工作相关，而且含金量较高的奖项，写在简历上可以加分）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>热爱生活，不接受加班</code>
<ul>
<li><strong>点评：</strong>我也热爱生活，但是为了守护我来之不易的幸福生活，我不接受你。（你以为我们愿意安排加班吗？）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>外包勿扰</code>
<ul>
<li><strong>点评：</strong>我们这些使唤外包的甲方大爷们浪费您宝贵的时间了，请谅解。（这类事情请提前调查好，或者先向公司确认，然后再决定是否投简历。不要把这种字眼写到简历里）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>个人简历：https://xxxx.github.io</code>
<ul>
<li><strong>点评：</strong><br>结局一：网站打不开，没有简历，Pass；<br>结局二：在网络上自我<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJUJBJUU4JTgyJTg5JUU2JTkwJTlDJUU3JUI0JUEy">出道<i class="fa fa-external-link-alt"></i></span>，工作还没找上门，却遭到了各类骚扰。<br>（虽然直接扔网址虽然是一种很装X的投递方法，但是GitHub
Pages在中国访问不正常，而且有些公司不能直接上外网，看不了，所以该写的内容还得写）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>（中英文双语简历）<code>20XX.X-20XX.X  XXX System  Android Development</code>、<code>20XX.X-20XX.X  XXX System  Background Development</code>、<code>analysed the whole process from points generation to points usage, designed relevant pages; finished pages development of xxx, xxx, xxx; optimized login process together with credits, database accessing and data updating</code>
<ul>
<li><strong>点评：</strong>Your English is too simple, sometimes
naïve!（除非应聘外企，否则不要写英文简历。写英语时请使用地道的英语，不要用Chinglish）</li>
<li>顺便帮他纠正一下英语表达：<code>Android developer</code>、<code>backend developer</code>、<code>Analyzed the whole process from point production to point consumption and developed relevant pages; Developed pages of xxx, xxx, xxx; Improved the login program by optimizing database queries.</code>（最后一条，中英原文都看不懂，只好按自己理解编一个说法了）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>校学生会干部</code>、<code>校XX社团主席</code>
<ul>
<li><strong>点评：</strong>所以想证明自己虽然开发能力不行，但是可以陪用户喝酒？（都工作几年了，你觉得大学时候的事情还能用来证明工作能力吗）</li>
</ul></li>
</ul>
<p> </p>
<h1 id="谦虚是一种美德">谦虚是一种美德</h1>
<ul>
<li>个人能力之一：<img src="/img/2020-08-29-bad-resume/modest.png" />
<ul>
<li><strong>点评：</strong>在简历方面，谦虚不会使人进步。（不要自曝缺点）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>个人能力之二：<img src="/img/2020-08-29-bad-resume/modest-2.png" />
<ul>
<li><strong>点评：</strong>　　　　　　　　　　　　　　　　　　　　（　　　　　　　　　　　）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>学历：高中（本科为XXXX大学XX专业，因挂科较多，加上大四时家中发生了各类事情，未能拿到毕业证、学位证）</code>
<ul>
<li><strong>点评：</strong>学历是硬条件，没有大学毕业证，你一定找不到工作，但是，你还可以用自主创业的方法来延迟失业。正如那句话所说：当上帝关了这扇门，一定会为你打开另一扇窗，只不过窗户在十八楼。祝你好运！（没有本科学历，一般公司无法办入职手续。这种情况下只能去不正规的小公司，或者用创业的方式来延迟失业）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>自学成才</code>
<ul>
<li><strong>点评：</strong>失败了，知道因为啥失败吗？这一个厨师不看菜谱，看上兵法了，撤！（在招聘者眼中，无论实际情况如何，强调自学成才=学得不精）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>技能：Java [============........] 60%</code> 或
<code>技能：Java [============........] 熟悉</code>
<ul>
<li><strong>点评：</strong>进度条到100%之后会发生什么事情，报错吗？（不要用进度条表示掌握程度，因为你不可能界定100%的范围）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>我不仅学会了MySQL数据库，而且对Spring Boot框架有了一定的了解，同时意识到团队协作是项目成功不可或缺的部分</code>
<ul>
<li><strong>点评：</strong>请先补交你们学校的学费，拿到毕业证书，然后再来找工作。（企业是招人干活的，不是培训班，所以工作经历应该是讲自己完成了什么工作，解决了什么问题，给企业带来了什么成果，而不是自己学会了什么）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>愿意学习先进的技术
<ul>
<li><strong>点评：</strong>愿意学习 =
还没有实际工作能力，先想法混到一份工作，然后走一步看一步吧。（道理同上）</li>
</ul></li>
</ul>
<p> </p>
<h1 id="其他">其他</h1>
<ul>
<li><code>政治面貌：中共党员</code>
<ul>
<li><strong>点评：</strong>找到一个可以让你996的正当理由了——不忘初心，牢记使命！（除非有特殊要求，软件开发工作中没人在乎你属于哪个党派。国企或事业单位除外）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>Blog：http://60.205.xxx.xxx:8090/</code>、<code>Blog：https://www.jianshu.com/u/202cb962ac59075b964</code>
<ul>
<li><strong>点评：</strong>小隐隐于野，中隐隐于市，大隐隐于朝……（虽然没毛病，也不会因此认为你怎么样，不过这种URL真的不太好看）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>工作经历：20XX.X-20XX.X  XXXX公司  Java开发工程师  15000元/月</code>
<ul>
<li><strong>点评：</strong>无论是起始工资、当前工资，还是预期工资，不要透露任何与工资有关系的情报，这对你未来谈薪非常不利。特别是今年，疫情导致求职者找工作更加困难，地位更低，谈薪资时招聘方可以把你的收入压得更狠。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>南京岗位：<code>期望工作地点：南宁</code>、<code>期望工作地点：南昌</code>
<ul>
<li><strong>点评：</strong>要不要去南通、南平、南阳或南充工作？（请看清工作地点之后再投简历。有些工作的工作性质特殊，需要驻场或出差，工作地点与公司地点不一致，这种情况下建议主动询问工作地点，然后再投简历）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>期望薪资：1.5~2k/月</code>、<code>期望薪资：15~20元/年</code>
<ul>
<li><strong>点评：</strong>你还年轻，不要作贱自己！（不要写薪资，如果非要写，别把货币单位写错）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li>锟斤拷锟斤拷锟斤拷：<img
src="/img/2020-08-29-bad-resume/luanma.png" />
<ul>
<li><strong>点评：</strong>锟斤拷锟斤拷锟斤拷锟MacBook斤拷锟斤拷锟斤拷（锟斤拷锟斤拷锟斤Word拷锟斤拷PDF锟斤拷拷拷）</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>由于XX部门与XX部门互相推诿，导致实际交付效果不理想</code>
<ul>
<li><strong>点评：</strong>你所写的负面内容已经成为本文中的一个负面案例，以便让其他人吸取教训。（不要写负面内容，就算要证明自己能够解决问题，也不要用负面语言来表达）</li>
<li>实践证明，经常散发消极情绪的人会对团队成员工作热情与稳定性造成负面影响，间接地危害项目交付质量，因此要设法改造或踢掉此类成员。</li>
</ul></li>
</ul>
<p> </p>
<ul>
<li><code>通过请求方法取得用户输入参数，在数据库查询用户XXX信息，存入PO对象。检查对象中的XXX字段，如果为0，说明无业务办理权限，程序应返回“没有操作权限”的错误提示；否则开启事务，生成XX信息，并更改XX表，将XX数据修改为XX，操作完成后提交事务，并返回“操作成功”信息，结束流程。</code>
<ul>
<li><strong>点评：</strong>请去培训班工作，不仅能挣到钱，还能帮助更多人失业，多好！（不要讲实现细节，容易泄漏商业机密，别人也没有兴趣看，而且会被认为简历写不出什么有含金量的事情所以只好凑数。像上面这个，直接说<code>用XX框架开发XX模块</code>就够了）</li>
</ul></li>
</ul>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><a
href="/2020/08/16/resume-filtering/">作为招聘者，筛选简历的关注点</a></li>
<li><a
href="/2020/08/20/resume-improvement/">来自招聘者的建议——如何优化简历</a></li>
<li><strong>迷惑简历大赏</strong></li>
<li><a href="/2021/02/12/hiring-test-paper/">笔试的设计</a></li>
<li><a href="/2021/05/12/interview/">面试的安排</a></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>招聘</tag>
        <tag>简历</tag>
      </tags>
  </entry>
  <entry>
    <title>找回丢失的Word表格边框</title>
    <url>/2020/09/14/word-table-border-recovery/</url>
    <content><![CDATA[<p>Word有一个奇葩bug：有很小的概率会发生表格边框全部消失的现象。如果表格数量太多，挨个表格补回边框肯定不现实，幸运的是，我们可以用宏来解决这个问题。</p>
<span id="more"></span>
<h2 id="适用情况">适用情况</h2>
<p>整篇文档的表格都使用了统一的表格边框样式，例如全部为“所有框线”。与统一样式不同的特殊表格只能跑完程序手工处理。</p>
<h2 id="操作步骤">操作步骤</h2>
<ol type="1">
<li>用鼠标右键点击功能区，在弹出菜单中选择“自定义功能区”。 <img
src="/img/2020-09-14-word-table-border-recovery/word1.png" /></li>
<li>在弹出对话框中，右侧自定义功能区将“开发工具”打上对勾，确定。</li>
<li>在功能区出现了“开发工具”，点进去，然后选择最左面的“Visual Basic”。
<img src="/img/2020-09-14-word-table-border-recovery/word2.png" /></li>
<li>在弹出的Visual Basic中，选择“插入”菜单中的“模块”选项。</li>
<li>把本文后面的程序粘贴到里面。</li>
<li>点击“运行”菜单中的“运行子过程/用户窗体”，在弹出的对话框中选择“恢复丢失的表线”。</li>
<li>等程序运行完成。如果提示错误，那么需要回到Word，翻到指定页面手工处理一下。</li>
<li>回到Visual
Basic，对着左侧的“模块1”点右键，选择移除，然后选择否，把代码删除，免得保存时候麻烦。
<img src="/img/2020-09-14-word-table-border-recovery/word3.png" /></li>
<li>保存、备份。你总不想让边框再丢失了吧？</li>
</ol>
<h2 id="程序内容">程序内容</h2>
<h3 id="所有框线">所有框线</h3>
<p><img
src="/img/2020-09-14-word-table-border-recovery/table1.png" /></p>
<pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token keyword">Sub</span> 恢复丢失的表线<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">On</span> <span class="token keyword">Error</span> <span class="token keyword">GoTo</span> e
    <span class="token keyword">Dim</span> msg <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> t <span class="token keyword">As</span> Table
    msg <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">For</span> <span class="token keyword">Each</span> t <span class="token keyword">In</span> ActiveDocument<span class="token punctuation">.</span>Tables
        t<span class="token punctuation">.</span><span class="token keyword">Select</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderTop<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineStyle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineWidth
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderColor
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderLeft<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineStyle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineWidth
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderColor
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderBottom<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineStyle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineWidth
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderColor
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderRight<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineStyle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineWidth
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderColor
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderHorizontal<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineStyle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineWidth
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderColor
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderVertical<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineStyle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderLineWidth
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> Options<span class="token punctuation">.</span>DefaultBorderColor
        <span class="token keyword">End</span> <span class="token keyword">With</span>
    <span class="token keyword">Next</span>
    
    <span class="token keyword">If</span> msg <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token string">""</span> <span class="token keyword">Then</span>
        MsgBox <span class="token string">"处理以下页面时发生错误，请复查："</span> <span class="token operator">&amp;</span> vbCrLf <span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> vbExclamation
    <span class="token keyword">End</span> <span class="token keyword">If</span>
    
    <span class="token keyword">Exit</span> <span class="token keyword">Sub</span>
e<span class="token punctuation">:</span>
    msg <span class="token operator">=</span> msg <span class="token operator">&amp;</span> Selection<span class="token punctuation">.</span>Information<span class="token punctuation">(</span>wdActiveEndAdjustedPageNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span> vbCrLf
    <span class="token keyword">Resume</span> <span class="token keyword">Next</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="外边框加粗">外边框加粗</h3>
<p>假定边框1.5磅，内部0.5磅：</p>
<p><img
src="/img/2020-09-14-word-table-border-recovery/table2.png" /></p>
<pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token keyword">Sub</span> 恢复丢失的表线<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">On</span> <span class="token keyword">Error</span> <span class="token keyword">GoTo</span> e
    <span class="token keyword">Dim</span> msg <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> t <span class="token keyword">As</span> Table
    msg <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">For</span> <span class="token keyword">Each</span> t <span class="token keyword">In</span> ActiveDocument<span class="token punctuation">.</span>Tables
        t<span class="token punctuation">.</span><span class="token keyword">Select</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderLeft<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth150pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderRight<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth150pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderTop<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth150pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderBottom<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth150pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderHorizontal<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth050pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderVertical<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth050pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
    <span class="token keyword">Next</span>
    
    <span class="token keyword">If</span> msg <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token string">""</span> <span class="token keyword">Then</span>
        MsgBox <span class="token string">"处理以下页面时发生错误，请复查："</span> <span class="token operator">&amp;</span> vbCrLf <span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> vbExclamation
    <span class="token keyword">End</span> <span class="token keyword">If</span>
    
    <span class="token keyword">Exit</span> <span class="token keyword">Sub</span>
e<span class="token punctuation">:</span>
    msg <span class="token operator">=</span> msg <span class="token operator">&amp;</span> Selection<span class="token punctuation">.</span>Information<span class="token punctuation">(</span>wdActiveEndAdjustedPageNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span> vbCrLf
    <span class="token keyword">Resume</span> <span class="token keyword">Next</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="仅上下和表头三条横线">仅上、下和表头三条横线</h3>
<p>假定边框1.5磅，内部0.5磅：</p>
<p><img
src="/img/2020-09-14-word-table-border-recovery/table3.png" /></p>
<pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token keyword">Sub</span> 恢复丢失的表线<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">On</span> <span class="token keyword">Error</span> <span class="token keyword">GoTo</span> e
    <span class="token keyword">Dim</span> msg <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">,</span> t <span class="token keyword">As</span> Table
    msg <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">For</span> <span class="token keyword">Each</span> t <span class="token keyword">In</span> ActiveDocument<span class="token punctuation">.</span>Tables
        t<span class="token punctuation">.</span><span class="token keyword">Select</span>

        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderTop<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth150pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderBottom<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
            <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth150pt
            <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
        <span class="token keyword">End</span> <span class="token keyword">With</span>
        
        Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderLeft<span class="token punctuation">)</span><span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleNone
        Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderRight<span class="token punctuation">)</span><span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleNone
        Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderHorizontal<span class="token punctuation">)</span><span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleNone
        Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderVertical<span class="token punctuation">)</span><span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleNone
        
        <span class="token keyword">If</span> t<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count <span class="token operator">></span><span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">Then</span>
            t<span class="token punctuation">.</span>Rows<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">Select</span>
            <span class="token keyword">With</span> Selection<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span>wdBorderBottom<span class="token punctuation">)</span>
                <span class="token punctuation">.</span>LineStyle <span class="token operator">=</span> wdLineStyleSingle
                <span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> wdLineWidth050pt
                <span class="token punctuation">.</span>Color <span class="token operator">=</span> wdColorAutomatic
            <span class="token keyword">End</span> <span class="token keyword">With</span>
        <span class="token keyword">End</span> <span class="token keyword">If</span>
    <span class="token keyword">Next</span>
    
    <span class="token keyword">If</span> msg <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token string">""</span> <span class="token keyword">Then</span>
        MsgBox <span class="token string">"处理以下页面时发生错误，请复查："</span> <span class="token operator">&amp;</span> vbCrLf <span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> vbExclamation
    <span class="token keyword">End</span> <span class="token keyword">If</span>
    
    <span class="token keyword">Exit</span> <span class="token keyword">Sub</span>
e<span class="token punctuation">:</span>
    msg <span class="token operator">=</span> msg <span class="token operator">&amp;</span> Selection<span class="token punctuation">.</span>Information<span class="token punctuation">(</span>wdActiveEndAdjustedPageNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span> vbCrLf
    <span class="token keyword">Resume</span> <span class="token keyword">Next</span>
<span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>如何画架构图</title>
    <url>/2020/10/24/how-to-draw-graph/</url>
    <content><![CDATA[<p><a
href="/2020/02/20/how-to-write-document/">前文讲到，写好文档，才能少挨骂</a>。在此基础上，如果图表画得好，你可能还会被夸。</p>
<p>本文以架构图为例，讲一讲如何给软件文档画图。</p>
<span id="more"></span>
<h1 id="明确受众">明确受众</h1>
<p>写文档要明确受众，画图也是一样，想好了给谁去画、为什么去画、目标读者关心什么内容，才好进一步去思考想要传达什么信息。即使都是给同事看，你也得区分一下，是给开发人员看，还是给运维人员看，还是给什么人去看。就算是为了去找用户装逼，你画得也得像那么回事对吧。</p>
<p>怎么判断图画得好还是画得不好呢？一方面就是直观，读者他能看得进去，不会被乱七八糟的样式劝退；另一方面是你画出了读者关心的内容，通过你的图能够解决他的某种困惑（例如让开发人员了解系统技术架构，让产品人员了解系统功能与功能之间的关联）；还有一方面，他看完了之后，对这张图的理解也跟你是一样的，你要表达的信息有效地传达给他了。</p>
<p>图的目的是帮助认识与理解。认识新事物，由浅入深才能更好地掌握。画图的时候也是一样，你需要假设，图的读者要么没参与项目，或者参与程度不深，或者跟我们想法不一致，因此需要用图表让他们先在浅层有个直观的认识，搞清楚之后才能深入细节。一开始就讲细枝末节的东西，一般人肯定一头雾水。</p>
<h1 id="想好你要表达什么内容">想好你要表达什么内容</h1>
<h2 id="一张图是不够的">一张图是不够的</h2>
<p>有时候，你就是无法只用一张图就把事情说明白。例如有人总想给系统画一个超级架构图，把系统的核心功能、应用组成、物理部署、系统间关系等信息用一张图全部表示出来，但他们画出来的东西既不好看，也没能达到预期目标。</p>
<p>系统要是只有几万的合同额，功能很少，只有一台应用服务器、一个数据库，只对接几个外部系统，倒是没什么问题。然而，服务器稍微多一点，集成关系稍微复杂点，摆放的时候就要头疼，画出来的线条也是纵横交错，不仅自己看着难受，外人理解起来也很费劲。</p>
<p>所以，画图之前要明确主题，一张图有且只有一个主题。例如，主题是服务器的物理部署，那么网络拓扑、应用组成、系统间关系等内容都可以简略地画，甚至不画。然后再换几个角度，从不同角度来表达，各有各的侧重点，从而把简化与忽略的内容都给补上。这样这些图就可以作为一个整体来达到完整、清晰表达的效果。</p>
<p>举个简单的、传统应用的例子。为了方便叙述，我们称其为“XYZ系统”：</p>
<p><img src="/img/2020-10-24-how-to-draw-graph/graph1.png" /></p>
<p>这张图专注于XYZ系统的物理部署，一看就能知道有多少台服务器，每台服务器做什么用途的。那么这个系统是否与周围系统存在对接关系呢？我们用第二张图来表达：</p>
<p><img src="/img/2020-10-24-how-to-draw-graph/graph2.png" /></p>
<p>虽然这张图不太匹配软件工程的理论，但是不要紧，能把意思说清楚就行。这张图专注于系统间关系的描述，于是将XXX系统简化为一个应用服务器与一个数据库服务器（当然，因为有物理部署图，所以我们知道XXX系统不只两台服务器）。从图中可以看出，XXX与B、C、D是通过接口进行对接的，而与A是通过ETL进行数据库数据传输的。</p>
<p>除了从不同角度描述，有时还需要从不同深度来描述，就像百度地图展示那样，先是缩小到整个中国，然后放大到省、市、区县、镇或街道，一层一层细化。数据流图就是这样表达的。</p>
<h2 id="图内元素的性质要统一">图内元素的性质要统一</h2>
<p>架构图经常使用方框、箭头、icon之类的符号，这些都是图的元素。</p>
<p>画图时候要搞清楚，各类元素都是什么性质的？画了一个框，框里面的内容是哪种类别呢？是应用系统（application）？是功能模块（module）？服务器软件？系统组件（component）？类（class）？还是用户（user）？</p>
<p>连接两个框的箭头则是要表达关系，那么是什么关系呢？系统组件间的对接（动词或名词）？是流程（名词）？还是流程的流动（动词）？是数据（名词）？还是数据的流动（动词）？</p>
<p>如果连这个问题都没搞清楚，那么画出来的图在逻辑上都是混乱的，更别提准确了。</p>
<p>想清楚之后，例如我们确定框代表“应用系统”，线条代表“前后端接口调用的对接关系”，那么我们就可以开始进行梳理：我们要做的系统中，包含哪些应用系统？出一个清单，把这些系统都摆到图上，排个顺序，差不多之后再挨个考虑接口关系，有关系的画线，没关系的不管了。</p>
<p>对于稍微复杂的图，我们还要讲究一个层次感，要不然看起来就是一团糟，甚至实现起来也是一团糟。例如软件架构通常采用分层架构，分为展示层、业务层、持久层、数据层等等，并且这几层不光对组件进行了分割和隔离，还指出了一种递进关系，用户访问的是展示层，展示层调用业务层，业务层调用持久层，持久层调用数据层，结构清晰，层次分明。画图的时候，则是从外到内地画，先把大的层次摆出来，然后再找其中一个层次，想一想是继续分层，还是明确该层内部的框是什么性质（应用系统？功能模块？……），然后把框都摆上去。</p>
<p>举一个案例：</p>
<p><img src="/img/2020-10-24-how-to-draw-graph/graph4.png" /></p>
<p>这是一个简单的整体架构图，将系统分为了四层，每个框中放的是组件，没有表达组件之间的关系。系统模块被包在了“业务应用”与“应用支撑”两个组件之内。</p>
<p>仍然是上面的图，我们换一种画法：</p>
<p><img src="/img/2020-10-24-how-to-draw-graph/graph5.png" /></p>
<p>虽然框的含义是不统一的，但是在每个层次当中是统一的。最外层，用户使用了一个icon，而“业务管理系统”与两个“XX外部系统”都是“系统”。进入“业务管理系统”内部，里面的框均为“组件”。外层的线条表示了系统与系统的关系，而内层的线条绘制的是组件与组件的关系。那么，具体是什么关系呢？图中统一使用动词进行了表达，所以这些关系都是主动发起的动作。</p>
<p>再看一个简单的反面案例：</p>
<p><img src="/img/2020-10-24-how-to-draw-graph/bad-graph-1.png" /></p>
<p>这图让人觉得不舒服，除了美观原因以外还有一点：在这张图里，框框一会儿表示一个应用系统（支付系统），一会儿又表示一台服务器（消息推送服务器），一会儿又表示一个组件（消息推送模块）。画线的时候，一会儿是应用系统对接应用系统（活动系统与服务平台、移动平台），一会儿又是应用系统对接组件（支付系统与报名支付模块），既有系统也有模块；一会儿是交互关系（推送），一会儿又变成了状态关系（用户数据），既有动词也有名词。全图连要表达什么意思都是不统一的，只因要素少所以还大概能表达出什么意思，要是再复杂些，看都看不懂，就更别谈准确了。</p>
<h2
id="先不要讲究格式把东西堆好再说">先不要讲究格式，把东西堆好再说</h2>
<p>先构图，然后再考虑完善内容。</p>
<p>除此之外，在定稿之前，图可能还要反复修改。你可能会识别出很多疏漏之处，例如识别出新的系统，或者新的关系，然后还要重新考虑元素摆放，调整线条走向。所以不要一开始就画得很精致很完美，先做个差不多的草稿，把东西堆好，理清思路，感觉差不多之后再好好调整样式，否则改起来太费劲了。</p>
<h2 id="不是所有东西都需要在图上表达">不是所有东西都需要在图上表达</h2>
<p>图的表达深度是有限的，所以不要用有限的空间来进行无限的解释，要不然还要软件文档做什么？</p>
<p>仍然以最上面的XYZ系统的两张图为例。</p>
<p>肯定有人会问，XYZ系统部署在哪个网络环境？XYZ与A、B、C、D的具体对接方式与数据项呢？是通过哪台服务器实现的？假如D信息推送只通过应用服务器2来实现，我们要如何表达呢？</p>
<ul>
<li>网络环境，比如都在阿里云部署，我们在图上再套个框，把服务器都包进去，稍微描述一下，阿里云。</li>
<li>ABCD四个系统对接，简单画一下，OK，对接细节画不出来，所以不画了，反正不是这张图的核心主题。</li>
<li>顺便加一下用户访问的信息，一个PC端，一个基于HTML5的移动端，也不影响主题，稍微描述一下。</li>
</ul>
<p>改完之后：</p>
<p><img src="/img/2020-10-24-how-to-draw-graph/graph3.png" /></p>
<p>图的主题还是物理部署，其他（系统对接、用户访问）都是顺带的，画出来可以增加信息量，而且不影响表达主题，不画也不会带来损失。至于对接方式、数据项、精确的服务器，这样的细枝末节就别画了——你描述细节，那么应该描述到什么程度呢？Restful
API？有B数据查询、查询回调、状态检测等服务接口？数据查询主要查询x、y、z等数据项？网络策略如何？要是真把这些信息都写上，不仅会把图弄乱，而且还跑题，干脆就全部忽略。</p>
<p>图只是起点，不是终点。图的目的就是简单直观，简单的、不影响表达主题的信息可以适当加一加，增加信息量，但是，复杂的、不直观的细节，可以使用更好的表达方式，没必要非得挤到图里面去描述。</p>
<h1 id="处理图片与解释说明的关系">处理图片与解释说明的关系</h1>
<p>如果图的格式是你自己发明的，又红又绿，又有实线还有虚线，既有方块又有三角，那么你是不是应该该做个图例，让人知道你那堆符号是什么意思？</p>
<p>作出来的图还应该是自解释的：拿到你的架构图，读者很容易能看到系统划分了几个区域或几个层次，每个区域有什么实体，每个实体之间有什么关系，用不着请你专程跑来一对一为提供讲解服务。</p>
<p>当然有时候它真的不是那么直观，所以你可以再写一段文字，大概讲一下图的构成，分成几个块，每一块主要有什么东西，哪些是需要重点关注的流程之类的信息。注意按从整体到部分的顺序描述，按流程的顺序写，因为正常看图就是这样来看的。内容有点多的话，就用1234的序号或者小标题来分割一下，这样也便于找个角落把图上未能表达的一些细节补上。</p>
<p>图与解释文字应该保持一致，文档与实际的实现也应该保持一致。当然，现在已经是内卷的时代，大家能把活赶出来就已经很不容易，很难再挤出时间来维护文档，但还是希望大家至少能维护一个备忘录，平时也多加注意，让后来的人能够知道文档的哪些地方已经过时。</p>
<h1
id="有标准规范的图不要自己发明格式">有标准规范的图，不要自己发明格式</h1>
<p>有些图表的目的与格式都是比较固定的，绘制时需要遵循一定的规范，包括但不限于：</p>
<table>
<thead>
<tr class="header">
<th>图表</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>流程图</td>
<td>系统运行流程</td>
</tr>
<tr class="even">
<td>数据流图</td>
<td>描述系统输入、输出与数据处理</td>
</tr>
<tr class="odd">
<td>实体-关系图（E-R图）</td>
<td>描述实体类型、属性和联系</td>
</tr>
<tr class="even">
<td>用例图</td>
<td>描述“用户需要什么”</td>
</tr>
<tr class="odd">
<td>活动图</td>
<td>描述一个过程中的活动发生顺序</td>
</tr>
<tr class="even">
<td>顺序图（时序图）、通信图</td>
<td>描述一段时间内的一连串交互</td>
</tr>
<tr class="odd">
<td>类图</td>
<td>描述面向对象分析中各类之间的关系</td>
</tr>
<tr class="even">
<td>状态图</td>
<td>分析一个对象的不同状态及状态转移</td>
</tr>
</tbody>
</table>
<p>请使用业界常用的格式来绘制这些图，不要自己胡乱发明符号。</p>
<p>如果你不确定你要画的图有没有标准规范，那么请先到网上搜一搜，搜不到的话再自由发挥。</p>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><a
href="/2020/02/20/how-to-write-document/">如何写好软件文档</a></li>
<li><strong>如何画架构图</strong></li>
<li><a href="/2022/11/05/how-to-make-ppt/">如何做PPT</a></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库设计规范（一）：表结构设计</title>
    <url>/2020/11/01/db-specification/</url>
    <content><![CDATA[<p>本文为我们项目中所采用的MySQL数据库设计规范。</p>
<p>计划分为三篇文章，第一篇为数据库的表结构设计，<a
href="/2020/11/07/db-specification-2/">第二篇</a>为SQL语句的书写，<a
href="/2020/11/10/db-specification-3/">第三篇</a>为PDM文档规范。</p>
<span id="more"></span>
<h1 id="数据库设计原则">数据库设计原则</h1>
<h2 id="表设计原则">表设计原则</h2>
<ol type="1">
<li>使用InnoDB引擎。如使用其他引擎，应经过评估。</li>
<li>字符集采用utf8mb4。</li>
<li>表结构设计原则上应满足第三范式，但可以为了提高性能而破坏此规则，例如在频繁访问而不频繁修改的表中，为了避免在查询时多表JOIN，设置一些冗余字段。另外，冗余字段应为经常被查询的字段，不应是频繁修改的字段，也不应是太占用空间的字段（例如长度太长的VARCHAR）。</li>
<li>避免使用分区表。</li>
<li>表结构设计文档应包含注释，解释表与字段主要用途、取值范围、使用注意事项、关联关系等。</li>
<li>表结构设计文档中，为便于查找排序，表的中文名称应采用统一规则。例如<code>B-SYS-01-系统基础-用户信息</code>，规定其中的<code>B</code>为数据域编码，<code>SYS</code>为功能模块编码，<code>01</code>为流水号，<code>系统基础</code>为功能模块名称，而<code>用户信息</code>才是实际的表名称。</li>
<li>单表数据量应控制在一千万以内。如预计会超过一千万，应提前考虑分库分表。</li>
</ol>
<h2 id="字段设计原则">字段设计原则</h2>
<ol type="1">
<li>使用能正确存储和表示数据的最小类型。如果不确定需要什么数据类型，则选择不会超出范围的最小类型。</li>
<li>选择更简单的数据类型，例如能使用TINYINT则不使用CHAR或VARCHAR。</li>
<li>布尔值使用TINYINT，数值0表示为假，数值1表示为真。</li>
<li>避免使用FLOAT或DOUBLE存储浮点数。如有需要，使用DECIMAL类型。</li>
<li>将字段定义为NOT
NULL。如确实需要NULL，应在模型设计与SQL建表脚本中明确指明。</li>
<li>应尽量设置默认值。字符型为空字符串，数值型则为0。</li>
<li>避免存储大文件和BLOB。如有需要，应部署专门的文件服务器，将文件存放于文件服务器，在数据库中只存储其路径。</li>
<li>只允许使用以下数据类型：数值系列（TINYINT到BIGINT）、DECIMAL、CHAR、VARCHAR、TINYTEXT至LONGTEXT、TINYBLOB至LONGBLOB、DATETIME、TIMESTAMP。</li>
<li>除非为纯查询用表，否则应包含以下五个字段：</li>
</ol>
<table>
<thead>
<tr class="header">
<th>字段</th>
<th>字段英文名</th>
<th>类型（仅供参考）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>版本</td>
<td>version</td>
<td>INT</td>
<td>用于解决并发问题</td>
</tr>
<tr class="even">
<td>创建时间</td>
<td>created_at</td>
<td>TIMESTAMP</td>
<td></td>
</tr>
<tr class="odd">
<td>创建人</td>
<td>created_by</td>
<td>INT</td>
<td>类型与用户ID保持一致</td>
</tr>
<tr class="even">
<td>创建时间</td>
<td>updated_at</td>
<td>TIMESTAMP</td>
<td></td>
</tr>
<tr class="odd">
<td>创建人</td>
<td>updated_by</td>
<td>INT</td>
<td>类型与用户ID保持一致</td>
</tr>
</tbody>
</table>
<p>该五个字段均为NOT
NULL，且不应包含任何额外业务逻辑。在执行UPDATE时，必须对“修改时间”与“修改人”字段进行更新。</p>
<h2 id="键设计原则">键设计原则</h2>
<ol type="1">
<li>禁止在生产环境使用外键。</li>
<li>可在开发环境利用外键来辅助开发人员，但无论是否有外键，约束均应由程序控制。</li>
<li>必须设置主键。</li>
<li>主键字段的值必须唯一。</li>
<li>不使用频繁更新的列作为主键。</li>
<li>尽量使用系统生成的值作为主键，建议使用自增值。</li>
<li>不使用UUID、hash等作为主键。</li>
</ol>
<h2 id="索引设计原则">索引设计原则</h2>
<ol type="1">
<li>区分度最大的字段放在前面。</li>
<li>避免冗余和重复索引。</li>
<li>控制索引数量。单张表不要超过5个索引，单个索引字段数不要超过5个。</li>
<li>不要索引大型字段（有很多字符的字段），如有需要，建议考虑前缀索引，例如只索引前8个字符。</li>
<li>不要索引常用的小型表。</li>
<li>不要索引区分度不大的字段，例如“性别”。</li>
<li>不要对可以为NULL的字段建立索引。如需建立索引，应先将字段修改为NOT
NULL。</li>
<li>不要对主键建立索引，主键本身自带索引。</li>
</ol>
<h2 id="命名规范">命名规范</h2>
<ol type="1">
<li>命名时使用尽量描述实体的内容。使用英文单词、单词组合或单词缩写组成，禁止使用汉语拼音或汉语拼音缩写。</li>
<li>命名采用小写字母、数字或下划线组成，不使用其他字符，长度不超过30字符。</li>
<li>同一词语在数据库中只能具有一个语义，例如，已经用<code>area</code>表示<code>面积</code>，那么就不能再用这个词语表示<code>地区</code>。</li>
<li>同一个语义应该用同一个词语来表示，例如<code>是否有效</code>如果已经用<code>is_enabled</code>表示，那么不要再使用<code>is_valid</code>表示。</li>
<li>不能使用系统关键字命名。考虑到系统扩展需要，应避免和各种主流数据库软件的关键字冲突。</li>
<li>表名统一采用<code>模块名_表名</code>，例如<code>sys_user</code>。</li>
<li>字段名统一采用普通英文单词，不同单词之间用下划线分割。对于布尔类型，则为<code>is_形容词</code>，例如<code>is_enabled</code>。</li>
<li>主键为<code>pk_表名</code></li>
<li>索引为<code>idx_表名_字段名</code>，如长度太长，可适当缩减表名或字段名，但同一表的表名应保持一致。</li>
<li>临时用数据库、临时用表命名应以<code>tmp_</code>为前缀，以日期为后缀，用完之后应及时清理。</li>
<li>备份用数据库、备份用表命名应以<code>bak_</code>为前缀，以日期为后缀，且不应与生产用表混放。</li>
<li>不要使用驼峰命名法与匈牙利命名法（例如<code>strName</code>）。</li>
</ol>
<h2 id="其他规则">其他规则</h2>
<ol type="1">
<li>避免使用函数、存储过程与触发器。</li>
<li>禁止在数据库存储明文密码，必须进行加密后再存储。避免使用MD5、SHA1等安全性较低的加密方式。</li>
<li>设计IP字段时应考虑IPv6接入。IPv6地址最长长度为39个字符。</li>
<li>考虑到扩展性，如系统未来可能会改为Oracle或其他数据库部署，在设计字段时应考虑数据类型的兼容性。</li>
<li>应用服务器、数据库服务器操作系统时区统一用Asia/Shanghai（东八区）。</li>
</ol>
<h1 id="数据库管理流程规范">数据库管理流程规范</h1>
<h2 id="数据库文档管理">数据库文档管理</h2>
<p>软件开发人员应及时维护以下资料：</p>
<ol type="1">
<li>数据库物理模型设计文档</li>
<li>基线版本开始到当前版本，所有表结构变更SQL文件（或脚本）</li>
<li>数据库软件配置文件</li>
</ol>
<p>这些资料应纳入配置管理，而数据库物理模型设计文档应在设计完成后形成基线，后续进行变更管理流程。</p>
<h3 id="数据库表结构版本">数据库表结构版本</h3>
<p>数据库表结构应设置版本号，并采用表结构设计变更时间作为版本的编号，其格式为<code>数据库名称-YYYYMMDD-两位流水号</code>，例如<code>helloworld-20201101-01</code>。</p>
<p>在数据库中设立数据库版本表<code>db_version</code>，表结构如下：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 17%" />
<col style="width: 29%" />
<col style="width: 22%" />
<col style="width: 10%" />
<col style="width: 7%" />
<col style="width: 13%" />
</colgroup>
<thead>
<tr class="header">
<th>字段</th>
<th>字段英文名</th>
<th>类型</th>
<th>主键</th>
<th>非空</th>
<th>其他要求</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>序号</td>
<td>id</td>
<td>INT</td>
<td>√</td>
<td>√</td>
<td>AUTO_INCREMENT</td>
</tr>
<tr class="even">
<td>版本号</td>
<td>version</td>
<td>VARCHAR(50)</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr class="odd">
<td>操作时间</td>
<td>operate_time</td>
<td>TIMESTAMP</td>
<td></td>
<td>√</td>
<td>DEFAULT CURRENT_TIMESTAMP</td>
</tr>
<tr class="even">
<td>责任人</td>
<td>operate_name</td>
<td>VARCHAR(50)</td>
<td></td>
<td>√</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="表结构变更sql文件">表结构变更SQL文件</h3>
<p>表结构变更SQL文件应遵循以下规则：</p>
<ol type="1">
<li>文件名为<code>版本号-变更简要说明.sql</code>，例如<code>helloworld-20201101-01-新增业务表.sql</code>。</li>
<li>第一个版本文件名为<code>版本号-初始化.sql</code>，例如<code>helloworld-20201101-01-初始化.sql</code>，其中包含全量的建表语句，而后续所有版本均应为前一版本基础上的增量变更语句。</li>
<li>文件内文中应以注释形式加入应用升级或表结构变更说明，以便事后追溯。</li>
<li>除非明确要求执行删除（DROP、TRUNCATE等）操作，变更应使用ALTER修改，不得先DROP后CREATE。</li>
<li>SQL文件不包含<code>CREATE DATABASE</code>、<code>USE 数据库名</code>等涉及数据库实例的语句，也不指定数据库实例（例如<code>helloworld.dict_dict</code>）。创建与切换数据库操作总是应当确认后手工执行。</li>
<li>在空白数据库中，按SQL文件顺序逐个执行以后，形成的表结构应与当前版本的物理模型文档完全一致，且过程中产生的数据也得到了妥善处理。</li>
<li>文件应包含更新数据库版本表的语句：</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> db_version <span class="token punctuation">(</span>version<span class="token punctuation">,</span> operate_name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'版本号'</span><span class="token punctuation">,</span> <span class="token string">'责任人姓名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="表结构变更">表结构变更</h2>
<ol type="1">
<li>禁止未经评审确认私自修改表结构，包括文档以及开发、测试与生产数据库。</li>
<li>建新表、增加修改删除字段均应先进行评审确认，评审通过后再修改文档与实际的数据库。</li>
<li>所有建表操作应同时确定索引，并经过评审确认。</li>
<li>评审确认后应及时更新文档。</li>
<li>上线特殊活动（例如集中申报、抢号、抢票）之前，应提前请DBA进行评估。</li>
</ol>
<h2 id="数据库账号">数据库账号</h2>
<p>在生产环境中，应向应用程序分配最小权限访问用户，严禁应用程序使用高权限账号（root）连接数据库。</p>
<p>严格管理连接生产数据库与生产服务器的软件，严禁使用非正规手段连接，严禁使用盗版软件建立连接。</p>
<h2 id="部署升级操作">部署升级操作</h2>
<p>在生产环境，涉及表结构变更时应提前整理升级材料，并征得运维管理人员许可，然后方可进行操作。报备内容包含：</p>
<ol type="1">
<li>涉及的表结构变更内容</li>
<li>涉及的变更SQL（或脚本），其中需包含表结构的变更、索引的设置等</li>
<li>如需调整数据库软件配置，需报备修改的参数</li>
</ol>
<p>未经许可，禁止私自进行以下行为：</p>
<ol type="1">
<li>增加或删除生产用表。</li>
<li>修改现有生产用表的表结构，包含增、删、改字段，以及修改字段名称、类型、长度、非空变可空。</li>
<li>在业务高峰期，人工进行大量更新、大量查询、大表数据统计、批量导入导出等资源消耗较大的操作。</li>
<li>对服务器内统一部署的监控与数据传输等软件进行启停或配置调整。</li>
</ol>
<p>在进行大规模或大批量操作时，需DBA介入观察。</p>
<h2 id="数据修改">数据修改</h2>
<p>禁止私自修改生产环境业务数据。一旦东窗事发，轻则被公司开除，重则遭遇牢狱之灾。</p>
<p>修改生产环境业务数据应按以下流程操作：</p>
<ol type="1">
<li>要求修改人提供具有效力的依据，例如签字盖章的传真。如无正式文件可拒绝修改请求。如事关紧急可酌情（例如领导电话确认）考虑先行修改，但仍应要求事后补好手续。</li>
<li>对修改凭据进行编号和归档管理。</li>
<li>修改数据，修改时应记录修改语句以及修改前后的数据。</li>
<li>在专门的数据修改记录表（纸质材料、电子表格文件或数据库表）记录修改凭据编号、修改涉及的表和字段、修改语句以及修改前后的数据。</li>
</ol>
<p>因程序bug导致的数据错误也需要进行记录，凭据则为所处理的bug内容。</p>
<p>另外，如系统采用主从库部署，禁止修改从库数据。</p>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><strong>MySQL数据库设计规范（一）：表结构设计</strong></li>
<li><a
href="/2020/11/07/db-specification-2/">MySQL数据库设计规范（二）：SQL语句</a></li>
<li><a
href="/2020/11/10/db-specification-3/">MySQL数据库设计规范（三）：PDM文档</a></li>
</ul>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库设计规范（二）：SQL语句</title>
    <url>/2020/11/07/db-specification-2/</url>
    <content><![CDATA[<p>本文为我们项目中所采用的MySQL数据库设计规范。</p>
<p>计划分为三篇文章，<a
href="/2020/11/01/db-specification/">前一篇</a>为数据库的表结构设计，本篇为SQL语句的书写，<a
href="/2020/11/10/db-specification-3/">第三篇</a>为PDM文档规范。
<span id="more"></span></p>
<h1 id="sql书写规则">SQL书写规则</h1>
<h2 id="语法与格式">语法与格式</h2>
<ul>
<li>SQL关键字使用大写字母</li>
<li>表名、字段名等使用小写字母</li>
<li>每个单词之间只有一个空格</li>
<li>避免复杂语句。如为复杂语句，应拆分成多行，并合理控制缩进，保持可读性。</li>
<li>对于不直观的条件，应使用注释解释含义。</li>
</ul>
<h2 id="避免性能问题">避免性能问题</h2>
<ul>
<li>SQL语句应尽可能简单，减小响应时间。</li>
<li>使用查询条件时，值与字段数据类型必须保持一致，例如<code>id</code>为<code>INT</code>类型，查询条件则不应该写成<code>id='1'</code>。</li>
<li>需要<code>JOIN</code>时，关联的字段的数据类型必须保持一致。</li>
<li>避免使用<code>NOT IN</code>。该语句会将NULL值查出来。</li>
<li>避免使用<code>NOT IN</code>、<code>NOT LIKE</code>、<code>&lt;&gt;</code>、<code>!=</code>，否则查询时不走索引，影响性能。</li>
<li>避免使用<code>OR</code>，尽量改写成<code>IN</code>或<code>UNION ALL</code>。</li>
<li><code>IN</code>条件的数据项要控制在1000以内。如可以，建议用<code>EXISTS</code>代替<code>IN</code>。</li>
<li>禁止列运算，例如<code>WHERE age+1&gt;20</code>会导致表扫描，使索引失效，应改写为<code>WHERE age&gt;19</code>。</li>
<li>禁止使用左模糊与全模糊（即<code>LIKE '%TEXT'</code>、<code>LIKE '%TEXT%'</code>）。如有需要，使用搜索引擎处理。</li>
<li>禁止<code>SELECT *</code>，必须指明具体字段。<code>SELECT COUNT(*)</code>除外。</li>
<li>尽量使用<code>LIMIT</code>限定查询结果数量。</li>
<li>尽量不要在SQL语句中进行计算，而是放入调用参数中，以利用查询缓存，例如<code>WHERE date&lt;CURDATE()</code>改为<code>WHERE date&lt;?</code>然后在Java层传入当前时间。</li>
<li>书写查询语句后，应采用EXPLAIN等方式进行性能分析。</li>
</ul>
<h2 id="避免sql的坑">避免SQL的坑</h2>
<ul>
<li>注意：<code>COUNT(列名)</code>不会统计NULL值，而<code>COUNT(1)</code>与<code>COUNT(*)</code>会统计NULL值。</li>
<li>注意：如果表中没有数据，或者全部为NULL，<code>SUM(列名)</code>、<code>AVG(列名)</code>、<code>MIN(列名)</code>、<code>MAX(列名)</code>等统计函数会返回NULL，而<code>COUNT(列名)</code>只会返回0，不会返回NULL。</li>
<li>如字段可空，应使用<code>ISNULL()</code>判断是否为NULL，且不能用<code>&lt;&gt;</code>、<code>NOT IN</code>判断取值。</li>
<li>必须使用<code>#&#123;&#125;</code>、<code>#param#</code>配置参数，禁止使用<code>$&#123;&#125;</code>配置参数，以避免SQL注入。</li>
<li>严禁人工拼接SQL查询参数，一是容易拼接不全导致语法错误，二是容易产生SQL注入，三是无法利用查询缓存。</li>
<li>字符计数使用<code>CHARACTER_LENGTH</code>。注意一个汉字不是2字节，不一定是3字节。</li>
<li>在多表关联查询时，每个字段应总是指定表的名称。也可使用<code>t1</code>、<code>t2</code>等别名简化书写。</li>
</ul>
<h2 id="其他">其他</h2>
<ul>
<li>在Java代码中，类中的boolean型变量不要加is前缀，is前缀不要使用boolean类型。</li>
<li>禁止使用函数、存储过程和触发器，在应用程序实现。</li>
<li>禁止使用外键。约束应在程序中实现。</li>
<li>禁止在程序代码中使用<code>TRUNCATE TABLE</code>语句清空表。该语句为DDL语句。</li>
</ul>
<h1 id="参考资料">参考资料</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvcDNjL2Jsb2IvbWFzdGVyL0phdmHlvIDlj5HmiYvlhozvvIjltanlsbHniYjvvIkucGRm">阿里巴巴《Java
开发手册》（V1.7）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Fsc3R5bGUuZ3VpZGUvemg=">SQL样式指南<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><a
href="/2020/11/01/db-specification/">MySQL数据库设计规范（一）：表结构设计</a></li>
<li><strong>MySQL数据库设计规范（二）：SQL语句</strong></li>
<li><a
href="/2020/11/10/db-specification-3/">MySQL数据库设计规范（三）：PDM文档</a></li>
</ul>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库设计规范（三）：PDM文档</title>
    <url>/2020/11/10/db-specification-3/</url>
    <content><![CDATA[<p>本文为我们项目中所采用的数据库文档的设计规范。</p>
<p>计划分为三篇文章，<a
href="/2020/11/01/db-specification/">第一篇</a>为数据库的表结构设计，<a
href="/2020/11/07/db-specification-2/">第二篇</a>为SQL语句的书写，本篇为PDM文档规范。
<span id="more"></span></p>
<h1 id="工具">工具</h1>
<p>本文以<span class="exturl" data-url="aHR0cDovL3d3dy5wZG1hbi5jbi8=">PDMan<i class="fa fa-external-link-alt"></i></span>为数据库模型设计工具。其他工具可适当参考。</p>
<h1 id="命名">命名</h1>
<ul>
<li>表格应按业务域进行归类。字典及系统通用（例如用户）则分别放在“字典”与“系统通用”类别中。</li>
<li>命名统一用小写字母。</li>
<li>“数据域”一栏的“数据类型”中，将名称和代码统一改成实际类型，例如<code>VARCHAR(32)</code>，并采用大写字母，方便不同成员合并。团队所有人可直接复制粘贴附录中的代码。</li>
<li>数据表命名
<ul>
<li>模块名采用<code>B-SYS-系统基础</code>格式</li>
<li>中文表名采用<code>01-用户信息</code>格式（因为已经有分组，名称太长的话会影响展示）</li>
<li>英文表名<code>t_dynamic_xxx</code>，长度不要超过25（在oracle标识符不能超过30，考虑到主键前缀<code>pk_</code>，表名就不能卡着30起了）</li>
<li>显示方式<code>&#123;name&#125;[&#123;code&#125;]</code>（正好跟默认值颠倒，以方便浏览）</li>
<li>英文单词使用名词、单数</li>
</ul></li>
</ul>
<h1 id="字段">字段</h1>
<ul>
<li>系统默认字段按以下设置：
<ul>
<li>版本，<code>version</code>，<code>INT</code>，非空，默认值0</li>
<li>创建人，<code>created_by</code>，<code>INT</code>，非空，无默认值</li>
<li>创建时间，<code>created_at</code>，<code>TIMESTAMP</code>，非空，默认值<code>CURRENT_TIMESTAMP</code></li>
<li>更新人，<code>updated_by</code>，<code>INT</code>，非空，无默认值</li>
<li>更新时间，<code>updated_at</code>，<code>TIMESTAMP</code>，非空，默认值<code>CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code></li>
</ul></li>
<li>字段信息
<ul>
<li>名称长度不超过25</li>
<li>字段尽量非空，并尽量指定默认值</li>
<li><code>VARCHAR</code>、<code>CHAR</code>必须非空，如需可空，说明中要明确体现<code>可空</code>二字</li>
<li>只允许使用以下数据类型：
<ul>
<li>CHAR</li>
<li>VARCHAR，长度从10、20、32、50、64、255、512、1024里面取。</li>
<li>TINYINT</li>
<li>INT</li>
<li>BIGINT</li>
<li>DATETIME</li>
<li>DECIMAL（必须指定长度，建议默认取<code>DECIMAL(10,2)</code>）</li>
<li>BLOB、TEXT（应避免使用）</li>
</ul></li>
<li>禁止使用FLOAT、DOUBLE</li>
</ul></li>
<li>字段的说明
<ul>
<li>字段名的含义不能一望而知时，必须在说明进行解释。</li>
<li>标志项必须指明取值，例如<code>0-否，1-是</code>，或者<code>参见GB/T 2260-2007</code>。</li>
<li>数据使用分隔符分隔（例如<code>1,2,4</code>）、JSON串等非标准数据，必须在说明中解释。</li>
<li>取值有国家标准、行业标准的，应优先采用国家标准及行业标准。实在搜不到再自创值域。</li>
</ul></li>
</ul>
<h1 id="其他">其他</h1>
<ul>
<li>必须设置索引，除非没有任何需要建索引的字段。另外主键自带索引，因此不要再给主键建立索引。</li>
<li>除表结构外，每个模块中应绘制关系图。</li>
</ul>
<h1 id="附录统一数据类型">附录：统一数据类型</h1>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"database"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"datatype"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(32)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(32)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(32)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR2(32)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR(32)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(32)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(64)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(64)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(64)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR2(64)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(64)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(64)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(128)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(128)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(128)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR2(128)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR(128)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(128)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(255)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(255)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(255)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR2(255)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR(255)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(255)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(512)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(512)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(512)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR2(512)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR(512)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(512)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(1024)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(1024)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(1024)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR2(1024)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR(1024)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(1024)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"VARCHAR(3072)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"VARCHAR(3072)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR2(3072)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(3072)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NVARCHAR(3072)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"VARCHAR(3072)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"TEXT"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"TEXT"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"TEXT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CLOB"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NTEXT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"TEXT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,10)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,10)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Double"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,10)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NUMBER(12,10)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,10)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,10)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,8)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,8)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Double"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,8)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NUMBER(24,8)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,8)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(32,8)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"DECIMAL(10,2)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"DECIMAL(10,2)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Double"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(10,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NUMBER(8,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(10,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(10,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"DECIMAL(4,2)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"DECIMAL(4,2)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(4,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Double"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NUMBER(2,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(4,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DECIMAL(4,2)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"TINYINT"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"TINYINT"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"TINYINT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Integer"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Integer"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"INT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"BIGINT"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"BIGINT"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"BIGINT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Long"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"NUMBER"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"BIGINT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"BIGINT"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"DATETIME"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"DATETIME"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Date"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DATETIME"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DATE"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DATE"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"DATE"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"CHAR(1)"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"CHAR(1)"</span><span class="token punctuation">,</span><span class="token property">"apply"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"MYSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CHAR(1)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ORACLE"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CHAR(1)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"JAVA"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"String"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"SQLServer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CHAR(1)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"PostgreSQL"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"CHAR(1)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><a
href="/2020/11/01/db-specification/">MySQL数据库设计规范（一）：表结构设计</a></li>
<li><a
href="/2020/11/07/db-specification-2/">MySQL数据库设计规范（二）：SQL语句</a></li>
<li><strong>MySQL数据库设计规范（三）：PDM文档</strong></li>
</ul>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南：总述</title>
    <url>/2020/11/22/buy-house-0/</url>
    <content><![CDATA[<p>现在普通的年轻人已经很难通过个人奋斗来攒一套房了，不仅要掏光四个甚至六个钱包，还要背负巨额贷款。不光如此，由于各种原因，购房者草率地决定买房，之后遭遇了各种问题，“交房即维权”，甚至因自己一时头脑发热而懊悔不已。</p>
<p>为了避免不必要的损失，我们有必要了解买房过程中的各种坑。即便预算不足，无法完全避免这些坑，至少也不能因为本来可以避免的损失而稀里糊涂地把三代人辛辛苦苦挣到的钱随便交给开发商。</p>
<p>本系列文章内容较多，但是，面临着几百万甚至几千万的交易，多花一些时间来冷静分析，这完全是有必要而且是有益的。
<span id="more"></span></p>
<h1 id="本系列文章的假设">本系列文章的假设</h1>
<p>为了不让讨论太发散，本系列文章假设：</p>
<ul>
<li>你不是土豪：大部分人不得不掏光几个钱包还要背负贷款才能勉强凑出一个房子。</li>
<li>你要买新房：新房有新房的坑，二手房有二手房的坑，虽然个人更推荐考虑一下二手房，但这不在本文讨论范围内。</li>
<li>你要买普通住宅，也就是房产证为70年产权，性质为“住宅”或“居住公寓”的房子：<a
href="/2020/12/28/buy-house-6/">公寓的坑</a>比住宅多，而且坑的性质也很恶劣，所以很多人都强烈建议公寓不能买，只能租。</li>
<li>你买房是为了居住，不是为了投资：投资有投资的坑，二者不能一概而论。</li>
</ul>
<h1 id="总行动方针">总行动方针</h1>
<p>不要追求完美，有那种房子肯定也买不起，只求少被开发商忽悠。为此需要提前收集情报，获取足够的信息，并识别出各种坑，然后再分析利弊。只要没有无法接受的硬伤，就可以考虑放到候选名单了。</p>
<p>一般人没有那么多钱，能作出的选择有限，而且每个楼盘都有硬伤，那么你需要对这些硬伤排序，排除掉最不能忍的事情。例如楼盘挨着墓地，但你是无神论者，虽然看墓地感觉不舒服，但并不害怕，但你对噪音比较介意，稍微过个火车就睡不着觉，那么在挨着铁路和挨着墓地的楼盘中，就可以优先选择挨着墓地的楼盘。</p>
<p>在产生买房想法之前，应当先熟悉自己所在城市和片区，因为城市东西南北发展情况不同，在熟悉自己所处片区的发展情况之前不要轻易买房。如果考虑跨片区买房（例如城西工作城东居住），或者考虑双城生活（例如上海工作昆山居住），那么应当找些时间请假，在早晚高峰时间实地体验通勤，确认有稳定的通勤方式之后再继续决策。</p>
<p>在考虑新房的同时，也要考虑一下二手房！对于新房来说，一方面近两年房价暴涨，开发商却讲究高周转，所以新房质量越来越差，暴雷的案例也实在太多，而二手房的质量是看得见摸得着的；另一方面，如果房市下行，新房卖不动，那么二手房肯定更难卖（学区房除外）。你要是擅长讲价，砍个几十万大概不是问题。本系列文章针对新房，就不再详细讲二手房了。</p>
<p>最后，绝对不要轻信置业顾问，他们的话只能当做参考，实际情况还要你自己亲自核实。在没有100%决定买房之前，不要给开发商付任何钱，否则，付钱之前他们像大爷一样伺候你，付钱之后你可以像孙子一样被他们欺负！</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><strong>总述</strong></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（一）：购房资格</title>
    <url>/2020/11/29/buy-house-1/</url>
    <content><![CDATA[<p>为稳定房地产，避免炒作，各大城市相继出台了限购政策，有些城市的限购甚至会影响刚需或刚改的购房，因此要先确认自己是否有购房资格。</p>
<p>由于不同城市限购政策不同，本文仅进行一些提醒，能否购买应向当地专业人士咨询和确认。</p>
<span id="more"></span>
<h1 id="明确大方向">明确大方向</h1>
<p>国家反复强调“房住不炒”，多地尝试放松限购，政策却都遭遇“一日游”，说明国家更加重视维稳，既不会让房价大涨，也不会让房价大跌，而是慢慢地挤泡沫，后面不排除用定向暴雷的方式来打压投资者（为了维持稳定，国家可以不惜一切代价，而投资者很容易成为这个“代价”之一），因此建议只出于居住目的买房，而且要走合法程序、办合法手续，以免自己成为被维稳者。</p>
<h1 id="购房资格">购房资格</h1>
<h2 id="留意限制内容">留意限制内容</h2>
<ul>
<li>需留意限制范围，例如哪些区县存在限购。</li>
<li>有些城市的限购范围不光包括行政区，还包括高新区、经济开发区等非行政区划，而这类开发区范围在百度地图是查不到的，因此需要搜索一下资料，或者给相应区域内的街道社区打电话咨询，确认目标楼盘是否位于这些开发区范围内。</li>
<li>需留意对户口、学历等限制，例如本地户口如何限制，外地户口如何限制。对于除北上广深以外的城市，如果选择通过落户或连续缴交社保满足限制，需了解门槛如何。</li>
<li>需留意限购针对个人还是针对家庭，夫妻名下有房产，新房子只写一方姓名是否会被限制。</li>
<li>有些城市，离婚也会按离婚之前计数，需要留意是否有类似限制。</li>
<li>如果已经有房子，公寓是否计入数量，居住公寓是否计入数量，已网签未办房产证是否计入数量，等等。</li>
</ul>
<h2 id="你贷得起款吗">你贷得起款吗？</h2>
<p>有些城市不仅限制购买资格，还限制贷款规模，因此在凑首付时也要多加留意。</p>
<ul>
<li>贷款对户口、学历是否有要求？</li>
<li>如果在外地有贷款，在本地贷款是否有额外要求？</li>
<li>如果征信存在不良记录（例如有逾期记录，或使用借呗借钱），贷款审批会受到何种限制？</li>
<li>你的银行流水（主要是收入）能支撑贷款吗？</li>
<li>按照限购政策，可以贷几成房款？</li>
<li>2020年12月31日，央行发文要求收紧房贷。<span class="exturl" data-url="aHR0cHM6Ly9maW5hbmNlLnNpbmEuY29tLmNuL3dtLzIwMjEtMDEtMDkvZG9jLWlpem5jdGtmMTAzMTEyMy5zaHRtbA==">收紧房贷<i class="fa fa-external-link-alt"></i></span>的话，你的贷款还能不能批下来？</li>
</ul>
<h2 id="不要尝试突破限购限贷">不要尝试突破限购限贷</h2>
<p>不要尝试突破限购限贷，例如伪造证明材料、假离婚。因为这已经是违反法律法规的行为，一旦事情暴露或产生纠纷，不仅贷款会被拒绝，还得不到任何法律保障。</p>
<p>伪造材料的风险就不用细说了，只要被发现，抽贷（要求立刻还清全款）就已经算是比较轻的后果了。</p>
<p>假离婚风险如下：</p>
<ol type="1">
<li>如果夫妻有一方假戏真做，趁机抛弃对方，那么另一方将无法维权。即便是“离婚”前制定的书面“复婚”约定，也不具备法律效力。</li>
<li>如果在假离婚之后突然颁布新政（例如上海在2021年1月21日颁发《<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29odS5jb20vYS80NDYwMTgwNjNfMjYwNjE2">关于促进本市房地产市场平稳健康发展的意见<i class="fa fa-external-link-alt"></i></span>》），限购按离异前套数进行计数，那么假离婚将失去意义。</li>
</ol>
<p>另外还有一种突破限购的方式——以公司名义买房，但是注册公司本身就要花费很多时间精力与金钱（公司不能放着不管，必须进行经营），转让时还要承担高额交易税，所以普通人不要考虑这种途径。2021年开始，经营贷政策收紧，假如你使用这种途径贷款，银行随时可以抽贷，还不清贷款就直接没收你家房子，而且他们这样做还是合法行为，你连维权的机会都没有。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><strong>购房资格</strong></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（二）：地产项目情况</title>
    <url>/2020/12/05/buy-house-2/</url>
    <content><![CDATA[<p>在决定买房之前，应该对地产项目有一个基本的了解。本文对项目中的一些坑进行梳理。
<span id="more"></span></p>
<h1 id="如何搜索">如何搜索</h1>
<p>确定买房资格后，需确定自己手头能掏出多少钱，并且到网上搜索房贷计算器，确定大致预算。确定预算后，可以按90和110两个档估计一下大概能接受多少钱一平的房子，再结合工作地点确定搜索范围。</p>
<p>之后就是找专门的网站与APP，例如<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmFuZy5jb20=">房天下网<i class="fa fa-external-link-alt"></i></span>或<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5qdWtlLmNvbQ==">安居客<i class="fa fa-external-link-alt"></i></span>等，在网站中搜索楼盘。这类网站收集了楼盘的详细的资料，更新也比较及时，还能进行地图找房，推荐优先在此类网站进行搜索，确定买房的大致范围。确定意向楼盘后，也到这类网站中搜索项目信息，关注价格情况（如果已经开盘的话）。</p>
<p><img src="/img/2020-12-05-buy-house-2/fangcom.png" /></p>
<h1 id="信息项">信息项</h1>
<p>找到楼盘后，可以查看项目的详细资料，例如：</p>
<p><img src="/img/2020-12-05-buy-house-2/info1.png" /></p>
<p><img src="/img/2020-12-05-buy-house-2/info2.png" /></p>
<p>其中以下几个因素需要关注一下：</p>
<h2 id="开发商">开发商</h2>
<p>在资料中展示的开发商不一定是本尊，有可能是在当地成立的子公司，或者与其他开发商成立的联合公司。如果想知道本尊是哪家开发商，可以使用<span class="exturl" data-url="aHR0cHM6Ly93d3cudGlhbnlhbmNoYS5jb20=">天眼查<i class="fa fa-external-link-alt"></i></span>等网站查询。</p>
<p>开发商有大开发商，有小开发商，有国企，有民企。在大城市建议买大开发商的楼盘，因为小开发商容易破产烂尾，一旦烂尾，即使业主有能力花钱自救，也会白白耽误十年，得不偿失。</p>
<p>需要留意的是，因为近两年很多开发商讲究高周转，快进快出，很可能会忽视质量，所以开发商大小和房屋好坏已经没有对应关系，大开发商可能开发了烂房子，小开发商也可能开发了好房子。</p>
<p>大开发商与小开发商相比，唯一区别就是不会跑路烂尾（备注：2021年下半年，恒大和一系列大开发商用实际行动告诉我们，大开发商照样会烂尾）。注意，只是不会烂尾，该延期的还是会延期，该维权的还是会维权，无论大小开发商都是如此，私企国企还是央企都是一样。</p>
<p>即便是同一开发商，不同城市也会有不同表现，例如在北京口碑良好，到了南京可能就要处处维权。同一城市不同历史时期也会有不同表现，例如以前房子质量好，后来的房子开始糊弄。因此仍然要与本地人交流，了解开发商在当地的口碑如何。如果非常害怕延期交付（例如孩子即将上学），或者非常害怕质量问题，建议考虑二手房。</p>
<p>有些时候，因为开发商名气有点小，会选择蹭大牌开发商的名字，例如“万科XXYY”楼盘不一定就是万科开发，也有可能是XX开发商（没听说过的名字）开发，开发完成后配万科物业。这不算什么问题，实际的XX开发商靠谱，或者去售楼处时置业顾问能把两家开发商关系说清楚就行。实在介意的话，如何区分这类贴牌项目呢？去万科官网查一下就知道了，不是自家项目他不会写的。</p>
<p>除了单独开发，有时还有联合开发的情况。置业顾问会说，XX擅长XX，YY擅长YY，ZZ擅长ZZ，XX、YY、ZZ共同开发就是强强联合。以现在形势来看，最后结果一定是大家都只做到60分，而且并非像置业顾问那样谁擅长做什么，然后业主找上门维权的时候，大家也会相互踢皮球，XX会说是YY开发的，YY会说是ZZ开发的，ZZ会说是XX开发的……</p>
<h2 id="物业公司">物业公司</h2>
<p>通常你跟开发商只需要打一两年交道，而后续二三十年每天都会跟物业公司打交道。买楼时，建议了解一下配套物业的物业公司的口碑，如果手中楼盘选择很多，而且有机会躲开只收钱不办事的物业，可以考虑躲一躲，毕竟请神容易送神难。</p>
<p>虽然从理论上讲可以通过业委会来换物业，但是等到交付以后你就会发现，小区业主情况复杂，人性难测，连把业委会成员凑出来都是一件极其困难的事情，更不用说换物业了。</p>
<h2 id="精装毛坯">精装/毛坯</h2>
<p>如果精力充足，或者有足够的钱去装修，那么不建议买精装房，两个原因：</p>
<ol type="1">
<li>现在精装房减配严重，除非你很忙或者很懒，要不然用精装省出来的钱自己装修，你通常可以装得更好。</li>
<li>一旦出现质量问题，毛坯房修起来可比精装容易多了，把房间毁掉重新装修也不心疼，而且现在出现质量问题的概率很大。</li>
</ol>
<p>如果你没有精力监工，也没钱去请监理，倒是可以买精装，同样是两个原因：</p>
<ol type="1">
<li>自己装修的话也不是绝对可靠，如果没有提前做好功课，特别容易被宰，而且质量更差。</li>
<li>交房时如果出毛病，也是大家一起出毛病、大家一起去维权。</li>
</ol>
<p>所以精装毛坯的问题也是要具体问题具体分析。</p>
<h2 id="五证">五证</h2>
<p>五证指《建设用地规划许可证》、《建设工程规划许可证》、《建筑工程施工许可证》、《国有土地使用证》和《商品房预售许可证》（现房是《商品房销售许可证》）。</p>
<p>购房时看《商品房预售许可证》就行，只要这个证齐全，说明另外四个肯定也齐全了。而且五证里面最容易出问题的就是这个《商品房预售许可证》，通常有两种问题：</p>
<ol type="1">
<li>没拿到证就开盘</li>
<li>只有1号楼拿到证，开发商开始卖3号楼。</li>
</ol>
<p>需要注意，预售许可证不是针对整个小区的，而是针对单个楼的，如果小区里面有10个楼，那么就需要办10个证，否则还是不合法的。</p>
<p>五证不全，只要发生纠纷，你无法得到任何法律保护。一旦房子烂尾，谁也救不了你。其他后果如下：</p>
<ol type="1">
<li>无法办理贷款：银行需要根据预售许可证决定放款。</li>
<li>购房合同无效：不仅如此，如果开发商反咬你一口，你可能还得赔开发商钱。</li>
<li>质量没有保证：连卖房都违规操作，你认为开发商后续会认真盖房子吗？</li>
<li>无法办理房产证。</li>
</ol>
<p>因此一定不要买五证不全的房子，而且，由于政府办事比较慢，你也不要假定开发商很快就能把证补全。</p>
<h2 id="容积率">容积率</h2>
<p>容积率，说的通俗一点就是房屋疏密程度。数字越大，房屋排布越密集，住起来越压抑。土拍时政府会对土地指定一个容积率，为了多挣钱，开发商则会倾向于在不突破指定容积率的前提下把楼建得密一些。</p>
<p>对于容积率，大家只需要记几个数字：6层以下0.8，11层小高层1.5，18层高层1.8左右，19层以上2.4，这些都是比较合适的容积率。比这个数字小，房子就稀疏，比这个数字大，房子就密集。数字太大的话房子就会变得密密麻麻。</p>
<p>容积率有一个“高低配”的坑：小区容积率是2.4，而该小区内部建了几个30层高层，又建了几个11层小高层，那么你所看到的2.4只是一个平均值，（高层）实际容积率要大于2.4，建筑也会比纯30层高层小区密集。交房以后，这种高低配小区业主之间也容易闹矛盾，所以务必慎入。</p>
<p>容积率低也不等于采光一定好。如果楼盘排布不合理，或者小区南边有挡光高层，该挡光的还是会挡光。</p>
<h2 id="停车位">停车位</h2>
<p>现在的新小区默认是人车分离，开发商即便开发了地上车位，也会特意模糊这一点。介意地上车位的话（主要是会给你的孩子带来安全隐患），要仔细进行确认。</p>
<h2 id="负面评价">负面评价</h2>
<p>开发商肯定不会说自己坏话，有时候还会派托儿在APP里说好话，而一般人因为没交房还写不出客观评价，所以负面评价就变得比较珍贵。</p>
<p>建议多下载几个APP，将负面评论收集齐，去掉无脑喷的内容，然后核实剩下内容是否属实，是否为评论者一面之词。在核实的过程中，你对项目的了解也会逐步加深。</p>
<p>另外建议在网站、微博、微信等途径搜索开发商在本地其他楼盘的维权事件（开发商第一次进入本地开发的话，就搜一搜其他城市的案例），确认业主诉求如何，如果没有房屋质量问题维权，也可以认为稍微有些靠谱了。</p>
<h1 id="楼面价与地价">楼面价与地价</h1>
<p>地价就是开发商从政府那里买地所花的钱，楼面价则是将买地所花的钱平摊到建筑内部之后得到的平均值。</p>
<p>地价是地产项目中一块比较大的成本。卖同样的楼价，地价低了，开发商可以多挣点，地价高了，开发商就会少挣点，因此楼面价或地价可以当作房屋定价与开发商盈利程度的参考。不过需要注意的是，开发商利润大，他不一定好好开发，但开发商利润小，他一定不好好开发，所以可以多渠道了解片区各盘的地价，避免地价太高的盘。</p>
<p>地价与房价不是简单的数值计算关系，它们的大小关系只能当作参考，不能当作决定性因素。很多人将“楼面价”和“房价”比喻成“面粉”和“面包”，面粉涨价，面包就会涨价，这个认识实际上是不对的。房价并不是简单地由地价加建筑加杂七杂八费用决定的，如果开发商体量大，楼盘多，他们也可以选择为了完成销售指标而降价销售，再开发一套改善盘就能把钱挣出来了。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><strong>地产项目情况</strong></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（三）：项目周围环境</title>
    <url>/2020/12/12/buy-house-3/</url>
    <content><![CDATA[<p>很多人买房时候，并没有在工地周围仔细观察环境，也没有仔细观看售楼处内公示的“不利因素”。等到交房时候才发现自己被骗，去维权开发商却说“我们已经公示了”，连条幅都不好打。</p>
<p>因此本文提醒大家在项目周围环境需要留意哪些事情，以免无端被坑。
<span id="more"></span></p>
<h1 id="了解用地规划">了解用地规划</h1>
<p>中国的土地都是国有的，而所在地区的自然资源和规划局会对土地用途进行一系列规划。因此，你需要了解所买楼盘处于规划局的哪个片区，然后去网上搜索一下该片区的规划（注意官方网站不一定好找，所以要利用好搜索引擎）。</p>
<p>以武汉为例。假如在光谷软件园工作，一般都会选择在光谷片区买房。假如选择光谷东，应该能找到和下图类似的规划图：</p>
<figure>
<img src="/img/2020-12-12-buy-house-3/guanggudong.jpg" alt="光谷东" />
<figcaption aria-hidden="true">光谷东</figcaption>
</figure>
<p>上图中的文字标识是特意加的，而政府原始规划里面不会标记具体是哪个工厂或哪个小区，需要自己根据道路坐标寻找定位。</p>
<p>在这张图上将小区位置找准之后再仔细看，即使目前所买楼盘周围都是空地，也能大概了解周围空地将来要建设什么东西，会不会有污染的工厂等等。需要留意的是，工业用地分为三级，一类工业用地基本上无污染、无影响，而二、三类工业用地则会有污染，能躲就躲。</p>
<p>另外要留意小区南边的情况，例如现在是空地，将来可能就会盖出挡光的高层，而这一点不是开发商所能控制的。</p>
<h1 id="了解项目不利因素">了解项目不利因素</h1>
<p>项目不利因素，说白了就是可能会让居民感到不舒服的东西，例如临近铁路会有噪音。不利因素分为红线外不利因素和红线内不利因素，前者是小区范围外，不能由开发商控制，后者是小区范围内的，开发商可以控制。但无论是小区外的还是小区内的，买房前都应当关注，以免遗漏。</p>
<h2 id="不利因素">不利因素</h2>
<p>需要留意以下不利因素：</p>
<ul>
<li>铁路线、轻轨线、火车站、铁路车辆段（噪音）</li>
<li>高架桥、隧道（噪音）</li>
<li>城市主干道（噪音）</li>
<li>经常有大车路过的主干道（噪音、安全）</li>
<li>汽车站（噪音）</li>
<li>机场（严重噪音）</li>
<li>垃圾站（异味）</li>
<li>公共厕所（异味，但一般问题不大）</li>
<li>工厂（污染、安全风险）</li>
<li>臭水沟（异味）</li>
<li>公墓（禁忌）</li>
<li>荒山（同上，可能不是公园，而是周围村庄村民的祖坟）</li>
<li>油气站（安全风险）</li>
<li>危险品仓库（安全风险）</li>
<li>工地（噪音、安全，虽然通常它们都是临时的）</li>
<li>看守所、监狱、军事基地（真有吗？既然是郊区，当然有可能有）</li>
<li>高压线、变电站（虽然实际上无害但是看着感觉不舒服）</li>
<li>……</li>
</ul>
<p>除了当下的不利因素，也要留意未来建设。附近有荒地、空地、破旧村庄（城中村）时要特别留意用地规划，因为它们可能会在拆迁之后变成以上不利因素。</p>
<p>即便都是不利因素，其影响也是不同的，例如同样是铁路线，如果是高铁或走高架桥的地铁，后半夜通常不会有噪音（后半夜列车维护），而如果是普速铁路，后半夜也容易产生噪音（客运货运不分昼夜）。有些不利因素的影响可能还会被小视，例如，2km外有一个化工厂，可能白天一点感觉都没有，而晚上工厂会违法排污，出门就能闻到异味。</p>
<p>即使都是有影响的不利因素，不同人的感觉也是不一样的。例如有些人无法忍受住在公墓附近，而有些人就不介意，甚至想抓鬼玩；有些人晚上睡觉睡得香，飞机从头上过也无所谓，而有些人晚上碰到一点噪音就会被吵醒。因此还得亲自去现场感受才行。</p>
<h2 id="以下不是不利因素">以下不是不利因素</h2>
<p>以下“不利因素”是无害的，或者说，智商越低，危害越大。希望大家能相信科学，不要因为以下原因维权：</p>
<ul>
<li>高压线（高压线有安全距离要求，即使超高压也不超过15米，离小区实际上会很远，影响可以忽略不计）</li>
<li>变电站、变压器、配电室（同理）</li>
<li>通信基站（所谓的“辐射”只是普通电磁波，其影响可以忽略不计，另外切断基站会导致手机没信号，让你打不了电话上不了网）</li>
<li>公共Wi-Fi（同理）</li>
</ul>
<h1 id="学区房只是噱头">“学区房”只是噱头</h1>
<p>有些开发商会将“学区房”作为卖点，或说自己在某某名校附近，或说自己已与哪所名校签约。</p>
<p>需要留意，在某名校附近，不代表一定是这个学区。即便是名校，也不一定是校本部或分部，可能只是简单的签约。</p>
<p>“签约”也分很多种，有的是完全交给名校运营，有的是由名校提供师资进行支援，而有的只是行政管理关系，或者干脆只是交一笔钱就允许挂名校的logo。既然有签约，那么当然就会有解约，可能协议只有几年有效期，几年之后就解除关系了。</p>
<p>签约名校，就代表学习一定好了吗？不一定！教学质量好坏得看毕业生的成绩单，没有成绩做检验，名就只是名字而已。就算真是货真价实的名校，如果你的孩子不好好学习，成绩照样上不去。因此，不要对刚需房配建的学校抱什么希望，能有学校上就不错了。</p>
<p>一个城市往往就那么几个名校，如果学习成绩真的强，相应的学区房价格应该是既高又坚挺，有钱人家长也会奔过去买，根本轮不到普通人。就算能轮到普通人，大概也是买不起。</p>
<p>另外还要留意一点，有些名校是民办学校，例如某某外国语学校，这类学校不是靠学区分配自然进去的，也不是用普通途径考进去的，而是花巨额金钱安排进去的（甚至有钱也挤不进去），所以就算确实住在附近也不代表能入学学习。</p>
<p>最后还有一点非常重要：如果孩子近两三年内就要上学，建议不要买预售房！一方面预售房本身的工期就没有保证，另一方面学校工期与学区分配也没有保证，买新房很容易耽误孩子上学！</p>
<h1 id="请亲自到项目周围转一转">请亲自到项目周围转一转</h1>
<p>务必提前找到工地，在工地附近转一圈，查看小区周围情况，然后再将巡查范围扩大到周围2～3km，了解小区附近有哪些重要配套或者重大不利因素。</p>
<p>了解负面环境之后，再稍微找一找正面配套，看一看其配置、规模和距离能否满足日常生活需要，例如：</p>
<ul>
<li>超市</li>
<li>商场</li>
<li>医院</li>
<li>银行</li>
<li>幼儿园</li>
<li>小学、初中（注意小学和初中按学区入学，离得近也不一定是同一学区）</li>
<li>健身场所</li>
<li>公交车站、地铁站</li>
</ul>
<p>因为不同人的感觉不一样，请亲自去现场感受、核实，不要光听别人评论，特别是不要随便相信置业顾问的话。就算置业顾问催促，也要先把这些事情核实清楚再说。</p>
<h2 id="特别留意">特别留意</h2>
<ul>
<li>留意小区南边，确认现在建筑会不会挡光。如果没有建筑，只是荒地，注意未来可能会建设出挡光的高层，而且这一点是开发商无法控制的。</li>
<li>留意售楼处与工地不一定在同一个地方，有时候离得还很远，所以要想办法找到实际的工地。不要认为售楼处位置很好，小区楼盘位置就会很好。</li>
</ul>
<p>如果地处郊区，位置偏僻，还需要留意以下两点：</p>
<ul>
<li>注意周围公共交通的形式、途径站点与发车频率，可能将来交房之后早上会有一万个人去等一辆半小时一趟的班车，或者干脆没有公交车，大家不得不开车或者骑电动车出行。</li>
<li>注意周围小区与路网的密度，虽然你前往现场的时候可能道路畅通，但这不代表早高峰时候同样能够顺畅无阻。</li>
</ul>
<p>随着城市发展、居民入住，周围的交通也许会逐步改善，但这需要一些时间，有的地方一两年就能落实，有的地方需要等五六年才仅仅是有改观，因此出行条件不能指望未来发展，得当下就能满足才行。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><strong>项目周围环境</strong></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（四）：售楼处里的套路</title>
    <url>/2020/12/19/buy-house-4/</url>
    <content><![CDATA[<p>确认买房之后，就要前往售楼处详细了解楼盘情况并付钱购买。但售楼处充满了经过精心布置的陷阱，本文则会讲述如何练就一副火眼金睛。</p>
<span id="more"></span>
<h1 id="务必先做好准备再去售楼处">务必先做好准备再去售楼处</h1>
<h2 id="查一下网签">查一下网签</h2>
<p>本节不适用新开盘的情况，因为刚开盘的话网签量肯定是零。网签与销售之间有较长的时间延迟，开过几波以后才能查到之前开盘时的网签情况。</p>
<p>有些城市提供了住宅项目信息公示网站（由所在城市的住房和城乡建设局提供），可通过此类网站查询网签情况。对于已经开盘一段时间的，或者分期开发的，就可以相应网站查网签情况，虽然有延迟，但其数量级仍然可以反映小区卖得好不好。在相同地段之内比较，卖得好可能是炒的，但卖得不好肯定有硬伤。</p>
<h2 id="了解建筑许可">了解建筑许可</h2>
<p>项目必须在取得许可后方可动工，而许可是需要公示的。因此，可以前往工地门口查看公示的建筑许可和平面图，也可以提前在网上搜索建筑许可（所在城市的自然资源和规划局官方网站上面有，但可能需要借助搜索引擎搜索），名称可能是“建设工程规划许可”、“建设项目批前公示”等。</p>
<p>因为官方网站会提供超清版本文件下载，建议去官方网站搜索下载，但因为工程名与小区名可能不一致，可能你还是需要用其他途径来了解工程项目叫什么名字。</p>
<p>例如：</p>
<p><img src="/img/2020-12-19-buy-house-4/public1.jpg" /></p>
<p><img src="/img/2020-12-19-buy-house-4/public2.jpg" /></p>
<p><img src="/img/2020-12-19-buy-house-4/public3.jpg" /></p>
<p>不要把它们当成形式主义展板。仔细看这组图，你就可以清晰地了解到土地用途、占地面积、容积率、楼盘分布、小区内物业设施、光照情况等信息，而且还能少被置业顾问忽悠。</p>
<h2 id="带把卷尺">带把卷尺</h2>
<p>后文会详细讲到样板间的各种套路。预防样板间套路，你需要准备一副卷尺，而且卷尺也就几块钱，买了不会吃亏。</p>
<p>买完之后，拿卷尺好好测量一下你现在居住的房间的尺寸，以及主要家具的尺寸，对距离有个印象，这样到时候置业顾问跟你说两米五的时候你就知道是宽还是窄了。</p>
<h2 id="带上平板电脑">带上平板电脑</h2>
<p>如果你手头有一个平板电脑，建议你把平板电脑带上。现场会有各类文字公示内容，特别是那种不想让你看但又不得不展示的，拿平板看会比拿手机看着舒服，也有利于深入地思考。</p>
<h2 id="装一个地图app">装一个地图APP</h2>
<p>区位图的尺寸是骗人的，有些不利配套也会刻意隐瞒，所以要用规范的地图APP来查看周围配套与实际距离。</p>
<p>当然地图APP也不是全面的，例如建设中的工地以及公墓、看守所、监狱、军事基地都不会在地图上表示，所以仍然要实地现场查看。</p>
<h2 id="小心车牌识别">小心车牌识别</h2>
<p>你的车开进售楼处之时，也是骚扰电话登记之时：有些售楼处会安装车牌识别系统，默默地记下你的车牌号和联系方式，还会与其他开发商共享。因车辆识别这件事情难以取证，即便投诉也不太可能解决（除非你愿意耗费大量时间精力与金钱跟开发商死磕），所以建议开车来的人把车放稍微远一点的地方，别放售楼处附近，也别让售楼处保安看到你上下车。</p>
<p>个人建议，如果距离在接受范围之内的话，可以考虑骑车去楼盘与售楼处。与开车相比，骑车的时候，对小区位置、距离与周围环境会感受得更加直观。</p>
<h2 id="小心人脸识别">小心人脸识别</h2>
<p>去售楼处通常要先登记，确认渠道并判断应该给你什么样的优惠。为了防止你作弊，有些开发商还会用些科技手段，在售楼处偷偷地安装人脸识别系统，然后根据人脸识别结果来确定优惠多少，而消费者对人脸识别毫不知情，即使带上口罩系统也能进行识别，只能靠戴头盔预防——</p>
<figure>
<img src="/img/2020-12-19-buy-house-4/face.jpg" alt="人脸识别" />
<figcaption aria-hidden="true">人脸识别</figcaption>
</figure>
<p>这同样是你投诉或起诉也难以自行解决的行业乱象。对此只能建议，如果想通过中介等渠道途径购房，那么不要自己前往售楼处，甚至不要靠近售楼处，否则就拿不到优惠了。</p>
<h2 id="提前去工地附近转一圈">提前去工地附近转一圈</h2>
<p>准备进入售楼处之前，应当找到楼盘所在工地，在工地周围转一圈，并且扩大到周围2～3km范围看一下，了解周围环境如何。详细关注点可<a
href="/2020/12/12/buy-house-3/">参见前文</a>。</p>
<p>有些售楼处和实际工地并不在一起，因此要把工地实际位置找出来。售楼处位于车水马龙的好地段，而实际的楼盘可能在一两千米之外的一片荒地之中。</p>
<h2 id="吃饱喝足">吃饱喝足</h2>
<p>在售楼处核实信息是一场硬仗，所以先吃饱喝足之后再过去，以免体力不足而主动偷懒。当然不用喝太多水，只要不是去维权的，售楼处会主动给你端茶送水。</p>
<h2 id="稍微做点功课">稍微做点功课</h2>
<p>售楼处销售都是“见人说人话，见鬼说鬼话”，如果你房产方面事情懂的不多，对片区也不熟悉，他们就会使劲地忽悠你。如果你做足了功课再过去，他们至少就不敢太离谱地忽悠你了。</p>
<h1 id="区位图与沙盘的套路">区位图与沙盘的套路</h1>
<h2 id="区位图">区位图</h2>
<p>区位图可以直观地展示小区所处位置，以及小区周围的配套及城市功能区域。为了外表美观、突出重点，区位图会做出一些变形调整。</p>
<p>但是，区位图经常是严重变形，甚至变得非常夸张。有多夸张呢？举个例子，将区位图代入到真实地图中，标记相应距离，可以得到：</p>
<figure>
<img src="/img/2020-12-19-buy-house-4/map.jpg" alt="区位图" />
<figcaption aria-hidden="true">区位图</figcaption>
</figure>
<p>小区距离北面的主干道看起来不远，画起来比小区宽度窄，实际上要800米，是小区宽度的2倍。向西前往“唐冶生活区”其他位置还需要至少再走2km（因为中间有山）。而“唐冶生活区”与“中央商务区”看似不远，还能互相辐射，两地实际上却相距6km以上。“中央商务区”的高新万达广场看似位于二环东路与岔路口中间，其实它距离岔路口只有1km，距离二环东路路口却有5km。所以在“唐冶生活区”或“高新东区”工作的通勤距离都不一定很近，在“中央商务区”或“龙奥政务区”工作则要仔细考虑一下通勤距离到底能不能接受了。</p>
<p>当然区位图的骗局也好识别，就像上面的楼盘，只要你找辆自行车从西边的二环东路沿着主干道骑到东边的售楼处，你就能深刻地感受到区位图变形得有多么夸张了。</p>
<h2 id="沙盘">沙盘</h2>
<p>区位图主要用来描述小区周围的环境，而沙盘主要用来描述小区内部的环境。</p>
<p>为了营造一种高级小区的感觉，沙盘也会经过精心美化，例如：</p>
<ul>
<li>沙盘整体搞得郁郁葱葱，就好像进入了花园城市新加坡。实际上交付的时候只有光秃秃的六棵树。</li>
<li>沙盘上看各楼排布稀疏，实际上小区密密麻麻，颇有香港九龙城寨遗风。</li>
<li>沙盘上看周围视野开阔，实际上南边是严重挡光的高层写字楼。仔细查看，在沙盘上那栋楼只是矮矮的水晶块。</li>
<li>沙盘上看不到地上停车位，实际上小区内部有地上停车位，人车不分流。</li>
<li>你所要买的楼挨着变电站、垃圾回收站等设施，沙盘上没有体现。</li>
<li>跟区位图一样，沙盘的比例尺也是变形的。</li>
</ul>
<p>看沙盘时，如果小区内部或小区南部有水晶块，务必较真地问一下那是什么楼，到底是什么用途，到底有多少层。</p>
<p>就算沙盘所有坑都识别出来了，你可能还会碰到这种无法预防的情况——</p>
<figure>
<img src="/img/2020-12-19-buy-house-4/lake.jpg" alt="人工湖" />
<figcaption aria-hidden="true">人工湖</figcaption>
</figure>
<h2 id="周围环境">周围环境</h2>
<p>区位图和沙盘还有一类套路：虚假的周围配套。</p>
<p>虚假主要体现在三方面。</p>
<p>第一方面是距离作假：以地铁站为例，从区位图或沙盘来看好像在附近，实际距离2km，而且还不能走直线，需要稍微绕点路，早上上班光是走到地铁站就要花半小时。所以要用你的地图APP来核实实际距离。</p>
<p>第二方面是把政府规划当成既成事实：既然是规划，说明还可以“根据实际情况”调整甚至取消，而这种调整或取消不是开发商能够决定的事情。</p>
<p>第三方面是隐瞒不利因素，例如将南部已经建设或即将建设的大高层标记成矮矮的水晶块。</p>
<p>仍然以地铁为例。买不起楼的人，通常会被挤到郊区去买楼，而身重要处郊区，地铁就会变得极其重要。实际上，地铁从规划到审批再到落地可能要长达十年时间，如果国家政策收紧，地铁规划可能还会延迟或取消。因此，除非有政府正式发布的官方消息，或者亲眼看到已经开始施工或正式运营，不要相信周围一定会有地铁。否则的话，如果地铁真的改道或取消了，你就算去砸售楼处也起不到任何作用。</p>
<p>此外有些配套的意义是不大的，例如火车站、机场，你不会天天去坐火车飞机，但是你可以天天感受到它们的噪音；例如离市政府近，你不会天天去政府办事，但你可以感受到周围配套缺乏，毕竟市政府周围经常很空旷；例如离大学近，离得再近你也得靠高考考进去才行。这里还要点名融创文旅城（原万达文旅城），配套游乐园、商业街、酒店群，这些都是城市级的配套，旅游景点的设定，你作为小区业主，这辈子能去享受几回呢？</p>
<p>所以在售楼处就要意识这些问题，不要等到回家之后才想起来配套“其实并没有什么卵用”。</p>
<h1 id="户型图的套路">户型图的套路</h1>
<p>户型的内容比较复杂，本文不展开讨论了，只讲几个坑。</p>
<p>北方人一般都讲究“南北通透”，可是你得检查一下是不是真的南北通透，例如：</p>
<ul>
<li>北边是厨房、厕所：平时不会天天开着厨房窗户或厕所窗户通风吧？</li>
<li>北边是连廊：中间户北边通常有连廊，而且连廊属于消防设施，建楼时候不能取消。平时楼房肯定不会天天起火，但可以有变态天天到连廊偷窥你家生活，而且连廊可能会挡光，所以打算买中间户的话要留意这个问题。</li>
<li>流线不畅：从南到北需要拐弯才能到达。如果住宅楼南北遮挡严重，这样通风也会不顺畅，不能算是南北通透了。</li>
</ul>
<p>户型图通常只画了单个房间情况，没有标示整体楼层的情况。所以要结合工地现场确认一下是几梯几户，户型是中间户还是边户，东西两侧是否有其他住户，中间户向外突出多少，遮挡如何。有些高层还会有腰线，腰线太长的话会稍微有些挡光，介意的话要仔细问一下腰线的问题。</p>
<p>户型图还经常存在一个严重问题：上面没标尺寸。对吧？看到户型图没尺寸，当然要较真地问一下尺寸。那为什么说要“较真地”问呢？别忘了墙也占尺寸。另外要留意公摊的问题，100平的房子，去掉公摊，实际上只剩70多平，如果户型设计不好，三室每个屋子会变得很挤。</p>
<p>有硬伤的奇葩户型（例如南北太深、房间不是长方形而是有尖角形状）就别买了，住起来不舒服的。虽然经过精心设计以后奇葩户型也可以变得精致，但改造所需的设计费和装修费一定会让你后悔当初为什么不稍微多花点钱买个好点户型的房子。</p>
<p>当置业顾问说长三米的时候，你说到底是宽了，还是窄了？这个无法回答，不同人感受不一样，而且跟你后续的装修风格、后续要布置的家具甚至灯光颜色都有关系，所以前文会让你提前拿尺子在自己家感受一下。</p>
<h1 id="样板间的套路">样板间的套路</h1>
<p>样板间主要是用来展示房间内部情况。</p>
<h2 id="装修">装修</h2>
<p>为了吸引你买房子，开发商通常会花个几十万到几百万来做装修，房间的效果变得非常高端大气上档次、低调奢华有内涵。可是，既然买不起房子，那装修肯定也要省钱，最终当然达不到样板间的效果。</p>
<p>参观样板间时，别拿样板间的样子想象自己未来的家，而且需要特别留意“非交付标准”五个字，毕竟去掉非交付标准设施之后剩下的样子也不见得是未来实际交付的样子。</p>
<p>当然你还是可以给样板间拍个照，把房间的每个方面、每个角落都拍到，虽然将来不能用于维权，但是可以在你自己装修时稍微参考参考。</p>
<h2 id="尺寸">尺寸</h2>
<p>人们都喜欢大房子，为了吸引你买，样板间当然要显得宽敞。房间去掉公摊之后实际面积就那么点，想显得宽敞，那当然要在尺寸方面造假。</p>
<p>有些开发商比较有诚意，直接用实体样板间（样板间设置在正在修建的楼内），这样房间尺寸自然是真实的。但是，房间尺寸不造假，那家具呢？比方说，双人床尺寸是1.8x2m，开发商做成1.6x1.8m，房间长宽两个方向不就都宽出20cm了吗？</p>
<p>一般开发商没那么有诚意，样板间是另外订做的，那样板间的房间尺寸就经常比实际尺寸宽，例如宽20厘米，墙再比实际尺寸薄一点，床窄20厘米，床头柜窄10厘米，这样总共就多出了50厘米。不光如此，屋门拆掉，屋内再放一面镜子，你看，豪宅的效果出来了！</p>
<p>所以本文一开始就提醒，前往售楼处之前务必带把卷尺。虽然<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29odS5jb20vYS80NDMzNDAwNTRfNzE5MTU5">卷尺也有造假版<i class="fa fa-external-link-alt"></i></span>，但你自己买的尺子肯定比做样板间时候用的尺子靠谱吧？</p>
<h1 id="公示栏的套路">公示栏的套路</h1>
<p>按照有关部门规定，有些信息是要公示的，开发商他们不得不遵守这个规定。但是，开发商可以把这些公示信息放到角落里挂着，让你不特意找就找不到，找到了也得站着看，根本没有耐心看下去。</p>
<p>既然放到不起眼的地方，我们当然更要认真地看，拿手机拍下来，然后靠在舒服的沙发慢慢看，任凭置业顾问如何怂恿，先把文字看明白再说。</p>
<h2 id="不利因素">不利因素</h2>
<p><a
href="/2020/12/12/buy-house-3/">前文</a>已详细介绍不利因素，此处不再赘述。</p>
<h2 id="居住公寓">居住公寓</h2>
<p>居住公寓指光照不足的房间。有些房子挡光严重，光照常年不足，甚至到了十多楼还是严重挡光，因此选较低楼层时要特别留意这个问题，介意采光的话慎买。</p>
<h2 id="安置房">安置房</h2>
<p>有些小区会按照政府要求配建一些安置房。如果介意原住民回迁或外来租户，务必留意公示中是否有“安置房”、“保障房”、“人才公寓”等字样。</p>
<h2 id="合同条文">合同条文</h2>
<p>合同通常是按政府标准制定的，并且需要在售楼处进行公示，所以一般都比较公平。但是，除了合同，开发商还会让你签订补充协议，而补充协议内容可以随意制定，要多不公平就可以有多不公平，而且这两类文件会放到让人没有兴趣留意观看的地方，让你没有心思较真。<a
href="/2020/12/26/buy-house-5/">后一篇文章</a>梳理了合同条文中的坑。</p>
<h1
id="售楼处现场与置业顾问营造气氛的套路">售楼处现场与置业顾问营造气氛的套路</h1>
<p>置业顾问会催你，不买就快没了，平时在朋友圈也会发朋友圈，说XX政策调整，XX区域发展，不赶紧上车就要涨价。到了售楼处，也是敲锣打鼓地宣布成交多少多少。</p>
<p>现在是2020年，大城市的楼市基本上都凉了，国家也在重点维稳，不少城市政策都在收紧，就算稍微想放松一点，也会很快上演政策“一日游”。小城市或许还红火但用不了多久也会跟着大城市变凉，所以这些只是吓唬人的促销套路。现在真的不用着急——如果房子好卖，他们还需要促销吗？什么事情都不做房子也不愁卖吧！正是因为卖不动，才会靠各种手段忽悠人买嘛！</p>
<h1 id="特价房的套路">特价房的套路</h1>
<p>特价房，不仅便宜，还会给人“正好能捡漏”的感觉。</p>
<p>难道真的是让你捡漏吗？当然不是了！</p>
<p>既然是特价房，说明肯定有便宜的原因，例如采光很差（差到15层还是居住公寓），或者挨着设备层，或者紧邻铁路线、高架桥、垃圾场等不利因素，或者跟安置居民混住，反正绝不是开发商良心发现或者简单地进行促销。</p>
<p>就算手里没钱，想靠捡漏省些钱，也要打听清楚便宜的原因之后再考虑入手。</p>
<h1
id="关于展示宣传资料与置业顾问介绍">关于展示、宣传资料与置业顾问介绍</h1>
<p>展示、宣传资料与置业顾问介绍都不具备法律效力，拿去打官司也不能当作证据。但是，你仍然可以尽量收集宣传资料，给置业顾问偷偷录音，给售楼处展板、区位图和样板间拍照，作为日后控诉虚假宣传众多证据中的一部分呈现。</p>
<p>当然，你也完全可以假定置业顾问所有的话都是放屁，这样在交房的时候你就不会比其他被忽悠的业主失望了。</p>
<h2 id="如何了解楼盘的问题">如何了解楼盘的问题</h2>
<p>其实你是可以问到到房子或开发商的负面评论的。如何操作呢？假如同一片区有A、B两家开发商的盘，你对A有意愿，那么你可以去B的售楼处，假装对B房子感兴趣，顺便跟那个B的销售说，“我朋友最近对A比较感兴趣，推荐我买A”，B的销售就会很自然地把A的问题告诉你。无论是客观事实还是恶意中伤，先记下来，然后回家再慢慢分析。</p>
<h1 id="不要急着交定金">不要急着交定金！</h1>
<p>交定金之前，开发商会想办法伺候你，让你舒舒服服地交出那笔钱。一旦交了定金，你就从爷爷变成了孙子。讨钱浪费精力，放弃又浪费金钱，只能硬着头皮继续买，很多人就这样，明知道要被坑，结果还是被坑了，所以不要急着交定金。</p>
<p>什么时候交定金呢？当你摸清楚所有情报，了解各种坑之后还能下定决心购买，你就可以交定金了。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><strong>售楼处里的套路</strong></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（六）：不要买公寓！</title>
    <url>/2020/12/28/buy-house-6/</url>
    <content><![CDATA[<p>有些人实在没钱，凑住宅钱费劲，看到公寓价格相对便宜，想买套公寓过渡。有些女性因为属于不婚族，或者害怕被男方抛弃，也想出于防御目的买一套公寓备用。虽然想法很好，但是本文仍然要提醒，除非你真的是地产行家或投资行家，十分清楚自己要做什么事情，否则无论如何也不要买公寓！</p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<p>本文所提“公寓”，指用地性质为“商务用地”、产权通常为四十年、房产证上明确为“公寓”二字的商务住宅。</p>
<p>另外还有一种“公寓”叫做“居住公寓”，那并不是本文所提到的“公寓”，只是采光很差的普通住宅，除此之外都一样。这种房子不在本文讨论范围内。</p>
<h1 id="公寓的坑">公寓的坑</h1>
<p>公寓有很多坑，每一个坑都是性质恶劣的坑，所以无论置业顾问说得再动听，你也不要头脑一热就去买公寓。</p>
<h2 id="产权问题">产权问题</h2>
<p>土地有产权期限。虽然到期之后政府不会直接把你轰出去，但是该办的手续还是要办的。住宅可以自动续期，但公寓作为商业用地，理论上讲需要重新交齐土地出让金，到时候这笔费用可能要由业主来承担。而且，产权期限从开发商拿地之后开始起算，不是从交房后开始起算，有些开发商拿到地之后捂着不开发，这样四十年产权已经白白用掉很多年了。</p>
<p>房产证上写着“公寓”二字是无法落户的（备注：有些城市能落）。独居的话无所谓，但是如果有孩子，孩子会因为没有户口而不能上学！有人说能上学？那应该是有人通过各种合法与非法手段争取来的，不像普通住宅一样有了户口就能轻松办理。</p>
<h2 id="贷款困难">贷款困难</h2>
<p>公寓的性质是商业，因此贷款要比普通住宅困难。例如：</p>
<ul>
<li>不能使用公积金贷款。</li>
<li>首付比例比普通住宅高，撑死也只能贷到五成房款。</li>
<li>贷款需要在10年内还清。</li>
</ul>
<p>尽管公寓总价比住宅小得多，但是背上了贷款，会对你再次买住宅贷款造成不利影响。如果愿意全款买倒是无所谓。</p>
<h2 id="法律风险">法律风险</h2>
<p>不要小瞧法律风险！如果没有合法的手续，一旦发生纠纷，打官司很难打赢，找政府他们也不会替你说话，弄不好还会把你当成维稳对象。</p>
<p>商住公寓毕竟还是一个合法的东西，虽然有各种坑，至少还能办得出房产证。如果是“商改住”，即商业用地改为住宅（或者按商业住宅建设，等政府验收完成后再偷偷改成公寓），这本身就有很大法律风险，容易连房产证都办不出来。</p>
<p>有些城市的限购限贷政策中，商住公寓也会被计入限购限贷数量当中。有置换需求的务必要留意有关政策，而且建议靠租房而非买房来过渡。</p>
<h2 id="被套牢">被套牢</h2>
<p>随便上网上搜索一下，就可以发现投资公寓的收益实在不好。</p>
<p>公寓收益方式主要分为出租和转卖两种。</p>
<p>先说出租。如果公寓位于商业繁华的地带，交通便利，居住需求极高，你还能靠收租金来维持。如果公寓位于郊区，交通不便，周围荒无人烟，或者周围住宅密集，甚至藏着一个城中村，你会发现连出租都租不出去。一边要及时还房贷，另一边却收不到租金，这种感觉会非常痛苦。</p>
<p>即便公寓能勉强租出去，你也不能指望租客的素质有多高。租公寓的租客平均素质更低，如果经常损坏房屋设施的话，每次转手就容易产生额外维修费用。</p>
<p>再说转卖。如果想靠低买高卖来赚差价，会面临两个严重的问题：</p>
<ul>
<li>卖不掉：假如差不多攒够钱，急需把公寓换成现金时，你会发现你这套公寓换不出钱。要知道有些城市二手住宅都不一定好卖，甚至得赔钱卖，缺点更多的公寓也不太有理由比普通住宅好卖。</li>
<li>转手费用高：即便能找到接盘侠，因为公寓是商业性质，转手时要产生较高的交易税。通过中介买卖，你还要额外再付中介费。就算房子涨价，收益很容易就被这些费用给冲没了，更何况公寓是要持续贬值的。</li>
</ul>
<p>所以把钱放到银行存定期也比直接扔给公寓靠谱，虽然放着会贬值，需要取钱的时候也会损失些利息，但至少能随时取出来，不像公寓把钱扔进去就套牢了。</p>
<h2 id="其他问题">其他问题</h2>
<p>相比于以上各项，下面都是些小问题了：</p>
<ul>
<li>户型问题：不通透。</li>
<li>房屋质量问题：例如装修质量不好，Loft高度不够等。住宅有的维权，公寓也可以有。</li>
<li>挤：当你早上上班的时候，你就会感受到，你不光要在公司的写字楼挤电梯，刚出家门就要跟着一大群人挤电梯，一万人挤那三四部电梯，你甚至可能会感觉爬楼梯（就是趴在地上那个爬）都比坐电梯快。</li>
<li>贵：公寓水电费按商业水电收费，价格是普通水电的两三倍。</li>
<li>没有燃气：有燃气？那应该用不正当手段装上去的，给消防部门打电话举报一下就会被拆了。</li>
<li>如果物业管理差劲，你还会发现，碰上个扰民的邻居更让人痛苦。如果是美容美发还好，要是KTV、会所、酒店，或者是XXOO的场所……</li>
</ul>
<h1 id="如果还是想买一套">如果还是想买一套？</h1>
<p>关于公寓的坑，本文只是简单总结，写得很粗，如果还是想购买，请找一些写得更深入的分析文章来决策。</p>
<p>对于缺钱的人来说，公寓不能买，但是可以租别人的公寓。这样不仅少了大量损失，还能帮房东少赔点钱（注意租公寓往往比合租住宅贵），一举两得。不过租房之前还是建议多跑一跑，也许找合租或者老破小整租更省钱。</p>
<p>对于可能会进入长期单身状态的人来说，如果你还没到被轰走的时候，请把买公寓的钱放到银行里，实在到了被赶出家门的时候可以先临时找个地方租，然后再好好规划一下人生，仔细了解公寓的坑之后再掏钱出来买公寓。</p>
<p>对于不差钱的人来说，公寓可以买来出租，但需要仔细选择地段、产品，精细地计算房租，否则很容易得不偿失。另外也可以找一套好一点的公寓拿来当落脚点，只不过这种公寓价格通常是按一套几千万来算，普通人根本玩不起。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><strong>不要买公寓！</strong></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（五）：关于合同</title>
    <url>/2020/12/26/buy-house-5/</url>
    <content><![CDATA[<p>本文主要列举合同中一些坑。虽然一般情况下购买者很难在短时间内把整个合同条文都理解清楚，而且即便知道合同内容不合理，也无法与开发商就合同内容进行谈判，但我们仍然有必要清楚我们将来会如何被开发商坑骗。
<span id="more"></span></p>
<h1 id="合同效力">合同效力</h1>
<p>买房当然要签合同，而且叫做《商品房买卖合同》。如果叫做认购书或其他材料（例如xx协议），那是没有法律效力的！</p>
<p>拿到合同，别看都不看就立刻签字。一旦在合同上签字画押，后续打官司就要以此为准。就算置业顾问催得再紧，也要先把合同条款研究明白再签字，虽然研究明白不一定能占便宜，但研究不明白将来发生纠纷你肯定吃亏。</p>
<p>没有白纸黑字地写到合同上面的东西，例如广告宣传，或者置业顾问口头约定，那一定都是无效的，哪怕事先拍照录音也不算数。合同没写清楚，一旦发生纠纷，只要开发商轻描淡写地说句“那是他个人行为，况且这个人早已跑路”，法律责任就可以甩得干干净净。</p>
<p>但是有些情况下合同本身也会无效。例如在五证不全（五证指《建设用地规划许可证》、《建设工程规划许可证》、《建筑工程施工许可证》、《国有土地使用证》和《商品房预售（或销售）许可证》）情况下买房，签订的合同是没有法律效力的，打官司也不会赢。</p>
<p>有些开发商会要求购房者签订阴阳合同以提高优惠、规避政策限制，也就是签两份不同的合同，其中一份是应付政府用的、形式上的合同，另一份是反映真实情况的合同。需要注意的是，在发生纠纷时，法院会根据实际情况判断合同效力，不能保证一定按实际合同进行判决，所以尽量别签阴阳合同。</p>
<h1 id="合同内容">合同内容</h1>
<p>合同正文通常采用政府规定的模板编写，需要政府审核，不能随意更改，但开发商通常会让购房者签订更厚的补充协议，而且补充协议的内容是可以随意制定的。合同正文通常不会有问题，但开发商可以在补充协议中规避自己的责任，甚至将合同正文中相对公平的内容给推翻掉，因此补充协议内容不仅不能忽视，还要专门花些时间去阅读理解。</p>
<p>在合同正文和补充条款中，应特别留意以下内容：</p>
<h2 id="支付方式期限违约责任">支付方式、期限、违约责任</h2>
<ul>
<li>如何支付？</li>
<li>总共多少钱？需要支付多少钱？（注意：通常情况下你已经交过定金）</li>
<li>支付期限是几月几号？</li>
<li>如果因为个人原因，未能及时批出贷款，或者被拒绝审批贷款，后果如何？能否更换支付方式？能否延期？延期违约金如何？折算成人民币是多少钱？</li>
</ul>
<p>计算违约金时要核实好是不是以全款价格为基准。</p>
<h2 id="交房时间与延期责任">交房时间与延期责任</h2>
<ul>
<li>几年几月几号交房？（注意必须是准确的年月日）</li>
<li>交房时，完成的是“专项验收合格”，还是“竣工验收合格”、“综合验收合格”？
<ul>
<li>“专项验收合格”、“竣工验收合格”只是“楼盖好了”，“综合验收合格”才是“小区建设好了”。</li>
<li>只有综合验收合格，才能开始办房产证。</li>
</ul></li>
<li>如未如期交房，开发商需要承担什么责任？每天应该赔偿多少钱？折算成人民币是多少钱？是以现金还是以其他形式补偿？</li>
<li>如果开发商承担责任，有没有免责期（延期多少天之后开始赔偿），或者多长时间后不再赔偿损失？（正常情况下都不应该存在）</li>
</ul>
<p>务必用计算器计算一下违约金的金额。例如万分之一还算可以，但如果写成万分之零点一，那点赔偿连住宾馆都不够。</p>
<h2 id="拒绝收房">拒绝收房</h2>
<ul>
<li>如果交房时手续不全，能否拒绝收房？</li>
<li>如果房屋遭遇质量问题，或者不符合装修标准，能否拒绝收房？（备注：“房屋主体结构质量不合格”与“房屋质量问题严重影响正常居住使用”这两种情况可以拒绝收房，普通质量问题与不符合装修标准一般不能拒绝收房）</li>
<li>拒绝收房，我们会有什么后果？</li>
<li>如房屋有质量问题，能否主张赔偿，或者开发商是否承诺维修？</li>
</ul>
<p>需要留意，对开发商来讲“质量问题”通常指建筑结构质量，所以轻微裂缝、漏水、装修粗糙等都不属于“质量问题”，而且大开发商一般不会在这方面出问题（否则负责人容易进监狱），因此维权时务必精确地指明是哪方面的质量问题。</p>
<h2 id="办理房产证期限与延期责任">办理房产证期限与延期责任</h2>
<ul>
<li>什么时间节点可以“综合验收合格”？（注意，这是办房产证的重要前提条件）</li>
<li>什么时间节点可以完成土地使用权变更？房屋所有权登记？</li>
<li>如果开发商没有如期完成以上各项，且并非我们原因耽误，开发商如何进行赔偿或补偿？</li>
<li>如果我们自己一直拖着不办房产证，我们是否需要赔偿损失？</li>
</ul>
<h2 id="装修标准精装房">装修标准（精装房）</h2>
<ul>
<li>样板间中展示了一系列装修和家具布置，那么有没有在合同中也详细指明装修标准？</li>
<li>有没有精确到具体的品牌与型号？</li>
<li>如未使用指定品牌，替代方案如何？</li>
</ul>
<p>在装修标准方面需要留意一个坑：“XX品牌”，即便都是品牌，也有档次的区别，既可以有高端产品，也可以有低端产品，就像800块钱的华为手机与5000块钱的华为手机那样。</p>
<h2 id="空白处">空白处</h2>
<p>所有空白处（即__________）都应使用“/”或“X”进行标记，以免被偷偷增加不利内容。</p>
<h1 id="降价应不应该维权">降价应不应该维权</h1>
<p>房子买完之后，如果房子降价，维权是没有法律依据的，打官司一定会输。从道理上讲，房子降价你让开发商赔偿，难道房子涨价你要给开发商补钱吗？</p>
<p>如果很多业主都主张维权，而且已经策划维权行动，你可以跟着凑个热闹，没准开发商为了息事宁人而给你们提供一些补偿。但是务必记住，降价维权不是合法行为，维权得到的补偿也不能算是合法手段弄来的，所以不要当维权团体的骨干，也不要真的去法院打官司。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><strong>关于合同</strong></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>在GitLab CI中构建GitBook的各种坑</title>
    <url>/2021/01/25/gitbook-on-gitlab/</url>
    <content><![CDATA[<p>GitBook是一个好用的文档工具，然而他们已经转型在线敛财，留下的开源的框架已经弃坑。我们用GitLab
CI（或其他自动构建系统）构建，则会有很多的坑。本文梳理了会遇到的各种坑。</p>
<span id="more"></span>
<h1 id="gitbook的各种坑">GitBook的各种坑</h1>
<h2 id="卡在-installing-gitbook-3.2.3">卡在 Installing GitBook
3.2.3</h2>
<p>这个是国内网络问题，直接换用淘宝源即可： <pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>通常情况下，这样是不够过瘾的，所以要换得全一些，免得再踩坑：
<pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org
npm config set disturl https:&#x2F;&#x2F;npm.taobao.org&#x2F;dist
npm config set sass_binary_site https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass
npm config set electron_mirror https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;electron&#x2F;
npm config set puppeteer_download_host https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors
npm config set chromedriver_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;chromedriver
npm config set operadriver_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;operadriver
npm config set phantomjs_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;phantomjs
npm config set selenium_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;selenium
npm config set node_inspector_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-inspector
npm config set node_sqlite3_binary_host_mirror https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors

yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org
yarn config set disturl https:&#x2F;&#x2F;npm.taobao.org&#x2F;dist
yarn config set sass_binary_site https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass
yarn config set electron_mirror https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;electron&#x2F;
yarn config set puppeteer_download_host https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors
yarn config set chromedriver_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;chromedriver
yarn config set operadriver_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;operadriver
yarn config set phantomjs_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;phantomjs
yarn config set selenium_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;selenium
yarn config set node_inspector_cdnurl https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-inspector
yarn config set node_sqlite3_binary_host_mirror https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>但是，到了CI服务器上，这样有可能还会卡Installing，所以我们可以考虑提前手工把这个3.2.3装好（位于<code>~/.gitbook/versions/3.2.3</code>）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.gitbook/versions
<span class="token builtin class-name">cd</span> ~/.gitbook/versions
<span class="token function">npm</span> pack gitbook@3.2.3
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> gitbook-3.2.3.tgz
<span class="token function">mv</span> package <span class="token number">3.2</span>.3
<span class="token builtin class-name">cd</span> <span class="token number">3.2</span>.3
<span class="token function">npm</span> i

<span class="token comment"># 防止踩后文提到的一个坑</span>
npx <span class="token function">npm</span> i cpr@3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安好之后把它打包上传到服务器里面，然后我们需要设法让CI每次构建之前都能找到这个文件。</p>
<p>假设GitLab CI Runner基于Docker，那么有两种处理方法： *
一种是把3.2.3文件也传到代码里，然后在构建步骤中增加类似<code>mkdir -p ~/.gitbook/versions; ln 3.2.3 ~/.gitbook/versions</code>的操作。但是大家都知道光处理一个node_modules就会耗费大量时间，所以除非没权限操作服务器，否则不太推荐。
*
如果有服务器权限的话，最简单的办法就是设置一个Volume，把3.2.3所有文件提前装好放到某个位置（例如<code>/data/gitlab-runner-gitbook-cache/versions/3.2.3</code>），然后修改Runner的config.toml：
<pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">runners</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">[</span><span class="token table class-name">runners.docker</span><span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token key property">volumes</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token string">"/data/gitlab-runner-gitbook-cache:/root/.gitbook"</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>说到config.toml，顺便提一下，<code>/root/.npm</code>和<code>/cache</code>也可以顺便在服务器本机缓存一下，避免每次创建容器时都重新下载，从而提高构建速度。</p>
<h2 id="报错typeerror-cb.apply-is-not-a-function">报错，TypeError:
cb.apply is not a function</h2>
<p>报错全文： <pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;gitbook-cli&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;graceful-fs&#x2F;polyfills.js:287
      if (cb) cb.apply(this, arguments)
                 ^

TypeError: cb.apply is not a function
    at &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;gitbook-cli&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;graceful-fs&#x2F;polyfills.js:287:18
    at FSReqCallback.oncomplete (node:fs:194:5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>解决方法有两种： * 将Node.js降级为版本10.x *
找到报错的源头，即polyfills.js文件的第287行，将这个函数直接改成
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">statFix</span> <span class="token punctuation">(</span><span class="token parameter">orig</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> orig
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p>
<p>鉴于我们要通过CI来构建，推荐使用第一种解决方法。</p>
<h2 id="莫名其妙地找不到文件">莫名其妙地找不到文件</h2>
<p>错误信息： <pre class="line-numbers language-none"><code class="language-none">Error: ENOENT: no such file or directory, stat &#39;&#x2F;builds&#x2F;xxxxx&#x2F;xxxxx&#x2F;_book&#x2F;gitbook&#x2F;gitbook-plugin-xxx&#x2F;xxx.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>如果你多试几次，可能会发现每次报错的文件都不一样。</p>
<p>如果GitBook 3.2.3是手工安装的，需要进到安装目录里，补一条命令，例如：
<pre class="line-numbers language-none"><code class="language-none">cd ~&#x2F;.gitbook&#x2F;versions&#x2F;3.2.3
npx npm i cpr@3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<p>自动安装（如果你不嫌卡Installing GitBook
3.2.3）则需要提前<code>gitbook fetch 3.2.3</code>，然后在正式build之前执行上面两行命令（当然建议写成一行<code>(cd ~/.gitbook/versions/3.2.3 &amp;&amp; npx npm i cpr@3)</code>，命令两端有括号）。</p>
<h2 id="左侧的文档目录未更新">左侧的文档目录未更新</h2>
<p>是不是使用summary插件自动生成目录了？如果是，每次build两遍就好了。</p>
<h1 id="参考操作">参考操作</h1>
<h2 id="手工安装gitbook-3.2.3">手工安装GitBook 3.2.3</h2>
<p>参见前文。</p>
<h2 id="package.json">package.json</h2>
<p>仅列举部分内容：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"gitbook serve"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"gitbook build"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"gitbook-cli"</span><span class="token operator">:</span> <span class="token string">"^2.3.2"</span><span class="token punctuation">,</span>
    <span class="token property">"gitbook-plugin-editlink"</span><span class="token operator">:</span> <span class="token string">"^1.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"gitbook-plugin-prism"</span><span class="token operator">:</span> <span class="token string">"^2.4.0"</span><span class="token punctuation">,</span>
    <span class="token property">"gitbook-plugin-search-pro"</span><span class="token operator">:</span> <span class="token string">"^2.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"gitbook-plugin-summary"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>
    <span class="token comment">// 其他插件...</span>
    <span class="token comment">// 唯独不能放 gitbook，否则会报错</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="gitlab-ci.yml">.gitlab-ci.yml</h2>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">stages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> build
  <span class="token punctuation">-</span> deploy

<span class="token key atrule">variables</span><span class="token punctuation">:</span>
  <span class="token key atrule">PROD_DEPLOY_USER</span><span class="token punctuation">:</span> root
  <span class="token key atrule">PROD_DEPLOY_HOST</span><span class="token punctuation">:</span> x.x.x.x
  <span class="token key atrule">PROD_DEPLOY_PORT</span><span class="token punctuation">:</span> <span class="token number">22</span>
  <span class="token key atrule">PROD_DEPLOY_PATH</span><span class="token punctuation">:</span> /var/www/html
  <span class="token comment"># PROD_DEPLOY_SSH 在 GitLab 的 Settings -> CI/CD -> Variables 中配置</span>

<span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build
  <span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span><span class="token number">10</span>      <span class="token comment"># 此处要使用版本10</span>

  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> npm config set registry https<span class="token punctuation">:</span>//registry.npm.taobao.org
    <span class="token punctuation">-</span> npm config set disturl https<span class="token punctuation">:</span>//npm.taobao.org/dist
    <span class="token punctuation">-</span> npm i
    <span class="token punctuation">-</span> npm run build
    <span class="token comment"># 使用summary插件生成目录的话，需要build两遍才能显示新版的目录</span>
    <span class="token punctuation">-</span> npm run build

  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> node_modules/

  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> _book
    <span class="token key atrule">expire_in</span><span class="token punctuation">:</span> 1 week

  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master

<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy
  <span class="token key atrule">image</span><span class="token punctuation">:</span> sebble/deploy
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mkdir <span class="token punctuation">-</span>p ~/.ssh
    <span class="token punctuation">-</span> echo "$PROD_DEPLOY_SSH" <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/id_dsa
    <span class="token punctuation">-</span> chmod 600 ~/.ssh/id_dsa
    <span class="token punctuation">-</span> echo <span class="token punctuation">-</span>e "Host <span class="token important">*\n\tStrictHostKeyChecking</span> no\n\n" <span class="token punctuation">></span> ~/.ssh/config
    <span class="token punctuation">-</span> rsync <span class="token punctuation">-</span>rav <span class="token punctuation">-</span>e "ssh <span class="token punctuation">-</span>p $PROD_DEPLOY_PORT" _book/ "$PROD_DEPLOY_USER"@"$PROD_DEPLOY_HOST"<span class="token punctuation">:</span><span class="token string">"$PROD_DEPLOY_PATH"</span>
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考资料">参考资料</h1>
<ul>
<li>https://github.com/GitbookIO/gitbook-cli/issues/55</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>GitBook</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈社招招聘（四）：笔试的设计</title>
    <url>/2021/02/12/hiring-test-paper/</url>
    <content><![CDATA[<p>有些单位在招聘时，会安排一轮笔试。本文谈一谈笔试的经验。</p>
<span id="more"></span>
<h1 id="笔试的目的">笔试的目的</h1>
<p>笔试最大的特点就是省事，只要事先把题目设计好，让应聘者过来答题就OK，因此适合应聘者比较多的情况。</p>
<p>笔试应当放在招聘的第一环节，以便“筛掉一大批垃圾”。为了筛掉明显不合适的应聘者，笔试的题目还要有一定的区分度，不然的话，所有人都拿到满意的成绩，笔试就没意义了。</p>
<p>笔试不能代替面试。笔试只适合考察技术问题，心理素质、团队意识、个人素养等非技术特性是无法通过笔试考查出来的。</p>
<h1 id="笔试的内容">笔试的内容</h1>
<p>笔试题建议分为三部分：送分题、经验题、实战题。</p>
<h2 id="送分题">送分题</h2>
<p>笔试题中，应该包含一些送分题，既是给应聘者一点信心，又能筛掉明显不适合开发工作的人——如果连送分题都答不上来，赶紧回家躺平去吧。</p>
<p>就像高考数学卷，满分150分，对于冲985、211重点的考生来说，其中100分都是白送分的信心题，必须全部拿到手，剩下50分才是重点大学的入场券，拿得越多越容易进重点。然而高考也要照顾大多数人，如果每道题都是奥林匹克竞赛水平，那就几乎没人能考大学了，即使有能力，一大片答不上的空白也会挫败考生信心。</p>
<p>送分题，题型可以是简单的选择、填空，内容可以简单到只要学过编程就能答上，最后评卷的时候把没答上的人给PASS掉就行。</p>
<h2 id="经验题">经验题</h2>
<p>前面提到了“送分题”，那么“经验题”难度就要比送分题高一些了。这部分问题建议设计成问答题，挑取开发中常见的一些技术问题，以考察应聘者是否具备一定的开发经验。</p>
<p>例如MySQL并发事务容易出现问题，所以可以考察应聘者对脏读、不可重复读、幻读的理解，并要求应聘者回答如何规避。</p>
<p>这部分问题既可以是有标准答案的死问题，也可以是开放的活问题。建议少出一些死问题，多出一些活问题，以免某些应聘者靠背答案来蒙混过关。</p>
<h2 id="实战题">实战题</h2>
<p>最后要设计一两道实战题。可以以公司业务场景为基础，做一些设计或编码工作，重点考察应聘者是否逻辑清晰、思维缜密。同时可以在题目中设置一点陷阱，考察应聘者是否细心。</p>
<p>以信息管理系统为例，考虑一个特定的业务场景，要求应聘者设计表结构，至少可以考察到以下几个方面：</p>
<ul>
<li>是否设计了主键？</li>
<li>表和字段的命名习惯如何，是汉语拼音，还是英文单词？</li>
<li>数据类型是否规范？长度和类型是否够用？是否用NOT NULL？</li>
<li>（MySQL）是否考虑并发读写的问题？</li>
<li>是否考虑了业务变化的需要？</li>
</ul>
<p>通过一个题，既考察了技术水平，也在一定程度上考察了非技术水平。</p>
<p>出题者还可以在此基础上扩展，例如要求应聘者写SQL语句，或者提出性能要求，这样就能进一步了解他对SQL的熟悉程度。</p>
<p>再举一个案例，要求应聘者往一个树形结构中插入一个节点，可以考察到以下几个方面：</p>
<ul>
<li>能否正确地实现功能？</li>
<li>代码是否简洁明了？</li>
<li>代码格式（命名、缩进等）是否规范？</li>
<li>是否有防御性编程意识，例如检查边界、空指针等低级错误？</li>
</ul>
<h1 id="笔试的设计">笔试的设计</h1>
<p>考察技术能力，当然不应当局限于答案的对错。在设计题目时，除了标准答案，建议注明：</p>
<ol type="1">
<li>每道题的考察目的，这样在整张试卷设计完成后，你就能知道考察要点是否有所遗漏。</li>
<li>加分点/扣分点：虽然题目没有标准答案，或者有标准答案而应聘者答案错误，但是有些要点正确，例如他考虑了有效性校验。可以将这类加分点或扣分点也明确标示出来。</li>
</ol>
<p>题目范围应当考虑公司工作实际需要。例如公司是做信息系统的，用不到复杂算法，那么别考编程竞赛那种高难的算法题；如果公司是做图像识别的，可以出一些数学方面的问题，而且要求应聘者禁止靠某些工具类来偷懒。</p>
<p>对技术能力的考察，应当把重点放在基本功和基本素养上面，例如问题分析能力、编程语言或框架基本原理，而非某一种高级用法、复杂逻辑。像某些特别具体的API，如果连你自己平时都要到百度查用法，拿出来考应试者显然是不合适的。</p>
<h1 id="笔试之后">笔试之后</h1>
<p>应聘者通过笔试后，应当尽快向应聘者进行反馈。如果应聘者水平OK，建议两三天之内就通知应聘者参加面试，笔试面试间隔不超过一周，否则应聘者就跑了。</p>
<h1 id="参考资料">参考资料</h1>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDExLzAzL2hpcmluZy1leHBlcmllbmNlLTAuaHRtbA==">俺的招聘经验
- 编程随想的博客<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="本系列文章">本系列文章</h1>
<ul>
<li><a
href="/2020/08/16/resume-filtering/">作为招聘者，筛选简历的关注点</a></li>
<li><a
href="/2020/08/20/resume-improvement/">来自招聘者的建议——如何优化简历</a></li>
<li><a href="/2020/08/29/bad-resume/">迷惑简历大赏</a></li>
<li><strong>笔试的设计</strong></li>
<li><a href="/2021/05/12/interview/">面试的安排</a></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>招聘</tag>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程避坑指南（一）——需求调研</title>
    <url>/2021/03/06/requirement-trap-1/</url>
    <content><![CDATA[<p>做软件项目，为了不被甲方拖入无尽的深渊，在初期需求工作上就要稳扎稳打，躲避陷阱。</p>
<span id="more"></span>
<h2 id="先做计划再去调研">先做计划再去调研</h2>
<p>调研之前，要了解目标用户的群体类型、组织架构、主要业务职责，确定系统建设需要哪些群体参与，同时在沟通过程中要了解用户的信息化经验。</p>
<p>需求调研，应该要求用户选择一段相对集中的时间。制定需求调研计划时，应当包含计划调研时间、地点、调研单位/部门、主题等，而且计划要留有一定的灵活性，以便用户协调安排。</p>
<p>调研时要重点记录用户的组织架构、工作流程、现有信息化系统使用情况、现有业务痛点、工作关注点，以及用户自己提出的有效需求。</p>
<h2 id="先提方案再做确认">先提方案再做确认</h2>
<p>如果用户信息化经验丰富，能够提出一套实施方案，那么可让业主先梳理系统总体需求、主要功能模块，并且与开发单位进行一次或多次沟通，确定主体框架，然后以此为基础，组织后续需求调研工作。</p>
<p>对于几乎没有信息化经验的用户，即便去现场进行调研，可能也得不到多少有价值的信息。对于这种情况，可以先按自己的理解，提前制定一套或多套方案，启发用户思路，从而主动引导用户需求。</p>
<h2 id="现场留证据">现场留证据！</h2>
<p>每一次调研都应当进行记录，保留证据，证明需求工作翔实有效。</p>
<p>前往调研时，应派人保留现场照片、录音，并用签到表完整记录在场人员（含单位部门、职务、联系方式等）。</p>
<p>每次调研要立即形成现场记录，记录当次调研工作的主要调研内容，为后续需求分析工作提供有效依据。不要拖到第二天或更长时间以后才整理，否则容易丢三落四。</p>
<h2 id="打破神话">打破神话</h2>
<p>对于缺乏信息化经验的用户，对软件工程会有以下几个常见的误解：</p>
<ul>
<li>软件系统可以解决一切问题！</li>
<li>软件开发又不像硬件那样大张旗鼓，根本不需要那么多费用。</li>
<li>增加某某某功能，不就是加个按钮的事儿吗？</li>
<li>系统原型都做好了，开发应该很快了吧。</li>
<li>……</li>
</ul>
<p>因此，在与用户交流的时候，既要让他们相信开发人员有能力解决问题，又要向用户讲明实际情况，让用户意识到软件虽然看不见、摸不着，其复杂度不亚于硬件或其他类型的工程。</p>
<h2 id="不要随意承诺">不要随意承诺</h2>
<p>在调研期间，不要随意答应用户的需求，哪怕是看起来很容易解决的问题，或者群众意见强烈的问题，也只是先将他们的需求记录下来，回去再对用户提出的需求进行评估，因为其中有可能会涉及到利益问题甚至体制问题，并不能靠软件解决。承诺一件事情，后面却发现做不到，这样会失信于人，而且硬着头皮干，轻则提高无效成本，重则卷入复杂利益关系，解决不了问题还要得罪用户。</p>
<p>基于同样道理，不要随意答应在系统中预留东西，以免因标准模糊导致后续扯皮。</p>
<h2 id="不必完全满足用户需求">不必完全满足用户需求</h2>
<p>如果能当场判断出用户需求不合理，就应当现场积极回应，有理有据地否决用户需求，或要求用户将需求调整至合理范围。例如：</p>
<ol type="1">
<li>性价比低（对用户而言作用不大，但开发成本过高）：否决——软件工程是工程，所以也受“项目铁三角”质量、进度、成本三要素制约。</li>
<li>用户管理方式问题：系统顶多是在现有制度框架下稍作优化，根本问题需要用户自行解决——软件系统是管理方式的体现，所以优化系统之前要先优化管理流程。</li>
<li>含糊的需求：引导用户将需求具体化，例如提供详细的业务资料，进一步明确用户群体、系统输入、系统输出。如果用户无法提供更详细的信息，则进行否决——软件系统无法实现一个模糊的东西。</li>
<li>未确定的需求：要求用户尽快确定需求，如果在指定期限内无法确定，系统只能先不实现，后续根据成本选择补充开发或走需求变更流程——软件系统无法实现一个未确定的东西。</li>
<li>将简单问题复杂化的需求：分析用户的实际痛点，引导用户以解决问题为目标，要求用户做出一些妥协，采用更加合适的方案来解决问题——软件系统的根本目的是解决问题，而不是制造新的问题。</li>
</ol>
<p>对于有一定意义，但仍然存在风险的需求，可以要求用户进一步提供支持，例如二次调研、提供指定资料、提供人员参与需求过程等。同时也要让用户意识到，只有用户充分配合开发人员，软件开发人员才能确定系统需求。</p>
<h2 id="约定好如何变更需求">约定好如何变更需求</h2>
<p>没有不变的需求，哪怕你“干一票就走”，也不一定能躲掉用户的需求变更。需求变更控制得不好，后面容易卷入到无限的事务之中，难以脱身。</p>
<p>为了将需求变更控制在可接受范围内，必须和用户建立一套明确的、规范的需求变更流程，强化需求变更控制，让用户为需求变更承担成本。只要超过特定时间节点（需求评审通过），需求就处于冻结状态，后续的需求变更无论大小，必须走约定的流程，以此让用户意识到，软件工程与其他工程一样，需求变更也会产生成本，影响交付进度和交付质量，而且提出需求变更的节点越晚，变更代价越大，由此产生的费用绝不可能是捞钱骗钱。</p>
<p>需求变更的管理是一项复杂而细致的工作，后面将进行专题讨论。</p>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>需求</tag>
      </tags>
  </entry>
  <entry>
    <title>控制团队内部的负面言论</title>
    <url>/2021/04/01/expression-control/</url>
    <content><![CDATA[<p>在开发团队中，不当的负面言论很容易打击成员的积极性，降低生产力，甚至对团队文化造成不可逆的破坏。因此需要对负面言论进行识别和判断，过滤掉有害言论，调整本质上有益但形式上不恰当的言论。</p>
<span id="more"></span>
<h2 id="本文不是">本文不是……</h2>
<p>本文目标读者主要为软件开发团队的管理者，因此本文不是：</p>
<ul>
<li>本文不是介绍（政府）如何言论审查。</li>
<li>本文不是介绍如何应对（来自用户的）负面舆情。</li>
</ul>
<h2 id="负面言论的危害">负面言论的危害</h2>
<p>没有人喜欢被责骂、被否定，即使是个M（受虐狂），也得是被自己喜欢的异性施虐才能兴奋，所以不要随便对员工讲负面的话。</p>
<p>负面言论的影响包括以下几个方面：</p>
<ul>
<li>员工经常被上级训的话，容易消极怠工，或者“破罐子破摔”。</li>
<li>员工经常被同级训的话，容易成为团队内的“背锅侠”，从而心灰意冷。</li>
<li>团队/部门/公司经常被说坏话的话，员工会质疑自己工作的意义，然后选择混日子，“反正好好干活也没用”。如果一半以上的人都开始混日子，这个团队恐怕就没救了。</li>
</ul>
<p>不同年龄层的承受能力是不一样的。一般来讲，80后或者年龄更大的员工，可能会因为要养家糊口而选择忍耐一时，但是对于90后甚至未来的00后员工，他们很可能会直接撂挑子走人，“老子不伺候你了”。</p>
<h2 id="识别与处理负面言论">识别与处理负面言论</h2>
<p>管理者要调整自己的心态，通过以下三个思路来处理负面言论：</p>
<ol type="1">
<li>将负面语气转变正面语气</li>
<li>将“背锅”、“追责”转变为“解决/预防问题”</li>
<li>屏蔽掉不解决问题的言论</li>
</ol>
<h3 id="负面语气-正面语气">负面语气 → 正面语气</h3>
<p>即使你的本意是为了改善员工工作方式，提升员工个人能力，也不要用否定、反问的语气与同事或下属说话。用微信、钉钉等文字聊天工具时，要更加注意措辞，以免被误认为是责备。例如：</p>
<ul>
<li>员工开发了一个功能，却延期了一两天才完成。这时候不要训“你怎么做的这么慢”、“怎么才干完”，而是从两方面入手，一方面是调整任务排期（例如安排加班），尽量抵消延期的影响，另一方面，管理者要帮他分析延期的原因，然后提醒他，“你在xxx方面应该再努力/注意一下”。</li>
<li>员工开发了一个功能，但是性能很差，而且还有SQL注入问题，这时候不要说“你怎么连这么低级的错误都犯”，而是直接点明问题，让他们“继续优化完善”。</li>
<li>员工提出了一个idea，但是不符合实际情况，或者实现的代价太大，这时候不要说“你的想法不行”，而是先顺着他的idea，代入到项目中进行分析，逐步推导出“不合适”的结论（如果结论正好相反，也可以考虑采用，然后公开表扬奖励），从而使员工信服。</li>
<li>员工认为应该按A方案工作，而管理者认为应该按B方案工作，并且经验证明B确实可行而A确实不可行，这时候不要说“你就是不行，就是得听我的”，而是要稍微解释一下，“以我的实践经验，B方案是更加合适的，我们应该先尝试B”。</li>
</ul>
<p>说话要给员工留面子，员工做了好事则要给他们挣面子。纯负面的话不讲，批评的话私下讲，表扬的话公开讲。</p>
<p>不要因为员工做得不好，就把员工的活抢过来亲自去做（除非任务非常紧急），一方面会让员工觉得自己不受信任，尊严受到打击，另一方面会让自己变得很忙很累。这种情况下，还是应该审视他们的工作，哪怕自己做起来效率更高、质量更好，也要把该做的事情指出来，交给员工自己完成改进，实在不行再考虑换人。</p>
<h3 id="背锅追责-解决预防问题">背锅、追责 → 解决、预防问题</h3>
<p>发生事故的时候，不要追问或暗示“是哪个混蛋干的好事”，而是要尽快定位问题、解决问题，先把窟窿堵上再说。</p>
<p>如果追责，肯定是先追究领导责任，所以领导也应当先背锅，而不是把责任推给下属。就算是下属故意搞破坏，领导责任也只能说是减轻而不是完全消失。如果坚持找个人毛病，以后团队成员做事会变得畏手畏脚，担心惹事生非，与他人沟通也会采取踢皮球的策略，这就是一种无形之中的打击。</p>
<p>除了不轻易追究个人责任，更重要的还是分析如何预防问题，让同样的问题不再发生，这才是领导应该做的事情。</p>
<h3 id="屏蔽无意义言论">屏蔽无意义言论</h3>
<p>什么算是无意义言论呢？光抱怨不努力，光提问题不解决，光制造矛盾不收拾，这样的言论都是无意义言论。</p>
<p>应该通过适当的管理来屏蔽这类言论，例如：</p>
<ul>
<li>管理者应该对经常发牢骚的人提出要求，要么闭嘴好好干活，要么找个没人的地方随便发泄，不要在工作场合影响其他人工作。</li>
<li>管理者应当要求，无论是谁，如果想否定他人观点、推翻他人工作，那么就必须提出一套可行的解决方案，否则就视为不尊重他人。</li>
<li>管理者应该私下提醒说闲话的人，不要评论跟本职工作无关的事情，例如公司高层内斗、市场机会丢失、xx领导是傻逼等等。如果是自己听到了，就当作没听见，还能保平安。</li>
</ul>
<h2 id="除了处理言论还应当更进一步">除了处理言论，还应当更进一步</h2>
<p>处理言论是“治标不治本”的方式。为了使团队可持续地走下去，管理者最终还是要从团队文化建设方面下手，建设积极正向的氛围，使成员自发地朝着目标努力，这样负面言论自然而然就少了。</p>
<p>团队文化建设是一个复杂的问题，本文只挑几个方面进行讨论：</p>
<h3 id="互相尊重">互相尊重</h3>
<p>在建设团队文化过程中，一个简单而重要的做法是彼此之间互信尊重、坦诚相待，不要用斗争哲学来处事。</p>
<p>可以不定期分批次地、小范围地、非正式地与员工进行一些交流，交换彼此的看法，增强互信，减少误判。特别是90后甚至即将步入职场的00后年轻员工，斗争哲学容易把他们赶跑，而坦诚相待可以使他们主动靠过来。谁都不用防备谁，工作可以更轻松。</p>
<h3 id="言而有信">言而有信</h3>
<p>大家都知道“狼来了”的故事。如果管理者屡次失信，那么大家就不会再相信你了，而且这种信任危机是很难挽救的。</p>
<p>言而有信就是说到做到，但是，换个角度来想，也可以是“做不到就不说”，不要提出无法兑现的承诺，不要给员工画吃不到的饼。</p>
<h3 id="适当激励">适当激励</h3>
<p>激励是促使员工积极工作的有效手段。鉴于激励的复杂性，以及很多公司事实上难以落实物质激励，本文就不再详细讨论了。</p>
<h2 id="反例">反例</h2>
<p>控制负面言论，不代表不能进行批评，例如员工经常消极工作，领导仍然应该及时“敲打敲打”（为了留面子，可以私下敲打）。如果严重违背原则，甚至违反了法律法规，这时候还是要公开批评，防止更多人走歪路。</p>
<p>负面言论虽然不适合对员工讲，但是适合自己对自己讲，自我批评，鞭策自己进步。</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5uZXRraWxsZXIuY24vbWFuYWdlbWVudA==">Netkiller管理手札<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>团队建设</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈社招招聘（四）：面试的安排</title>
    <url>/2021/05/12/interview/</url>
    <content><![CDATA[<p>前文谈到了笔试，本文继续谈一谈面试的经验。</p>
<span id="more"></span>
<h2 id="面试的目的">面试的目的</h2>
<p>面试是了解一个人的重要途径。通过面试过程的言谈举止，可以大体了解到应聘者性格、思维，也能从应聘者反应当中看出他对技术与非技术问题的理解情况。因此招聘可以没有笔试，但无论是现场面试，还是远程面试，招聘一定要安排面试。</p>
<p>有些公司规模较大，会安排两轮或多轮面试。这种情况下，每轮面试通常会由不同的部门主导，或者带有不同的目的，例如第一轮由人事部门主导，考察基本情况与基本能力。第二轮由具体开发部门主导，考察具体的技术能力，能否与开发团队有效配合，甚至讨论薪资待遇，等等。</p>
<h2 id="面试问题设计">面试问题设计</h2>
<p>设计面试问题时，要考虑自己面试的目的：</p>
<ul>
<li>假如团队已经成型，只需要一些按命令干活的人，那么面试问题可以围绕团队现有技术路线展开，考察应聘者是否掌握相应的工具，以及能否理解你的命令。</li>
<li>假如业务发展，需要做一些新技术的尝试，那么面试问题就不应局限于某个框架的用法，而是考察应聘者是否理解框架深层次的东西，以及思维能力如何。</li>
<li>假如业务发展，需要分拆团队，那么面试问题又需要考察应聘者是否具备一定的管理经验。鉴于本系列文章主要招聘初中级开发人员，本文不再详细讨论如何考察管理能力。</li>
</ul>
<h3 id="必问题">必问题</h3>
<p>有三个问题是务必要问的，一个是自我介绍，一个是（社招）离职原因，还有一个是面试结束之前，让应聘者反问招聘者。</p>
<h4 id="自我介绍">自我介绍</h4>
<p>自我介绍是最常用的开场白，可以让招聘者和应聘者共同进入状态。通过应聘者简历和自我介绍，我们可以大概了解他们基本工作经历和语言表达能力。</p>
<h4 id="离职原因社招">离职原因（社招）</h4>
<p>离职原因不光是公司考察员工的问题，其实也是员工考察公司的问题。</p>
<p>虽然聪明的应聘者往往不会直说上家公司问题，也不会直说想涨工资，但如果他们提出了具体的原因（例如上家工作压力过大，或者通勤太远），招聘者在后面就可以和应聘者共同探讨，判断新的岗位能否满足应聘者，不合适的话就可以尽快结束面试，否则的话，就算勉强发了offer，早晚还是要跳槽的。</p>
<p>如果碰到多次换工作的，可以进一步问频繁离职的原因，是主观原因还是客观原因，从而判断能否录用。</p>
<h4 id="你还有什么问题要问吗">你还有什么问题要问吗</h4>
<p>面试结束之前，可以向应聘者抛出这个问题，让他们反问招聘者。通过他们提出的问题，来了解到他们对新工作的关注点，例如薪资待遇、晋升机会等。</p>
<h3 id="选问题">选问题</h3>
<p>面试是随机性很强的事情，而且很多时候也是“随缘”的事情，所以你的问题都可能会变成“选问题”。</p>
<p>即便如此，招聘者也应当事先准备一个题库，记录自己的关注点、考察点，这样在面试时候才能随机应变，否则的话容易让应聘者困扰。</p>
<p>在事先准备好题目之后，可以从以下角度来发问，从而从不同角度来考察应聘者：</p>
<h4 id="直接从题库提问">直接从题库提问</h4>
<p>如果只是马上招人干活，不需要员工有太多的主观能动性，那么可以考察一些有固定答案的死问题。但是，如果有笔试环节，还是建议把这类问题放到笔试中提问，以免浪费时间。</p>
<p>另外招聘者需要注意，你知道去网上搜题库，聪明的应聘者当然也知道提前找题库背答案。</p>
<h4 id="从简历和自我介绍来提问">从简历和自我介绍来提问</h4>
<p>可以从简历和应聘者的自我介绍中选取一些点来进行提问，例如：</p>
<ul>
<li>你在简历中提到熟练使用MySQL数据库，那么（从题库里找一些跟MySQL有关系的问题）</li>
<li>你在简历中提到了某某技术问题，你解决的思路如何，具体改了哪些参数，效果如何？</li>
<li>你在简历中提到搭建某某框架，你用了哪些组件，集成过程中有哪些困难？</li>
<li>生产系统用户规模多少，并发量多少？</li>
<li>你的项目规模、工作团队规模？</li>
<li>你在项目中的角色是什么？</li>
<li>你项目中XX组件的版本号是多少？</li>
<li>……</li>
</ul>
<p>这样一方面可以判断他的工作经历是否真实，另一方面可以判断他对相关技术或工作的了解程度如何。</p>
<p>对于技术路线不完全匹配的，例如项目使用React，而应聘者工作经历以Vue为主，提问时最好忽略框架的具体用法，考察原理性的东西。能够掌握原理，说明切换技术路线也不是非常困难的事情。</p>
<h4 id="结合实际场景提问">结合实际场景提问</h4>
<p>可以结合具体的案例，让应聘者来设计或实现，例如某项目的总体设计，或者<span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDExLzEyL3ByaW1lLWFsZ29yaXRobS0xLmh0bWw=">计算质数<i class="fa fa-external-link-alt"></i></span>程序。</p>
<p>对于这类问题，关注点不应是对错，而是考虑问题是否周全，例如项目总体设计，需要考虑业务模块是否合理、能否支撑整个流程，计算质数程序需要考虑对输入输出范围的判断、程序运行性能，等等。</p>
<h4 id="提问个人看法">提问个人看法</h4>
<p>可以做一些关于应聘者个人的开放性提问，例如：</p>
<ul>
<li>你在过去工作中遇到的最困难事情是什么，你的解决方案如何？</li>
<li>你在工作之余，有没有学习或研究什么内容？</li>
<li>你认为自己过去工作的亮点是什么？</li>
<li>你希望的职业发展路线是什么？</li>
<li>你的个人爱好是什么？</li>
<li>……</li>
</ul>
<p>让应聘者分享个人工作经历，从而判断应聘者是否能够融入工作团队。</p>
<h2 id="面试误区">面试误区</h2>
<h3 id="十全十美">十全十美</h3>
<p>“总想找个更好的”，这种心理预期会抬高眼光，使自己更难招到合适的人。</p>
<p>对于经验不足的面试者，组织面试时，建议设定预期面试次数，例如计划招2个人，那么就安排面试20个人。在这20个人中，前30%左右（6人）不会真正录用，只是用来判断应聘者的平均水平，同时调整自己的心理预期。从第7个人开始，将其与前6人进行比较，只要比前6人强，就将其列入考虑名单，以免最终一个人都招不到。</p>
<p>另外如果实在感觉应聘者能力一般，但又急着招人干活，那么可以适当降低薪酬待遇，先把这段时间的工作挺过去再说，等以后再招更合适的。</p>
<h3 id="压力面试">压力面试</h3>
<p>招聘选择员工的时候，员工也在选择公司。特别是IT这种消耗脑力的创造性劳动，更需要相对轻松的气氛来发挥能力，因此面试时，包括未来共同工作时，应当以互相尊重的态度进行沟通交流。</p>
<p>因此，除非你的客户都是非常刁钻无理的人，而且未来录用之后要让他去对付这样的人，或者你只是在刷招聘的KPI，根本不想招到人，否则没有必要给应聘者做压力面试，更没必要摆出一种高高在上的态度。</p>
<h3 id="光让马儿跑不让马儿吃草">光让马儿跑，不让马儿吃草</h3>
<p>要想使员工正常工作，工资水平至少要和该城市的行业平均水平持平。如果想让员工积极工作，则要给员工开出高于前一家公司的工资水平，否则即便该员工有责任感，他也可能像职场老油条一样，出工不出力。</p>
<p>如果无法给出更高水平的工资，但是又想招聘该员工，你还可以结合员工离职原因，和员工简单探讨一下新的工作能否给他带来其他好处，例如通勤时间大幅缩短、有各种补贴、周末不用工作、工作气氛轻松、不需要经常出差，等等。对员工来说，如果新工作既没能涨工资，又没能解决他旧工作的痛点，你就不要指望他过来上班了。</p>
<h2 id="面试之后">面试之后</h2>
<p>与笔试相同，应聘者通过面试后，也应当尽快通知应聘者进行后续工作，例如下一轮面试，或者办理入职，否则应聘者就跑了。</p>
<h2 id="本系列文章">本系列文章</h2>
<ul>
<li><a
href="/2020/08/16/resume-filtering/">作为招聘者，筛选简历的关注点</a></li>
<li><a
href="/2020/08/20/resume-improvement/">来自招聘者的建议——如何优化简历</a></li>
<li><a href="/2020/08/29/bad-resume/">迷惑简历大赏</a></li>
<li><a href="/2021/02/12/hiring-test-paper/">笔试的设计</a></li>
<li><strong>面试的安排</strong></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>招聘</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（七）：房贷贷多少合适</title>
    <url>/2021/07/12/buy-house-7/</url>
    <content><![CDATA[<p>询问买房贷款问题，年纪稍大的人会建议多贷款，“跑赢通胀”，现在还是这样吗？</p>
<span id="more"></span>
<h1 id="跑赢通胀的背景">“跑赢通胀”的背景</h1>
<p>在过去那个年代：</p>
<ol type="1">
<li>经济形势整体乐观，经济增长带动民众生活水平提高</li>
<li>靠自己的工资，二三十年能比较容易还清贷款</li>
<li>工作前景向好，收入水平逐步提高</li>
</ol>
<p>而现在呢</p>
<ol type="1">
<li>经济形势下行，加上疫情影响，形势不再像以前乐观</li>
<li>靠“六个钱包”凑齐首付都困难</li>
<li>工作996、007，收入却不见涨，而且还有随时被裁员的风险</li>
</ol>
<p>在这个背景下，你觉得现在的重点还是跑赢通胀吗？</p>
<h1 id="所以这个时候要想什么">所以这个时候要想什么</h1>
<h2 id="不要强行上车">不要强行上车</h2>
<p>如果你家“六个钱包”真的连凑齐首付都困难，那么不要买房。</p>
<p>一旦强行上车，这意味着你的家庭已经没有任何保险，而且你们全家必须至少维持现有收入水平不下降，甚至要继续上升，才能还得起后面的本金和利息。很明显，经济高速增长的时代已经结束，所以不要拿不确定的未来去赌。</p>
<h2 id="尽量降低杠杆">尽量降低杠杆</h2>
<p>尽量减少贷款的量。可以从两方面入手，一方面是提高首付比例，另一方面是降低预算。</p>
<p>提高首付比例，也就是在家庭承受范围之内，尽可能多用现金，少贷款。而且目前利率也比较高，少贷款就能有效减少月供压力以及贷款总利息的支出。经济上行的时候，利息可以被增长的工资给稀释掉，但现在情况正好反过来，收入不仅有可能下降，而且会被利息给稀释掉，给自己带来更大压力。</p>
<p>降低预算，也是降低杠杆的有效方法。假如你家里现在能掏出300万，并且你家庭年收入50万，那么你就不要加压买600万的房子，而是把预算控制在400万以内，或者进一步压低预算，只买300万甚至200万的房子。如果没有符合条件的新房，就考虑二手的老房子，或者继续租房。因为你的杠杆率不高，只要家里省吃俭用，两三年之内还能攒到一些钱，这样即便未来收入下降，甚至失业，你也不会有太大负担。</p>
<p>在贷款方式上，可以考虑选择等额本金，而非等额本息。虽然前期还款压力会大一些，但是总利息相对较低，而且一旦家庭财务状况缓解，你就可以提前还贷，甚至直接还清，进一步减少利息支出。</p>
<h2 id="考虑断供风险">考虑断供风险</h2>
<p>即使经过计算，你发现你的压力还能接受，你也不要把家中存款全部花光。你需要尽量攒钱，保证一旦出现状况（失业、生病、发生事故等），你们家庭的存款还可以维持一两年时间。失业之后，既不会因为没钱而被迫断供，又能维持基本生活，这样在找新工作的时候就不会有那么大的压力了。</p>
<h2 id="及时止损">及时止损</h2>
<p>如果你家庭在三四线城市甚至更低线城市有多余房产，可以考虑及时抛售掉，增加家中的现金数量。</p>
<p>由于未来人口会向大城市和省会城市集中，所以其他城市的房产总体上是要贬值的。像鹤岗这样的地方，如果不是网红帮忙，甚至连接盘侠都找不到，所以不要再考虑能多挣多少钱，而是考虑能少亏多少钱，及时抛售。亏得比别人少，从相对意义上讲，就是比别人挣得多了。</p>
<h1 id="结论">结论</h1>
<p>量力而行，而且要给未来留出足够的保险空间。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><strong>房贷贷多少合适</strong></li>
<li><a href="/2021/08/15/buy-house-8/">要不要买车位</a></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
        <tag>房贷</tag>
      </tags>
  </entry>
  <entry>
    <title>买房避坑指南（八）：要不要买车位</title>
    <url>/2021/08/15/buy-house-8/</url>
    <content><![CDATA[<p>买个房子都很费劲了，要不要继续出血，花几十万买那个只有2.5x5m=12.5m²的小方格？</p>
<span id="more"></span>
<h1 id="要不要买">要不要买？</h1>
<h2 id="什么情况下不要买车位">什么情况下不要买车位</h2>
<h3 id="不需要车位">不需要车位</h3>
<p>很明显，如果你永远都没有买车的计划，你当然不会考虑车位的问题。</p>
<p>另外可以考虑小区和周围环境，如果小区车位配比高于1:1.2，或者小区位于城区而非郊区，周围交通便利，生活配套丰富，那么说明车位的需求不会那么大，就可以考虑不买车位（长租别人车位），甚至不买车。</p>
<h3 id="投资">投资</h3>
<p>那有些人会问，可不可以买个车位放在那里，然后当个房东去倒卖或挣租金呢？</p>
<p>因为车位只能租给小区内的业主，那么就会存在两种情况：</p>
<ul>
<li>如果车位配比高，那么对于业主来说不愁找不到车位，这样的话，车位租金就很难很高。</li>
<li>如果车位配比低，那么随着业主入住率增高，车位的需求也会增加，看起来可能会有机会提高租金。</li>
</ul>
<p>但是你还要考虑实际情况，例如：</p>
<ul>
<li>前期入住率不高的时候，车位可能也是不愁租不到的，所以前期车位租金也抬不上去；</li>
<li>随着时间推移，开发商也会因为车位卖不动，将剩余车位大幅降价促销，会使得新车位比你的旧车位便宜；</li>
<li>如果小区租户较多，特别是合租的租户较多，那么车位需求与入住率就不会成正比；</li>
<li>如果城市有限购，再等一段时间，有些投资客开始抛售房产，到时候房子附带的车位也就跟着以跳楼价抛售了。</li>
</ul>
<p>所以，如果你在一开始就以投资目的买车位，那么你会发现你的前期成本比较高，转手倒卖时卖不上价，而出租时租金又不一定能够回本，更别说赚钱了。</p>
<h2 id="什么情况下不要急着买车位">什么情况下不要急着买车位</h2>
<p>如果小区是刚需房，车位比低于1:1，或者小区位于郊区，周围交通不便，那么你迟早要买辆车，买车位也是早晚的事儿。</p>
<p>不过你还是可以稍微晚一点再买车位，“早买早享受，晚买享折扣”，先租其他业主的车位。如果地方偏僻，交警都懒得贴罚单，你甚至还可以把车停到外面。这样可以等到两种结果：</p>
<ul>
<li>按照法律规定，车位是不允许“只售不租”的。如果有业主牵头维权，而且维权成功，就可以等到一些租赁车位。</li>
<li>因为车位只能卖给小区业主，坚持两三年之后，开发商的车位实在卖不出去，只能降价促销。</li>
</ul>
<p>如果你认为买车位的时机已经合适，但是暂时还没车，而且已经有买车的计划，也可以考虑当一段时间房东，把它暂时租出去。</p>
<h2 id="什么情况下要尽快买车位了">什么情况下要尽快买车位了</h2>
<h3 id="新能源车">新能源车</h3>
<p>很明显，如果你的车是新能源车，那么你就不得不尽快买个车位，除非你能找到其他地方充电。</p>
<h3 id="不太好租了">不太好租了</h3>
<p>新小区，前期入住率不高，车位的需求自然就不高。但是随着入住率提高，车位需求就会自然提高。所以你还是需要经常留意车位出租的情况。</p>
<p>当你发现地下车位快要停满，车位不好租的时候，这时候就该考虑买车位，不过这都是交房几年之后的事情了。</p>
<h3 id="交警开始频繁贴罚单">交警开始频繁贴罚单</h3>
<p>如果小区位于郊区，一开始可能没人会去贴罚单，就算报警，交警也懒得过来贴。但是随着城市发展，有些近郊逐渐变成市区，交警就可能会来贴条了。贴的次数多了，车位的需求就会突然增加，然后你也需要结合地下车库现状考虑是否入手车位了。</p>
<p>需要留意的是，有些地方贴罚单的不一定是交警，而是城管。如果城管贴的罚单跟交管12123系统没有连接，大可不必管他。</p>
<h1 id="要买买哪个车位">要买，买哪个车位？</h1>
<h2 id="买人防车位还是产权车位">买人防车位，还是产权车位？</h2>
<p>车位按产权可以分为两种，一种是产权车位，产权归业主，能办理房产证；另一种是人防车位，产权归国家，业主只有使用权，不能办房产证。</p>
<p>有人会说，人防车位有个“战时征用”的问题，所以不适合买。这种说法是不合适的，因为一旦真的“战时征用”，你要考虑的就不是车停在哪个地方的问题，而是如何逃难的问题了（而且汽车也会因为加不到油、充不了电而变为废铁）。也就是说，人防车位其实也是可以放心买的。</p>
<p>产权车位价格通常比人防车位贵不少，而且产权车位除了车位价格，还有公共维修基金和契税两笔费用。所以纯自住，而且图省钱的话可以考虑人防车位。</p>
<p>但是，由于人防车位产权不清，手续也需要靠租赁的形式来办理，未来转手时可能会遇到麻烦。如果将来有计划卖房子，还是应该去买产权清楚的产权车位。</p>
<p>另一方面，有些小区的人防车位不允许装充电桩，如果你计划或已经购买了新能源车，务必问清楚充电桩的安装问题。</p>
<h2 id="如果还能选车位选哪个位置">如果还能选车位，选哪个位置？</h2>
<p>选车位时，当然是选离家近的车位。在此大原则之下，还有一些细节，可以让你未来使用车位时更舒服：</p>
<h3 id="优选独立车位">优选独立车位</h3>
<figure>
<img src="/img/2021-08-15-buy-house-8/1.png" alt="独立车位" />
<figcaption aria-hidden="true">独立车位</figcaption>
</figure>
<figure>
<img src="/img/2021-08-15-buy-house-8/5.png" alt="独立车位" />
<figcaption aria-hidden="true">独立车位</figcaption>
</figure>
<p>独立车位是最好的位置了，爱怎么停就怎么停，不跟任何业主冲突。</p>
<p>但是，如果车位两侧挨着墙或柱子，则需要问清楚车位宽度、车位边缘与墙的距离，如果离得太近，上下车会很困难。</p>
<h3 id="优选车头靠柱车位">优选车头靠柱车位</h3>
<figure>
<img src="/img/2021-08-15-buy-house-8/2.png" alt="车头靠柱" />
<figcaption aria-hidden="true">车头靠柱</figcaption>
</figure>
<p>车头靠柱也是个好位置，柱子作为天然的屏障，无需担心其他业主挤你。车辆入库之后，你也可以放心地开关车门，不存在剐蹭的问题。</p>
<h3 id="次选靠边车位">次选靠边车位</h3>
<figure>
<img src="/img/2021-08-15-buy-house-8/3.png" alt="三车车位" />
<figcaption aria-hidden="true">三车车位</figcaption>
</figure>
<p>如果没有靠柱车位，那么也应该选择一个靠边的车位，给自己留出上下车的空间。</p>
<h3 id="避免中间车位">避免中间车位</h3>
<figure>
<img src="/img/2021-08-15-buy-house-8/3.png" alt="三车车位" />
<figcaption aria-hidden="true">三车车位</figcaption>
</figure>
<p>中间车位就有“左右夹击”的问题。如果左侧车停得太靠右，右侧车停得太靠左，你自己还是个大SUV，那么你别想上下车了。</p>
<h3 id="避免墙角车位">避免墙角车位</h3>
<p>如果车位离墙角太近，那么就非常考验车技，例如需要借助其他车位才能倒车入库，或者出库时需要比其他车位更加小心，等等。</p>
<h3 id="避免柱子靠车门车位">避免柱子靠车门车位</h3>
<figure>
<img src="/img/2021-08-15-buy-house-8/4.png" alt="车门靠柱" />
<figcaption aria-hidden="true">车门靠柱</figcaption>
</figure>
<p>如果车位旁边有柱子，但没有紧靠车头，那么选择时要加小心，尽量避免左侧有柱子的车位，不然的话有可能是个紧靠车门的柱子，使得上下车困难。</p>
<h2 id="选位置的坑">选位置的坑</h2>
<h3 id="斜坡车位">斜坡车位</h3>
<p>如果车位价格比较便宜，特别是比旁边车位便宜，你需要留意车位是否带斜坡。</p>
<p>虽然斜坡停车并不会比普通车位恶心多少，但是如果你的车技不好，或者是在毫不知情的情况下买到斜坡车位，这就非常恶心了。如果你还是个经常忘拉手刹的新手，那你的预算就需要多出一笔修车费用。</p>
<h3
id="不是图上离家近就是真的离家近">不是图上离家近，就是真的离家近</h3>
<p>在交房之前买车位，你需要仔细观察小区车位分布图，注意单元门是否直通车位。有的时候，车位看起来挨着住宅，但是可能实际上在楼后面，或者有墙体、栅栏阻隔，需要绕个圈才能过去，所以要把从单元门到车位的动线问清楚。</p>
<p>交房之后再买车位就不存在这个问题，因为你可以实地考察了。</p>
<h3
id="离车库出入口拐弯处单元门太近">离车库出入口、拐弯处、单元门太近</h3>
<p>选车位时，需要注意车位在车库的整体布局。如果车位离车库出入口、拐弯处、单元门太近，发生剐蹭的概率就会比其他位置高，而且你自己车出库时，也需要比其他位置更加小心，否则也是容易剐蹭。</p>
<p>如果挨单元门太近，车位还有可能被其他低素质业主占用。</p>
<h1 id="本系列目录">本系列目录</h1>
<ul>
<li><a href="/2020/11/22/buy-house-0/">总述</a></li>
<li><a href="/2020/11/29/buy-house-1/">购房资格</a></li>
<li><a href="/2020/12/05/buy-house-2/">地产项目情况</a></li>
<li><a href="/2020/12/12/buy-house-3/">项目周围环境</a></li>
<li><a href="/2020/12/19/buy-house-4/">售楼处里的套路</a></li>
<li><a href="/2020/12/26/buy-house-5">关于合同</a></li>
<li><a href="/2020/12/28/buy-house-6/">不要买公寓！</a></li>
<li><a href="/2021/07/12/buy-house-7/">房贷贷多少合适</a></li>
<li><strong>要不要买车位</strong></li>
</ul>
]]></content>
      <categories>
        <category>楼市</category>
      </categories>
      <tags>
        <tag>买房</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情囤货指南</title>
    <url>/2021/06/16/supplies/</url>
    <content><![CDATA[<p>近些月来，虽然国内的武汉肺炎疫情得到了基本控制，但是这种控制是通过强硬封城实现的。在封城期间，正常的生活会被打断，而且封城时间不可预测，恢复时间也无法确定，因此平时在家就需要适当做一些准备，以免遇到困难。</p>
<span id="more"></span>
<h2 id="物资准备">物资准备</h2>
<h3 id="食品">食品</h3>
<p>食品是最关键的事情。一旦封城，家中没有食品，你基本上会饿肚子，严重的话甚至可能会饿死，而且对于外面执行封城的人来说，你死了，只是少了个病原体而已，对他们只有好处，没有坏处，所以根本不会去关心你的死活。</p>
<p>尽管如此，大量囤积食品也是不科学的，因为食品会过期变质。所以要考虑合理配置食品，既能保证封城时不会缺少食物，又不会造成浪费。</p>
<p>家中准备食品时，可以进行“三级储备”，具体为以下三种：</p>
<ul>
<li>层级一：保质期短的食物，例如各种蔬菜。因为这类食物保质期不长，所以不要大量购买，只保持一个星期左右的量即可。</li>
<li>层级二：保质期稍长的食物，例如肉类、鸡蛋，以及土豆、白菜等蔬菜，可保持两星期至一个月的量。</li>
<li>层级三：保质期很长的食物，例如方便面、罐头、压缩饼干、脱水蔬菜、自热食品，以及大米、白面等。这些食物也要至少保持半个月到一个月左右的量。</li>
</ul>
<p>至于饮用水，因为自来水烧开以后也是能喝的，所以能烧水的水壶当然是必需品。但如果自来水水质不好，应当适当准备瓶装水、桶装水。</p>
<p>做三级储备还要注意三点：</p>
<ol type="1">
<li>要注意各种食品的保质期和储存方法，不要没开始吃，就给放坏了。</li>
<li>要进行动态更新，也就是平时要主动吃掉一些放得比较长、保质期剩余时间不多的食品，然后再补充新的食品。</li>
<li>要增加食品的多样性，例如方便面、罐头和自热食品准备不同的种类、口味。一旦真的封城了，连续吃几天方便面，会让你再也不想碰方便面。</li>
</ol>
<h3 id="药品">药品</h3>
<p>家中应该预备一个应急药箱，其中包含感冒药、退烧药、拉肚子药、创可贴、红药水（或酒精）等药品，以及体温计等工具。</p>
<p>如果没有退烧药，应该趁疫情管控比较松的时候，想办法去弄一些，以免因为得了普通感冒而被拉去隔离。</p>
<p>如果有需要定期服用的药品，则要设法提前准备一个月的量，动态更新，以免封城时候买不到药。</p>
<p>不要指望封城开始之后能买到药或打到120。西安封城的教训告诉我们，真正封城的时候，医院领导更在乎的是自己的乌纱帽，所以即使你马上要死了，医院也会因为你没做核酸检测而拒绝救命。</p>
<h3 id="生活必需品">生活必需品</h3>
<p>除了食品药品，生活必需品也应该有备用的份儿。建议每一种用品都多买一套，例如厕所的香皂、肥皂、洗发水、卫生纸，厨房的盐、酱油、醋、洗洁精等，女性的卫生巾，还有通用的塑料袋，等等。</p>
<h2 id="注意事项">注意事项</h2>
<h3 id="关于保供">关于“保供”</h3>
<p>有些地方在封城时，会提供一些“保供通道”，说封城期间可以去这些商家购买生活物品。但是，一旦真正封城，我们不能指望真的从这些渠道买到东西，必须平时就做好准备。</p>
<p>正常的状态下，多数人不需要集中地采购物资，需要时可以随时去楼下小卖店，可以随时叫外卖，可以随时网购等快递配送，不会产生集中的购物需求，但是一旦封城，这些分散的渠道都会被关闭，而且不少人要囤积物资，所以那几家保供单位会在极短时间内涌入来自整个城市的巨量需求，结果你会发现所有有用的物资都会被抢光，连下单的机会都没有，更别说及时配送了。</p>
<p>基于同样的原因，封城期间，外卖、快递和各种配送也会被迫中断，因此不能指望外卖和网购来维持生活。</p>
<h3 id="邻里互助">邻里互助</h3>
<p>平时要留意所在的社区是否有物业群、业主群，如果有，要及时加入组织。封城之后，有些人可能会愿意交换多余物资，或者在业主群利用自己的渠道来售卖物资。尽管价格可能会贵些，总比没有强。</p>
<h3 id="小道消息">小道消息</h3>
<p>封城之前，业主群或各种地方会出现小道消息，甚至出现抢购潮，遇到这种情况要抓紧进行准备。</p>
<p>注意官方“辟谣”的内容。实践证明，被官方认证的“谣言”经常是领先的预言，因此既不要轻信官方消息，也不要无视“谣言”和小道消息。</p>
<h3 id="个人技能">个人技能</h3>
<p>很明显，如果你到现在还不会做饭，应该尽快学会如何做饭。</p>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>疫情</tag>
        <tag>应急储备</tag>
      </tags>
  </entry>
  <entry>
    <title>用Docker快速为办公室搭建VPN</title>
    <url>/2021/09/10/remote-vpn/</url>
    <content><![CDATA[<p>由于武汉肺炎疫情原因，随时可能会封城，导致无法前往办公室办公。如果公司没有提供VPN，为了在居家办公时能有一个连接办公室资源的方法，可以考虑自己搭一个简易的VPN。</p>
<span id="more"></span>
<h1 id="搭建vpn">搭建VPN</h1>
<h2 id="服务器准备">服务器准备</h2>
<p>准备一个服务器，能够访问公司办公室各资源，而且能连接互联网。配置好之后，安装Docker，并开放服务器443端口。</p>
<h2 id="安装容器和vpn配置">安装容器和VPN配置</h2>
<p>前往<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dwcHVya2luZy9vY3NlcnYtZG9ja2Vy">https://github.com/wppurking/ocserv-docker<i class="fa fa-external-link-alt"></i></span>，将内容全部下载。也可以直接输入命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/wppurking/ocserv-docker.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入<code>ocserv-docker/ocserv</code>目录，清空<code>ocpasswd</code>文件内容，删除默认账号。</p>
<p>再修改<code>ocserv.conf</code>，在结尾增加：</p>
<pre class="line-numbers language-none"><code class="language-none">route &#x3D; 192.168.0.0&#x2F;255.255.255.0

custom-header &#x3D; &quot;X-CSTP-Client-Bypass-Protocol: true&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>route后面的IP需要根据实际情况配置。例如公司内网采用192.168网段，那么就是<code>192.168.0.0/255.255.255.0</code>。如果不确定，也可以不增加route这行配置，这样连上VPN后所有流量都会通过VPN访问。</p>
<h2 id="启动vpn">启动VPN</h2>
<p>下载完成后，进入该目录并启动容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ocserv-docker
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--restart</span> unless-stopped <span class="token parameter variable">--name</span> ocserv-docker <span class="token parameter variable">-v</span> ~/ocserv-docker/ocserv:/etc/ocserv <span class="token parameter variable">-p</span> <span class="token number">443</span>:443/tcp wppurking/ocserv

<span class="token comment"># 查看日志，检查是否正常运行</span>
<span class="token function">docker</span> logs ocserv-docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="分配账号密码">分配账号密码</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> ocserv-docker ocpasswd 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入两遍密码，修改立即生效，无需重启VPN服务器。</p>
<h1 id="公网映射">公网映射</h1>
<p>VPN搭好之后，需要将该VPN服务器的443端口映射到公网上面。如果公司有公网IP，而且能够进行配置，可找相应部门把端口配置好。如果没有相应资源，可参考<a
href="/2018/07/14/tunnel/">内网穿透教程</a>进行配置。</p>
<h1 id="vpn客户端">VPN客户端</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2lzY28uY29tL2MvZW4vdXMvc3VwcG9ydC9zZWN1cml0eS9hbnljb25uZWN0LXNlY3VyZS1tb2JpbGl0eS1jbGllbnQtdjQteC9tb2RlbC5odG1sI350YWItZG93bmxvYWRz">下载Cisco
AnyConnect客户端<i class="fa fa-external-link-alt"></i></span>，下载完成后进行安装。</p>
<p>第一次启动时，需要进入设置页面，将“Block connections to untrusted
servers”前面的勾取消。</p>
<p>输入VPN公网映射之后的地址和端口，点击Connect即可连接。启动后会出现安全提示，点击“Connect
Anyway”连接，然后输入账号密码即可连接VPN。</p>
<h1 id="扩展思考能不能用来翻墙">扩展思考：能不能用来翻墙？</h1>
<p>当然可以，在国外服务器上用相同方式部署一套VPN软件即可，但是由于Cisco
AnyConnect的流量特征太明显，所以建议用其他更可靠的方式翻墙。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>远程办公</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7安全等保整改记录</title>
    <url>/2021/10/24/centos-security/</url>
    <content><![CDATA[<p>为满足等保测评要求，对CentOS
7服务器进行了统一整改，整改命令记录如下。</p>
<span id="more"></span>
<h1 id="升级ssh">升级SSH</h1>
<p>网上教程太多了，此处不再提供。</p>
<p>如果从7.x旧版升级到8.x或9.x，需要注意几个问题：</p>
<ol type="1">
<li>禁用SELinux：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setenforce <span class="token number">0</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/=enforcing/=disabled/'</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2" type="1">
<li>删除旧的key：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-f</span> /etc/ssh/ssh*key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3" type="1">
<li>允许root登录：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"PermitRootLogin yes"</span> <span class="token operator">>></span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="升级curl需要网络">升级curl（需要网络）</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> http://www.city-fan.org/ftp/contrib/yum-repo/city-fan.org-release-3-4.rhel7.noarch.rpm
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/enabled=0/enabled=1/g'</span> /etc/yum.repos.d/city-fan.org.repo
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/gpgcheck=1/gpgcheck=0/g'</span> /etc/yum.repos.d/city-fan.org.repo
yum update <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="系统配置">系统配置</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># shell不记录历史命令</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/HISTSIZE=1000/HISTSIZE=0/g'</span> /etc/profile

<span class="token comment"># shell自动超时</span>
<span class="token builtin class-name">echo</span> <span class="token string">'export TMOUT=600'</span> <span class="token operator">>></span> /etc/profile

<span class="token comment"># 密码复杂度规则、账号锁定规则</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/authtok_type=/authtok_type= minlen=12 lcredit=-1 ucredit=-1 dcr+++edit=-1 ocredit=-1 enforce_for_root/'</span> /etc/pam.d/system-auth
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/99999/120/g'</span> /etc/login.defs
<span class="token builtin class-name">echo</span> <span class="token string">'auth required pam_tally.so onerr=fail no_magic_root'</span> <span class="token operator">>></span> /etc/pam.d/system-auth
<span class="token builtin class-name">echo</span> <span class="token string">'account required pam_tally.so deny=5 unlock_time=300 root_unlock_time=300 no_magic_root even_deny_root_account per_user reset'</span> <span class="token operator">>></span> /etc/pam.d/system-auth

<span class="token comment"># SSH加密算法</span>
<span class="token builtin class-name">echo</span> <span class="token string">'KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521'</span> <span class="token operator">>></span> /etc/ssh/sshd_config
systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>CentOS</tag>
        <tag>等保</tag>
      </tags>
  </entry>
  <entry>
    <title>小心你的数据库查询窗口，以免误操作</title>
    <url>/2021/12/16/db-console/</url>
    <content><![CDATA[<p>如果你的数据库查询窗口的第一行是<code>DROP DATABASE</code>，你又不小心点击了执行按钮……</p>
<p>有些数据库软件能够智能地执行光标所在行的指令，但有些数据库软件没那么智能，或者需要配置才能变聪明，一不小心，就会把窗口里面的所有SQL都执行一遍，所以使用数据库软件时要注意防范误操作。</p>
<span id="more"></span>
<h1 id="先检查再操作">先检查再操作</h1>
<ul>
<li>执行UPDATE和DELETE之前，检查是否写了WHERE条件，并用同样条件执行一遍SELECT查询，检查条件是否正确。</li>
<li>执行选择或光标处SQL语句时，检查SQL语句是否选择完整。</li>
</ul>
<h1 id="及时清理破坏性sql">及时清理破坏性SQL</h1>
<p>在操作数据库时，如果需要执行有副作用的指令，例如DROP、DELETE、INSERT、UPDATE、TRUNCATE等，记得在执行完成后及时清理掉这些语句。可以用以下方式操作：</p>
<ul>
<li>每执行完一个SQL，就立刻把它删掉。</li>
<li>为了方便查找或记录，不希望把SQL删掉，可以在执行完SQL之后立刻把它注释掉。</li>
<li>在SQL窗口第一行放一个会报错的SQL，如果不小心点了执行，可以让数据库客户端在第一行就停下来。需要注意，有些数据库客户端在失败后会继续执行后面的指令，所以还要慎重。</li>
</ul>
<h1 id="连接生产系统不要图方便">连接生产系统，不要图方便</h1>
<p>生产系统权限意味着巨大的责任，而连接生产系统的方式越容易，犯错误的几率就越大，所以不要为了图方便把自己置于危险境地。可以用以下方法来防范：</p>
<ul>
<li>不要在同一个系统、同一个数据库软件中同时连接开发系统和生产系统，避免弄错环境。</li>
<li>连接生产系统之前总是手工输入账号密码，不要自动连接，使自己清晰地意识到自己在连接生产系统，同时防止无关人员盗用。</li>
<li>批量执行语句，或导入SQL文件时，先检查SQL内容，确认是否有破坏性指令（例如有些软件生成的导入SQL会先删表），确认无误后再执行。</li>
<li>把在生产系统执行的每条SQL都做好记录，包括执行时间、执行人、操作目的，以备事后追溯。</li>
<li>及时清理生产系统的数据库操作界面里的SQL。</li>
<li>操作完成后及时关闭数据库软件。</li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确使用信用卡</title>
    <url>/2022/02/22/credit-card/</url>
    <content><![CDATA[<p>学会正确使用信用卡，让自己不会成为“卡奴”。</p>
<span id="more"></span>
<h1
id="如果你不知道信用卡能做什么事情那么不要办信用卡">如果你不知道信用卡能做什么事情，那么不要办信用卡</h1>
<p>信用卡能做什么事情呢？</p>
<p><strong>如果你不清楚这个问题，那么说明你完全不需要信用卡。</strong>这种情况下，即使银行会给你各种好处，你也不应该去办理任何信用卡，而且应该抓紧去银行把已经办过的信用卡全部注销。</p>
<p>如果你还是想了解信用卡的作用，这里可以简单解释一下：</p>
<ul>
<li>在国内，有支付宝和微信支付就足够了，缺钱的话，你还可以用花呗和借呗，所以你不需要信用卡。</li>
<li>在国外，以及需要支付的国外网站，你需要指定标志（例如Visa、Mastercard）的信用卡，所以你不需要纯银联的信用卡。</li>
</ul>
<h1
id="如果你要办信用卡那么要熟悉信用卡的一些概念">如果你要办信用卡，那么要熟悉信用卡的一些概念</h1>
<p>很多人都有储蓄卡，规范说法叫做借记卡。储蓄卡的用法很简单，需要存钱时可以直接往里面存钱，需要消费或取钱时可以往外取钱，而且只要卡片和密码不丢，钱就不会丢，也不会产生额外费用。</p>
<p>但信用卡不同于借记卡，信用卡有一系列麻烦的概念。如果你不清楚这些词语的含义，不能正确使用卡片，轻者增加花销，重者影响征信。</p>
<p><strong>如果你看到下面这些词语之后感到一头雾水，说明你不应该办理信用卡：</strong></p>
<ul>
<li>额度：额度指信用卡最多能花多少钱。额度是银行的钱，不是你的钱，所以额度高只是表示你能多借点钱，该还的钱还是要还的。假如你的额度是10000元，查询到当前额度是3000元，说明你现在欠银行7000元。</li>
<li>年费：<strong>持有信用卡，每年会产生一笔持有的费用，所以办卡时务必和银行确认年费金额</strong>。虽然有些卡片是免年费的，或者带条件免年费，例如消费满多少之后免年费，但你也不要直接拿剪刀把卡片“咔嚓”掉，而是及时去银行注销不再使用的卡片，彻底消除隐患。</li>
<li>账单日和还款日：
<ul>
<li>账单日：到账单日时，银行会把上一个月的消费记录固定下来，形成账单，并且告诉你欠了多少钱。这个时候你还有大约半个月的准备时间，银行不会计算利息，只要在到达还款日之前还款即可。</li>
<li>还款日：账单日过了大约半个月时间以后，会到达还款日，这是你还钱的最后期限。<strong>如果你过了还款日还没还钱，那么会影响征信，而且银行会开始收利息。</strong></li>
<li>每张卡的账单日和还款日都不一样，具体日期需要和银行确认。另外建议开启自动还款功能，以免因为不小心忘记还款而影响征信。</li>
</ul></li>
<li>最低还款：在账单日之后，除了全额还款，你也可以只还一部分。例如账单金额是欠1000元，最低还款额是100元，你只要还款超过100元，就不会影响征信。但是需要注意，<strong>最低还款只是不影响征信，剩下的钱还是要还的，而且过了还款日之后，银行也会开始计算利息</strong>。</li>
<li>CVV（安全码）：指卡片背后的数字。信用卡和储蓄卡不一样，只要知道正面的卡号与日期，以及背面的安全码，无需密码也可以消费。因此<strong>不要随意让别人看到你的信用卡卡面</strong>。</li>
<li>人民币账单和美元账单：如果是外币卡，会产生两种账单，人民币账单和美元账单要分别用两种货币还款。如果你不介意汇率问题，而且觉得购汇还款麻烦，可以开通美元账单用人民币记账，这样的话，到账单日的时候，直接用人民币就能把两种欠款还清。</li>
<li>银联、Visa、Mastercard等：卡面上的标志决定了它能在哪里使用。例如带Visa或Mastercard标志的，可以在国外很多国家使用，但是只有银联一种标志的，基本上只能在国内使用了。</li>
</ul>
<h1 id="无论什么情况都要量力而行">无论什么情况，都要量力而行</h1>
<p>信用卡的本质是向银行借钱，是你的债务之一。既然是欠别人的钱，那么你迟早要还钱，因此，你手头应该准备比账单支出还要多的存款，不然的话，你拿什么去还呢？</p>
<p>如果你没有足够的存款，那么你需要评估自己的收入情况，保证剩余存款加上本月的收入能还得上信用卡和其他债务的支出。</p>
<p>在疫情两年折腾之下，有些单位已经开始不能正常发放工资，因此你要慎重考虑自己的财务情况。如果你背上了房贷车贷，收入开始变得不稳定，又没有足够的存款，那么即使靠信用卡做资金周转，也改变不了它是压垮你的众多石头之一的事实。</p>
<h1 id="有些操作这辈子永远都不要碰">有些操作，这辈子永远都不要碰</h1>
<h2 id="最低还款和分期还款">最低还款和分期还款</h2>
<p>最低还款和分期还款，因为你的欠款没有还清，所以都会计算利息。利息的计算方式比较复杂，而且利息是按照账单金额而非实际欠款计算的，也就是说，你欠了1000，还了900，利息还是用1000来计算的。</p>
<p>那么如何规避这里面的陷阱呢？</p>
<p>很简单，只要你每次都及时还款，而且每次都是全额还款，也永远不做分期还款，你就永远不需要关心这个问题了。</p>
<h2 id="取现">取现</h2>
<p>信用卡可以合法地取现，但是银行会收取手续费，并且利息从取现开始就立即计算，而不是等到还款日才计算。因此除非迫不得已，不要使用信用卡取现。</p>
<h2 id="套现-办pos机">套现 / 办POS机</h2>
<p>很多人申请信用卡其实是为了能周转资金。由于信用卡取现手续费和利息都比较高，而刷POS机属于消费，手续费低，而且还款日之前没有利息，所以你会发现街头到处都有办POS机的小广告。</p>
<p>然而信用卡套现属于犯罪行为，而且刷POS机需要掌握一些“技巧”，否则容易触发银行风控，导致锁卡。一旦出现问题，你无法用合法途径来维护自己的权益，因为这样做等于投案自首。</p>
<p>如果你现在经济状况还能说得过去，在大额消费（例如贷款）之前，你就应该思考一下，是不是本可以降低杠杆率（少贷款），或者暂缓消费计划，减少不必要的支出，从而避免把自己逼到需要靠信用卡套现周转的绝境呢？</p>
<p>如果已经山穷水尽，沦落到不得不靠信用卡套现的程度，你需要思考，能不能选择割肉，先变卖手中的一些资产，哪怕亏本卖掉，先把总负债降下去再说？</p>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>信用卡</tag>
      </tags>
  </entry>
  <entry>
    <title>如果你的Web应用出现了莫名其妙的问题，你可以怀疑是否被WAF设备拦截</title>
    <url>/2021/11/19/waf/</url>
    <content><![CDATA[<p>有些时候，你的Web应用明明正常，但是突然有一天，它出现了莫名其妙的问题，无法定位到是哪一行代码错误，而且检查服务器配置也没有问题。这种情况下，可能是WAF安全设备在作怪。</p>
<p>本文用几个案例，讲一讲这种“莫名其妙”问题的现象如何，以及如何定位到WAF。</p>
<span id="more"></span>
<h1 id="问题现象">问题现象</h1>
<ul>
<li>业务操作A从某时起突然开始提示“操作失败”，且更换账号、清理缓存、更换浏览器等方案皆无效，用户反馈显示所有人都无法成功办理业务。</li>
<li>业务操作B从差不多的时间开始出故障，点击按钮没有反应，更换账号或浏览器同样无效。</li>
<li>业务操作C也没有反应，后台抓包显示发生HTTP
418错误，而且有一个错误页面。跟开发人员确认，页面不是他们系统的。</li>
<li>其他业务未反馈异常。</li>
<li>询问实施与运维人员，确认近期没有碰过生产应用、生产数据库或其他相关服务器。</li>
</ul>
<h1 id="系统部署架构">系统部署架构</h1>
<p>业务系统采用了既经典又传统的Web应用部署架构：</p>
<pre class="line-numbers language-none"><code class="language-none">  Internet     |                    机房
               |
用户 ← CDN ← 网关 ← 负载均衡 ← 应用服务器（集群） ← 数据库服务器
               |                     ↑
               |                 Redis服务器
               |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据架构图，询问各环节是否靠谱：</p>
<ul>
<li>用户经常“出故障”，然而本次已确认是系统问题，不是用户环境或操作问题。</li>
<li>CDN由一家比较靠谱的第三方公司提供，出故障机率不大。</li>
<li>负载均衡设备由一家比较靠谱的厂商生产，没有故障记录。</li>
<li>Redis服务器、数据库服务器偶尔出故障，但本次业务问题应该与数据库无关（猜测，需要进一步确认）。</li>
<li>应用服务器集群，每个节点部署的应用完全相同。应用服务器有故障记录，而且有些不靠谱的开发人员会把bug带到生产系统。</li>
</ul>
<h1 id="检查过程">检查过程</h1>
<p>因故障发生前后未对生产系统服务器进行操作，首先排除自己人操作导致故障的可能性。</p>
<p>接下来排除集群节点故障，因为集群各节点应用相同，且只有特定功能失败，其他功能正常，不会是节点卡死导致的。</p>
<p>然后又排除了CDN的原因——通过修改自己电脑的hosts文件绕过了CDN，直接与服务器原始IP连接，问题依旧。</p>
<p>向开发人员确认两业务的代码：操作A是Ajax请求，操作B是普通的form表单提交。</p>
<p>下面分别分析A与B两个业务的情况。</p>
<h2 id="业务a">业务A</h2>
<p>使用浏览器控制台观察请求，发现业务A在Networks页面现象如下：</p>
<figure>
<img src="/img/2021-11-19-waf/a-1.png" alt="a-1" />
<figcaption aria-hidden="true">a-1</figcaption>
</figure>
<p>其他请求正常，说明应用服务器没挂，唯独这个个别业务可能有bug。需要登录服务器检查应用后台日志。</p>
<p>登录到服务器，对每个节点的应用日志进行检查，未发现报错。重复操作几遍之后再检查日志，仍然未发现报错。我们怀疑程序未打错误日志。</p>
<p>然而再仔细观察浏览器抓包的内容：</p>
<figure>
<img src="/img/2021-11-19-waf/a-2.png" alt="a-2" />
<figcaption aria-hidden="true">a-2</figcaption>
</figure>
<p>从图中可以发现，在Header里面未找到“Response
Headers”，没有返回内容，“General”中也没有找到“Status
Code”，说明甚至没有HTTP状态码。看来连接可能是被“掐断”了。</p>
<p>再用curl测试一下。本地调用的话是：</p>
<pre class="line-numbers language-none"><code class="language-none">$ curl -v -X POST -H &quot;Content-Type: application&#x2F;json&quot; -b &quot;JSESSIONID&#x3D;从服务器拷过来的cookie&quot; -d &quot;从浏览器抓到的AJAX提交的内容&quot; http:&#x2F;&#x2F;www.xxx.com&#x2F;business&#x2F;submit
*   Trying xxx.xxx.xxx.xxx...
* TCP_NODELAY set
* Connected to www.xxx.com (xxx.xxx.xxx.xxx) port 80 (#0)
&gt; POST &#x2F;business&#x2F;submit HTTP&#x2F;1.1
&gt; Host: www.xxx.com
&gt; User-Agent: curl&#x2F;7.58.0
&gt; Accept: *&#x2F;*
&gt; Cookie: JSESSIONID&#x3D;xxxxxxx
&gt; Content-Type: application&#x2F;json
&gt; Content-Length: xxx
&gt;
* upload completely sent off: xxx out of xxx bytes
* Empty reply from server
* Connection #0 to host xxx.xxx.xxx.xxx left intact
curl: (52) Empty reply from server
* Closing connection 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>未返回任何数据。</p>
<p>但登录到服务器里面操作就能返回HTTP 200
OK，还能看到JSON串，说明应用能正常响应：</p>
<pre class="line-numbers language-none"><code class="language-none"># curl -v -X POST -H &quot;Content-Type: application&#x2F;json&quot; -b &quot;JSESSIONID&#x3D;从服务器拷过来的cookie&quot; -d &quot;从浏览器抓到的AJAX提交的内容&quot; http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;business&#x2F;submit
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to 127.0.0.1 port 8080 (#0)
&gt; POST &#x2F;business&#x2F;submit HTTP&#x2F;1.1
&gt; Host: 127.0.0.1:8080
&gt; User-Agent: curl&#x2F;7.58.0
&gt; Accept: *&#x2F;*
&gt; Cookie: JSESSIONID&#x3D;xxxxxxx
&gt; Content-Type: application&#x2F;json
&gt; Content-Length: xxx
&gt;
&lt; HTTP&#x2F;1.1 200 OK
&lt; Cache-Control: no-cache
&lt; Connection: keep-alive
&lt; Content-Length: xxx
&lt; Content-Type: application&#x2F;json
&lt; Date: xxx, xx xxx xxxx xx:xx:xx GMT
&lt;
一个乱七八糟的JSON串

* Connection #0 to host 127.0.0.1 left intact
* Closing connection 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将127.0.0.1:1080换成负载均衡地址，重复操作几遍，仍然返回200
OK，说明负载均衡设备应该没有问题。另外对JSON串的内容进行检查，发现提示“办理“成功”或“办理失败！请勿重复办理！”，说明数据库也是正常的，否则不可能校验出“重复办理”。</p>
<h2 id="业务b">业务B</h2>
<p>在进入B业务页面时，浏览器控制台显示oper.js有JavaScript语法错误：</p>
<figure>
<img src="/img/2021-11-19-waf/b.png" alt="oper.js" />
<figcaption aria-hidden="true">oper.js</figcaption>
</figure>
<p>直接用浏览器查看oper.js内容，发现JavaScript脚本并未完整加载。分别在本地和服务器上使用curl命令获取oper.js内容：</p>
<pre class="line-numbers language-none"><code class="language-none">在本地操作：
$ curl http:&#x2F;&#x2F;www.xxx.com&#x2F;static&#x2F;js&#x2F;oper.js
curl: (18) transfer closed with outstanding read data remaining
一堆不完整的js代码

登录到服务器：
# curl http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;static&#x2F;js&#x2F;oper.js
一堆完整的js代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现：在我们电脑上执行curl，脚本还没加载完整，网络连接就被“掐断”了；在服务器上执行curl（域名分别使用127.0.0.1:8080与负载均衡地址），脚本内容能完整加载。</p>
<h2 id="业务c">业务C</h2>
<p>跟开发人员确认，他们的系统不会返回HTTP
418错误，而且错误页面与他们系统设计风格不符。说明错误页面不是该系统产生，而是由其他系统产生，例如CDN，但CDN表示这个错误页面也不是他们产生的。</p>
<h1 id="结论">结论</h1>
<p>根据上面一系列现象判断，我们确认现有系统与设备未发生故障，可能某个环节调整了安全策略，导致正常请求被错误拦截。</p>
<p>和甲方负责人员沟通之后，得知机房近期部署了WAF，但甲方既未通知各相关单位，也未派人观察WAF拦截记录。我们直接和WAF负责人员沟通，维护白名单之后问题解决。</p>
<h1 id="类似事件">类似事件</h1>
<p>到了另一个项目，该项目使用HTTPS网站。证书即将过期时，登录到nginx服务器替换新证书，浏览器验证时却发现证书有效期未更新，仍为原证书的有效期。</p>
<p>仔细检查服务器，发现证书文件已正确替换、nginx配置正确，而且服务器内只有一个nginx实例，并已正确重启。</p>
<p>但是在测试时意外发现，在服务器上使用<code>curl -vIk https://127.0.0.1</code>查看证书有效期已经更新，但是使用<code>curl -vIk https://xxx.xxx.xxx.xxx</code>（外网地址）时证书有效期未更新，说明服务器和外网之间应该有某类设备。</p>
<p>经确认，该项目服务器与外网之间也是有一个WAF，联系相应部门在WAF上配置新证书，证书有效期问题就解决了。</p>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>若依（芋道）框架完善记录</title>
    <url>/2022/04/15/ruoyi-fix/</url>
    <content><![CDATA[<p>版本：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1l1bmFpVg==">芋道源码<i class="fa fa-external-link-alt"></i></span>
2022年4月15日</p>
<p>由于芋道基于若依修改，所以此处改动可能也适用于若依。</p>
<span id="more"></span>
<h1 id="修正系统bug">修正系统bug</h1>
<h2 id="多租户模式无法登录">多租户模式无法登录</h2>
<p>前端<code>login.vue</code>增加<code>tenantId !== null</code>判断：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// debugger</span>
    <span class="token function">getTenantIdByName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> tenantId <span class="token operator">=</span> res<span class="token punctuation">.</span>data
    <span class="token comment">// 修改下面代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tenantId <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tenantId <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 设置租户</span>
        Cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'tenantId'</span><span class="token punctuation">,</span> tenantId<span class="token punctuation">)</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">'租户不存在'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2
id="前端标签页切换后无法保存标签页状态">前端标签页切换后，无法保存标签页状态</h2>
<h3 id="表结构调整">表结构调整</h3>
<p><code>system_menu</code>表增加一个字段：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> map<span class="token punctuation">.</span>system_menu <span class="token keyword">add</span> component_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同时在<code>sql.vm</code>增加相应字段。</p>
<h3 id="后端调整">后端调整</h3>
<p><code>MenuDO.java</code>增加</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 组件名称
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> componentName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>AuthMenuRespVO.java</code>增加</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"组件名称"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> componentName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>MenuBaseVO.java</code>增加</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"组件名称"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"post"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"组件路径不能超过255个字符"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> componentName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="前端调整">前端调整</h3>
<p><code>store/modules/permission.js</code>，修改<code>filterAsyncRouter</code>函数:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">filterAsyncRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  route<span class="token punctuation">.</span>meta <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> route<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    <span class="token literal-property property">icon</span><span class="token operator">:</span> route<span class="token punctuation">.</span>icon<span class="token punctuation">,</span>
    <span class="token comment">// 下方增加新代码</span>
    <span class="token literal-property property">componentName</span><span class="token operator">:</span> route<span class="token punctuation">.</span>componentName  
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>store/modules/tagsView.js</code>增加代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">ADD_CACHED_VIEW</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> view</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>cachedViews<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>componentName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>noCache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    state<span class="token punctuation">.</span>cachedViews<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>componentName<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token function-variable function">DEL_CACHED_VIEW</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> view</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> state<span class="token punctuation">.</span>cachedViews<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>componentName<span class="token punctuation">)</span>
  index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>cachedViews<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>system/menu/index.vue</code>增加两个输入框：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- 权限标识下方增加 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
    <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName<span class="token punctuation">"</span></span>
    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>组件名称<span class="token punctuation">"</span></span>
    <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
  <span class="token punctuation">/></span></span>
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">...
<span class="token comment">&lt;!-- 添加或修改菜单对话框 --></span>
<span class="token comment">&lt;!-- 菜单名称下增加 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>组件名称<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.componentName<span class="token punctuation">"</span></span>
      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入组件名称<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="功能调整">功能调整</h3>
<p>修改完成后，菜单管理的对话框中会多出一个“组件名称”输入框，将其设置为Vue组件的name即可：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'与此处name保持一致'</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="svg-icon图标颜色问题">svg-icon图标颜色问题</h2>
<p>定位到<code>src/assets/icons/svg</code>，通过正则搜索所有svg中的<code>fill=".*?"</code>，删除。</p>
<h2 id="字体尺寸错误问题">字体尺寸错误问题</h2>
<p>定位到<code>src/components/bpmnProcessDesigner/package/theme/process-designer.scss</code>，将其中的</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">"~bpmn-js-token-simulation/assets/css/normalize.css"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除。</p>
<h2 id="标签页关闭左侧不起作用">标签页“关闭左侧”不起作用</h2>
<p>定位到<code>store/modules/tagsView.js</code>，可以发现里面只有<code>delRightTags</code>，缺少<code>delLeftTags</code>，将其补全即可。</p>
<h2 id="生成代码中出现编译错误">生成代码中出现编译错误</h2>
<p>如果有DECIMAL类型字段，会出现编译错误，因为未import
BigDecimal类型，将其补全即可。</p>
<p>修改<code>src/resources/codegen/java/dal/do.vm</code>:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>再修改<code>src/resources/codegen/java/controller/vo</code>中的每个vm：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="代码质量优化">代码质量优化</h1>
<h2 id="gitignore">.gitignore</h2>
<p>使用工具重新生成</p>
<h2 id="前端jsconfig.json">前端jsconfig.json</h2>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>
    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/*"</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>
    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES2021"</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="前端代码格式化">前端代码格式化</h2>
<p>使用eslint和prettier批量格式化，保持代码整洁</p>
<h2 id="清理console.log">清理console.log</h2>
<p>使用查找功能搜索代码中的<code>console.log</code>，将其删除。</p>
<h2 id="request超时">request超时</h2>
<p>找到<code>request.js</code>，增加超时时间的判断：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建axios实例</span>
<span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// axios中请求配置有baseURL选项，表示请求URL公共部分</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_API</span> <span class="token operator">+</span> <span class="token string">'/admin-api/'</span><span class="token punctuation">,</span> <span class="token comment">// 此处的 /admin-api/ 地址，原因是后端的基础路径为 /admin-api/</span>
  <span class="token comment">// 超时</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span> <span class="token operator">?</span> <span class="token number">1000000</span> <span class="token operator">:</span> <span class="token number">10000</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="功能完善">功能完善</h1>
<h2 id="提高系统响应速度">提高系统响应速度</h2>
<p>将动画速度调快，或者直接删除，从而提高感官上的响应速度。</p>
<h3 id="前端index.html">前端index.html</h3>
<p>把转圈动画直接删掉</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader-section section-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader-section section-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load_title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>正在加载系统资源，请耐心等待<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="前端transition.scss">前端transition.scss</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> all .5s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>全部替换成</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> all .1s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>增加：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.el-loading-spinner .circular</span> <span class="token punctuation">&#123;</span>
  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> loading-rotate 0.25s linear infinite<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> loading-rotate 0.25s linear infinite<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>加快按钮的转圈速度。</p>
<h2 id="字典数据项维护">字典数据项维护</h2>
<p>定位到<code>views/system/dict/index.vue</code>，增加按钮：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>
  <span class="token attr-name">v-hasPermi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>['system:dict:update']<span class="token punctuation">"</span></span>
  <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
  <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-notebook-2<span class="token punctuation">"</span></span>
  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$router.push('/dict/type/data/' + scope.row.id)<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  数据项
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="完善系统报错与日志查询">完善系统报错与日志查询</h2>
<h3 id="前端报错提示优化">前端报错提示优化</h3>
<p>修改<code>request.js</code>，根据实际情况调整报错内容，例如：</p>
<ul>
<li>会话超时：您长时间未操作，已自动注销，请重新登录</li>
<li>网络异常：网络连接错误，请检查网络连接，然后重试</li>
<li>超时：系统响应超时，请稍后重试</li>
<li>502:</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Request failed with status code'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'502'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">系统正在升级，请稍候。</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span>
    message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">系统访问异常，请向客服提供错误代码：HTTP </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="后端报错向用户提供日志id">后端报错向用户提供日志ID</h3>
<p><code>GlobalExceptionHandler.java</code>修改代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 处理系统异常，兜底处理所有的一切
 */</span>
<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">defaultExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[defaultExceptionHandler]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 插入异常日志</span>
    <span class="token comment">// 如果能获取到事件id，则直接展示id，方便在系统中查询；如果获取不到id，则提供时间，方便去后台翻日志</span>
    <span class="token class-name">Long</span> errId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createExceptionLog</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        message <span class="token operator">+=</span> <span class="token string">"（日志编号：#"</span> <span class="token operator">+</span> errId <span class="token operator">+</span> <span class="token string">"）"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"ddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message <span class="token operator">+=</span> <span class="token string">"（日志编号：$"</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dtf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 返回 ERROR CommonResult</span>
    <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">Long</span> <span class="token function">createExceptionLog</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 插入错误日志</span>
    <span class="token class-name">ApiErrorLogCreateReqDTO</span> errorLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiErrorLogCreateReqDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 初始化 errorLog</span>
        <span class="token function">initExceptionLog</span><span class="token punctuation">(</span>errorLog<span class="token punctuation">,</span> req<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行插入 errorLog</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> errId <span class="token operator">=</span> apiErrorLogFrameworkService<span class="token punctuation">.</span><span class="token function">createApiErrorLogAsync</span><span class="token punctuation">(</span>errorLog<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> errId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> th<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[createExceptionLog][url(&#123;&#125;) log(&#123;&#125;) 发生异常]"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span>errorLog<span class="token punctuation">)</span><span class="token punctuation">,</span> th<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ApiErrorLogFrameworkService.java</code>修改<code>createApiErrorLogAsync</code>返回类型：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 创建 API 错误日志
 *
 * @param createDTO 创建信息
 * @return 日志ID
 */</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token function">createApiErrorLogAsync</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">ApiErrorLogCreateReqDTO</span> createDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ApiErrorLogServiceImpl.java</code>修改：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Async</span>
<span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token function">createApiErrorLogAsync</span><span class="token punctuation">(</span><span class="token class-name">ApiErrorLogCreateReqDTO</span> createDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">ApiErrorLogDO</span> apiErrorLog <span class="token operator">=</span> <span class="token class-name">ApiErrorLogConvert</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>createDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    apiErrorLog<span class="token punctuation">.</span><span class="token function">setProcessStatus</span><span class="token punctuation">(</span><span class="token class-name">ApiErrorLogProcessStatusEnum</span><span class="token punctuation">.</span><span class="token constant">INIT</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    apiErrorLogMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>apiErrorLog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>apiErrorLog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3
id="完善日志查询允许按id查询日志">完善日志查询，允许按ID查询日志</h3>
<h4 id="后端">后端</h4>
<p><code>ApiAccessLogPageReqVO.java</code>、<code>ApiErrorLogPageReqVO.java</code>、<code>LoginLogPageReqVO.java</code>、<code>OperateLogPageReqVO.java</code>增加:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"日志编号"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"666"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>ApiAccessLogMapper.java</code>、<code>ApiErrorLogMapper.java</code>、<code>LoginLogMapper.java</code>、<code>OperateLogMapper.java</code>增加:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>内加一行

<span class="token punctuation">.</span><span class="token function">eqIfPresent</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> reqVO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="前端">前端</h4>
<p><code>src/views/infra/apiAccessLog/index.vue</code>、<code>apiErrorLog/index.vue</code>、<code>operatelog/index.vue</code>、<code>loginlog/index.vue</code>分别加入：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>日志编号<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryParams.id<span class="token punctuation">"</span></span>
    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入日志编号<span class="token punctuation">"</span></span>
    <span class="token attr-name">clearable</span>
    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
    <span class="token attr-name">@keyup.enter.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleQuery<span class="token punctuation">"</span></span>
 <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span>
<span class="token literal-property property">queryParams</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="防止对话框意外关闭">防止对话框意外关闭</h2>
<p>前端全局搜索<code>el-dialog</code>，在每个<code>el-dialog</code>中加入</p>
<pre class="line-numbers language-none"><code class="language-none">:close-on-click-modal&#x3D;&quot;false&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改后端的<code>src/resources/codegen/vue/views/index.vue.vm</code>，在<code>el-dialog</code>后面增加：</p>
<pre class="line-numbers language-none"><code class="language-none">:close-on-click-modal&#x3D;&quot;false&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样再生成代码就不会遇到相同问题了。</p>
<h2
id="处理前端列表页面搜索条件文字宽度太窄问题">处理前端列表页面，搜索条件文字宽度太窄问题</h2>
<p>前端全局搜索<code>label-width="68px"</code>，将数字改得大一些，例如75px。</p>
<p>修改后端的<code>src/resources/codegen/vue/views/index.vue.vm</code>，将68px换成相同的数字。</p>
<h2 id="向前端提供username字段">向前端提供username字段</h2>
<p>修改后端<code>AuthPermissionInfoRespVO.java</code>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"pdiwt源码"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>AuthConvert.java</code>，增加<code>username</code>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token class-name">AuthPermissionInfoRespVO</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">AdminUserDO</span> user<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoleDO</span><span class="token punctuation">></span></span> roleList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MenuDO</span><span class="token punctuation">></span></span> menuList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">AuthPermissionInfoRespVO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token class-name">AuthPermissionInfoRespVO<span class="token punctuation">.</span>UserVO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nickname</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">avatar</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">convertSet</span><span class="token punctuation">(</span>roleList<span class="token punctuation">,</span> <span class="token class-name">RoleDO</span><span class="token operator">::</span><span class="token function">getCode</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">convertSet</span><span class="token punctuation">(</span>menuList<span class="token punctuation">,</span> <span class="token class-name">MenuDO</span><span class="token operator">::</span><span class="token function">getPermission</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="系统安全">系统安全</h1>
<h2 id="log4j漏洞">log4j漏洞</h2>
<p>定位<code>pom.xml</code>，将log4j版本直接改为最新版即可。</p>
<h2 id="生产系统禁用swagger">生产系统禁用Swagger</h2>
<p>修改后端的<code>application-prod.yaml</code>，增加：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">knife4j</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">production</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果是前后分离项目，也可以通过配置nginx等方式，将<code>/doc.html</code>地址屏蔽掉。</p>
<h1 id="初始化">初始化</h1>
<h2 id="替换图像">替换图像</h2>
<p>前端<code>src/assets/images</code>，替换登录背景图片与默认头像。</p>
<p>删除admin头像：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> map<span class="token punctuation">.</span><span class="token keyword">system_user</span> <span class="token keyword">set</span> avatar<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="改包名">改包名</h2>
<p>在代码中改完包名之后，还需要执行一个sql（将下面的<code>com.xxx</code>换成实际包名），以免启动报错：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> map<span class="token punctuation">.</span>pay_channel <span class="token keyword">set</span> config<span class="token operator">=</span><span class="token keyword">replace</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span><span class="token string">'cn.iocoder'</span><span class="token punctuation">,</span> <span class="token string">'com.xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="修改租户名">修改租户名</h2>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> map<span class="token punctuation">.</span>system_tenant <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'app'</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在前端<code>login.vue</code>中将“租户”的输入框隐藏，并设置默认值。</p>
<h1 id="前端nginx通用配置">前端nginx通用配置</h1>
<pre class="line-numbers language-none"><code class="language-none">upstream backend &#123;
    # TODO 后端服务器地址
    server xxx:48080;
&#125;

map $http_upgrade $connection_upgrade &#123;
    default upgrade;
    &#39;&#39;      close;
&#125;

server &#123;
    listen 80 default_server;
    listen [::]:80 default_server;

    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_proxied any;
    gzip_disable &quot;MSIE [1-6]\.&quot;;
    gzip_buffers 32 4k;
    gzip_http_version 1.1;
    gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php;

    # TODO 设置成前端地址
    root &#x2F;var&#x2F;www&#x2F;html;

    # 上传大小限制
    client_max_body_size 500m;

    # 错误页，让403返回404（以应对扫测）
    error_page 403 &#x3D;404 &#x2F;404;
    error_page 404 &#x2F;404;

    location &#x3D; &#x2F;404 &#123;
        internal;
    &#125;

    # 安全设置
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection 1;

    # 管理后台
    location ^~ &#x2F;api&#x2F; &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    location ^~ &#x2F;admin-api&#x2F; &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    location ^~ &#x2F;infra-api&#x2F; &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    location @backend &#123;
        proxy_pass http:&#x2F;&#x2F;backend;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;upgrade&quot;;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_intercept_errors off;
    &#125;

    # TODO 注意：以下是开发工具，应根据实际需要启停
    # Spring Boot监测
    # location &#x2F;admin &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    # location &#x2F;druid &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;

    # Swagger
    # location &#x3D; &#x2F;doc.html &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    # location &#x2F;webjars&#x2F; &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    # location &#x3D; &#x2F;swagger-resources &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;
    # location &#x2F;v2&#x2F; &#123; try_files &#x2F;dev&#x2F;null @backend; &#125;

    # 前端
    location &#x2F; &#123;
        try_files $uri $uri&#x2F; &#x2F;index.html;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>ruoyi</tag>
        <tag>若依</tag>
        <tag>芋道</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nginx配置天地图缓存</title>
    <url>/2022/05/06/tianditu-cache/</url>
    <content><![CDATA[<p>由于天地图有时访问速度缓慢，加上接口访问数量限制，可借助nginx对天地图进行缓存，提高访问速度。</p>
<span id="more"></span>
<h1 id="配置文件内容">配置文件内容</h1>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># ...

http &#123;
    # ...

    resolver 114.114.114.114 ipv6&#x3D;off;

    # 此处换成实际的缓存路径
    proxy_temp_path &#x2F;var&#x2F;cache&#x2F;tianditu_temp;
    proxy_cache_path &#x2F;var&#x2F;cache&#x2F;tianditu levels&#x3D;1:2 keys_zone&#x3D;cache_one:200m inactive&#x3D;1d max_size&#x3D;30g;

    upstream tianditu_server &#123;
        server t0.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
        server t1.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
        server t2.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
        server t3.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
        server t4.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
        server t5.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
        server t6.tianditu.gov.cn:443 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;30s;
    &#125;

    server &#123;
        # 此处需修改成实际端口
        listen 5000 default_server;
        server_name _;

        location &#x2F; &#123;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers X-Requested-With;
            add_header Access-Control-Allow-Methods GET,POST,OPTIONS;

            proxy_ssl_name t0.tianditu.gov.cn;
            proxy_ssl_server_name on;
            
            proxy_cache cache_one;
            proxy_cache_key $uri$is_args$args;
            
            proxy_pass https:&#x2F;&#x2F;tianditu_server;
            proxy_set_header Host t0.tianditu.gov.cn;
            proxy_set_header User-Agent &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;103.0.0.0 Safari&#x2F;537.36&quot;;
            proxy_ignore_headers Set-Cookie;
            proxy_ignore_headers Cache-Control;
            proxy_cache_valid 200 302 7d;
            
            expires 7d;
        
            add_header X-Proxy-Cache $upstream_cache_status;
        &#125;
    &#125;

    # ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="使用">使用</h1>
<p>将天地图域名换成服务器地址即可，例如将<code>https://t0.tianditu.gov.cn/img_w/wmts</code>替换成<code>http://172.16.0.100:5000/img_w/wmts</code>。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>天地图</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Spring Boot和若依框架实现可灵活配置的动态接口</title>
    <url>/2022/06/08/dynamic-controller/</url>
    <content><![CDATA[<p>很多业务都是以增删改查为基础，利用若依框架，已经能够实现代码的快速生成，但需要在后端部署一些VO、Controller和Service，如需维护，依然要修改多个文件，而且要升级和重启后端系统。</p>
<p>如果业务只是简单的SQL或脚本，我们能否进一步简化，实现接口动态维护，不停机就能快速配置好系统接口呢？</p>
<span id="more"></span>
<h1 id="说明">说明</h1>
<p>如在生产系统中使用，可直接使用更为成熟的产品，例如<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Nzc3Nzc3Mub3JnLw==">magic-api<i class="fa fa-external-link-alt"></i></span>（<span class="exturl" data-url="aHR0cHM6Ly9tYWdpYy1hcGkuc3Nzc3Nzc3Mub3JnLmNuL21hZ2ljL3dlYi9pbmRleC5odG1s">在线预览<i class="fa fa-external-link-alt"></i></span>）。</p>
<h1 id="功能设计">功能设计</h1>
<p>系统主要实现以下功能：</p>
<ol type="1">
<li>接口管理：向开发者提供接口信息管理功能，能够创建和维护接口，动态管理接口名称、接口URL、接口类型、输入参数、代码等信息。当接口数量较多时，可通过整理分组来保持可维护性。</li>
<li>接口调用：在接口管理功能设置好接口后，开发者无需重启后端应用，即可调用相应接口。调用时，系统后台对调用者身份和权限进行校验，校验通过后执行相应代码，返回运行结果。</li>
</ol>
<p>接口支持以下技术特性：</p>
<ol type="1">
<li>快速配置，保存即更新，无需停机维护。</li>
<li>可根据需要设置或更改接口URL。</li>
<li>可设置或限制接口的访问方式，如GET、POST。</li>
<li>支持提供输入参数，并支持通过URL、JSON、form等多种方式传入参数。</li>
<li>支持SQL和JavaScript（要求Java版本小于15）两种类型的代码。SQL支持MyBatis的动态标签，JavaScript可获取Spring对象。</li>
<li>支持授权和权限验证。</li>
<li>支持切换数据源。</li>
</ol>
<h1 id="数据库设计">数据库设计</h1>
<p>设计两张表，一个为接口内容（interface_item），存储所有接口的代码；另一个为接口分组（interface_group），便于归类管理所有接口。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> interface_item
<span class="token punctuation">(</span>
    id          <span class="token keyword">BIGINT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span>
        <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    name        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>
    code        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'接口名'</span><span class="token punctuation">,</span>
    <span class="token keyword">type</span>        <span class="token keyword">TINYINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'类型，1-sql，2-js'</span><span class="token punctuation">,</span>
    description <span class="token keyword">TEXT</span>          <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>
    method      <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'GET'</span> <span class="token keyword">COMMENT</span> <span class="token string">'请求方式,GET/POST'</span><span class="token punctuation">,</span>
    group_id    <span class="token keyword">BIGINT</span>        <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分组'</span><span class="token punctuation">,</span>
    group_code  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分组'</span><span class="token punctuation">,</span>
    datasource  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数据源'</span><span class="token punctuation">,</span>
    is_enable   <span class="token keyword">TINYINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否启用'</span><span class="token punctuation">,</span>
    is_log      <span class="token keyword">TINYINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否记录调用日志'</span><span class="token punctuation">,</span>
    permission  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'权限标识,*表示免登录'</span><span class="token punctuation">,</span>
    param       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'输入参数'</span><span class="token punctuation">,</span>
    program        <span class="token keyword">TEXT</span>       <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'代码内容'</span><span class="token punctuation">,</span>
    create_by   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建人'</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">DATETIME</span>      <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
    update_by   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新人'</span><span class="token punctuation">,</span>
    update_time <span class="token keyword">DATETIME</span>      <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span>
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'接口项目'</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> interface_group
<span class="token punctuation">(</span>
    id          <span class="token keyword">BIGINT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span>
        <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    name        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>
    code        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'url'</span><span class="token punctuation">,</span>
    icon        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'图标'</span><span class="token punctuation">,</span>
    description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>
    parent_id   <span class="token keyword">BIGINT</span>                             <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'上级节点id'</span><span class="token punctuation">,</span>
    create_by   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建人'</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
    update_by   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新人'</span><span class="token punctuation">,</span>
    update_time <span class="token keyword">DATETIME</span>                           <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span>
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'接口分组'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设计完成后，可使用平台的“代码生成”功能生成相应的VO、Vue等文件，并将菜单权限导入到数据库中。</p>
<h1 id="核心代码">核心代码</h1>
<p>以若依的<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20veV9wcm9qZWN0L1J1b1lpLVZ1ZQ==">前后分离版本<i class="fa fa-external-link-alt"></i></span>为例来实现这个功能。下面介绍核心部分代码，完整代码参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2luZm5hbi9keW5hbWljLWNvbnRyb2xsZXItZGVtbw==">GitHub<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="解析动态sql">解析动态SQL</h2>
<p>利用MyBatis的相应方法，可解析MyBatis标签：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将SQL中的绑定参数传入到该paramMap中</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> paramMap<span class="token punctuation">;</span>

<span class="token comment">// 解析SQL</span>
<span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> sqlSessionTemplate<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLanguageDriver</span><span class="token punctuation">(</span><span class="token class-name">XMLLanguageDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSqlSource</span><span class="token punctuation">(</span>sqlSessionTemplate<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rawSql<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> parsedSql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// SQL语句解析完成</span>
ptst <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>parsedSql<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 传入参数</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">></span></span> parameterMappings <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMappings <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterMappings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ParameterMapping</span> parameterMapping <span class="token operator">=</span> parameterMappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMapping<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">ParameterMode</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> propertyName <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> value <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">TypeHandler</span> typeHandler <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JdbcType</span> jdbcType <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getJdbcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                jdbcType <span class="token operator">=</span> sqlSessionTemplate<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJdbcTypeForNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            typeHandler<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>ptst<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> jdbcType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 准备完成，执行SQL</span>
<span class="token class-name">ResultSet</span> result <span class="token operator">=</span> ptst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="获取sql执行结果中的字段名">获取SQL执行结果中的字段名</h2>
<p>ResultSet中有一个getMetaData函数，通过该函数可获取到查询结果中的各字段名：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> result <span class="token operator">=</span> ptst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ResultSetMetaData</span> md <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> columnCount <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> rowData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取字段名称和结果</span>
        rowData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="动态运行javascript代码">动态运行JavaScript代码</h2>
<p>Java自带一个名为Nashorn的JavaScript引擎（备注：从Java
15开始已经移除），可通过以下代码运行：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> code<span class="token punctuation">;</span>                        <span class="token comment">// 代码</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> paramMap<span class="token punctuation">;</span>       <span class="token comment">// 用户传入的参数</span>

<span class="token comment">// ...</span>

<span class="token class-name">ScriptEngine</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将一些Java对象传入到JS引擎中，以便在JS代码内直接调用</span>
engine<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> xxxObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>

<span class="token comment">// 将代码封装至 Main 函数中，在JS代码中可通过 paramMap 获取参数。</span>
code <span class="token operator">=</span> <span class="token string">"load(\"nashorn:mozilla_compat.js\"); function Main(paramMap) &#123;\n"</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"\n&#125;"</span><span class="token punctuation">;</span>

<span class="token comment">// 编译并运行脚本</span>
<span class="token class-name">CompiledScript</span> script <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Compilable</span><span class="token punctuation">)</span> engine<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Invocable</span> inv2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Invocable</span><span class="token punctuation">)</span> engine<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 调用函数并传入参数</span>
    <span class="token keyword">return</span> inv2<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">,</span> paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ScriptException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="身份和权限校验">身份和权限校验</h2>
<p>若依已经将身份和权限校验封装为两个Service，引用即可：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义部分</span>
<span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">TokenService</span> tokenService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">PermissionService</span> ss<span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token comment">// 校验是否登录</span>
<span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LoginUser</span> user <span class="token operator">=</span> tokenService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 设置为当前用户</span>
    tokenService<span class="token punctuation">.</span><span class="token function">setLoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"认证失败"</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 接口限制权限</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 进行校验</span>
    <span class="token keyword">boolean</span> hasPermission <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">hasPermi</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasPermission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"无访问权限"</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 未抛出异常则校验成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="支持多种请求方式">支持多种请求方式</h2>
<p>很简单，在Controller中把各种请求方式都写上即可。如果限定了请求方式，可以在调用invoke之后再进行校验：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;code&#125;"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">processGet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> paramMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// GET方式</span>
    <span class="token keyword">return</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> paramMap<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/&#123;code&#125;"</span><span class="token punctuation">,</span>
        consumes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        produces <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">processPost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">JSONObject</span> body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// POST json</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> body<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token string">"POST+json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/&#123;code&#125;"</span><span class="token punctuation">,</span>
        consumes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED_VALUE</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        produces <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">processPost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// POST x-www-form-urlencoded</span>
    <span class="token keyword">return</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token string">"POST+form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ...</span>

<span class="token keyword">private</span> <span class="token class-name">AjaxResult</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> subgroup<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> interfaceService<span class="token punctuation">.</span><span class="token function">invokeInterface</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> subgroup<span class="token punctuation">,</span> code<span class="token punctuation">,</span> params<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="切换数据源">切换数据源</h2>
<p>一句话：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据源名称参见 application.yaml 配置</span>
<span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"数据源名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="javascript工具类">JavaScript工具类</h2>
<p>为使JavaScript代码能够操作数据库或其他目标，需将常用函数封装到一个工具类中，并暴露给JavaScript运行环境。具体代码参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2luZm5hbi9keW5hbWljLWNvbnRyb2xsZXItZGVtby9ibG9iL21hc3Rlci9ydW95aS1zeXN0ZW0vc3JjL21haW4vamF2YS9jb20vcnVveWkvc3lzdGVtL3NlcnZpY2UvaW1wbC9JbnRlcmZhY2VVdGlsSW1wbC5qYXZh">InterfaceUtilImpl<i class="fa fa-external-link-alt"></i></span>。</p>
<h1 id="使用说明">使用说明</h1>
<h2 id="接口设置">接口设置</h2>
<p>接口设置界面如下：</p>
<figure>
<img src="/img/2022-06-08-dynamic-controller/1.png" alt="接口列表" />
<figcaption aria-hidden="true">接口列表</figcaption>
</figure>
<p>当接口数量较多时，为便于维护，可先设置分组，将不同业务的接口组织到不同分组中。</p>
<p>选择分组，点击添加按钮，录入接口信息：</p>
<figure>
<img src="/img/2022-06-08-dynamic-controller/2.png" alt="接口信息" />
<figcaption aria-hidden="true">接口信息</figcaption>
</figure>
<p>主要参数说明：</p>
<ul>
<li>接口分组、接口代号：决定接口的URL</li>
<li>请求方式：限制GET、POST（JSON格式）、POST（x-www-form-urlencoded），或不限制请求方式</li>
<li>输入参数：如接口需要输入参数，可在此处设置。例如输入参数为<code>name,id</code>，那么前端调用时需要传入name和id两个参数，在SQL中则需要通过<code>#&#123;name&#125;</code>和<code>#&#123;id&#125;</code>进行引用。</li>
<li>权限标识：校验接口调用者是否具有权限，即“菜单管理”中的权限标志。<code>*</code>表示无需token，留空表示需要验证Token但不限制权限。</li>
<li>数据源：即<code>application.yaml</code>中配置的数据源。</li>
</ul>
<p>系统提供测试功能，方便开发人员调试接口。接口的返回值为JSON，以便前端使用，具体格式类似：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span><span class="token punctuation">,</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"test"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="sql配置">SQL配置</h2>
<p>像MyBatis一样配置即可。纯SQL可直接输入，带逻辑的SQL则需要用<code>&lt;script&gt;</code>包围，例如：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">'name != ""'</span><span class="token operator">></span>
<span class="token operator">AND</span> name <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span><span class="token comment">#&#123;name&#125;, '%')</span>
<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="javascript配置">JavaScript配置</h2>
<p>Nashorn引擎支持ES5的大部分特性，可通过ES5语法编程。其代码差异之处，以及Java代码调用方法，可参见<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTQvc2NyaXB0aW5nL2luZGV4Lmh0bWw=">Oracle手册<i class="fa fa-external-link-alt"></i></span>。</p>
<p>Java的包和类可用JS代码直接导入并调用，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入包</span>
<span class="token function">importPackage</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导入类</span>
<span class="token function">importClass</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TabService<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> serv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导入后，可以像Java一样new实例，或者在JS环境中调用Java方法与函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在本系统中，可通过<code>paramMap</code>获取用户的请求参数，通过<code>AppUtil</code>来调用Java函数，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取请求参数</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> paramMap<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'未命名'</span><span class="token punctuation">;</span>

<span class="token comment">// 执行SQL</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> AppUtil<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">'select * from sys_user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
AppUtil<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">'update tab set name = ? where id = ?'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取Spring Bean并调用</span>
<span class="token keyword">var</span> tabService <span class="token operator">=</span> AppUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">'tabService'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> tabService<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="进一步思考">进一步思考</h1>
<p>由于接口配置功能可以输入任意代码，因此当然不能向一般用户开放，否则系统会被恶意代码损毁。</p>
<p>输入参数往往是由用户提供的，因此应当假定每个输入参数都带有恶意，例如SQL注入、超出长度范围、超出权限范围（例如将URL中的<code>?id=3</code>改为<code>?id=4</code>）等等，。SQL或JavaScript代码也应注意限制执行时间和查询结果数量，以免数据溢出或造成阻塞。</p>
<p>动态的接口维护功能主要目的是便利开发人员，降低维护成本，但是本代码缺少对高并发的优化，因此不建议在高并发情况下使用。</p>
<h1 id="todo">TODO</h1>
<ol type="1">
<li>查阅接口调用日志</li>
<li>Swagger接口文档</li>
<li>Kotlin语言支持</li>
<li><a href="/2023/05/10/javet">ES6支持</a></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Spring Boot</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>见人说人话，见鬼说鬼话</title>
    <url>/2022/07/20/expression/</url>
    <content><![CDATA[<p>在微博上看到了这样一个故事：</p>
<blockquote>
<p>跟讲科学的人谈科学，和信玄学的人谈玄学才是万全之策。
妇产科接一产妇，要求明天剖宫产，还详细到几点几分，但是她现在还没到预产期，一切都是正常指标，没有手术指征，医生不能给她提前剖，她和家人非要，说家里人找大师给算了，孩子明天那个时间出生命格好。
医生解释了半天，不听，非要剖，不然就去投诉医生态度不好……
主任听说了，来解围说：人的命格天注定，瓜熟蒂落，瓜熟蒂落，你这瓜不熟，强行摘下，也就是说想逆天改命，要不得，没那个道行，强行如此，会被反噬，到时候，你们一家都不够赔。
产妇和家人一商量，觉得主任说的对，走了……
医生说，那一刻，觉得主任万丈光芒。</p>
</blockquote>
<p>技术人员在与他人沟通时，经常会出现陷入自己逻辑的现象，导致沟通困难。本文借助这个故事，讲一讲与人沟通的一些技巧。</p>
<span id="more"></span>
<h1 id="了解对方的知识体系与话语体系">了解对方的知识体系与话语体系</h1>
<p>技术人员之间进行沟通，由于双方对技术都有所了解，因此使用行话可以很容易沟通，但是一般人并不了解这些技术，使用行话自然会让他们困惑。</p>
<p>有一些人受自身所受教育限制，或者出于维护自己面子的需要，他会有一套自己的思想理论，而且会坚持这些理论。如果你的理论与他的理论发生冲突，自然容易发生争执。</p>
<p>因此，面对知识体系不同的人，不要急着用自己的技术理论进行沟通，更不要急着否定对方，而是先试探对方对技术的理解情况，了解他的理论和语言。</p>
<p>以前文故事为例，产妇家提到了“大师”，说明他们家不懂任何现代医学，而且具有封建迷信思想，因此不能用现代医学理论和术语来沟通，而是要用一些传统医学或封建迷信的语言来沟通。</p>
<h1 id="抓住主要矛盾必要时切换思路">抓住主要矛盾，必要时切换思路</h1>
<p>沟通的目的是解决问题，但解决问题之前需要先了解问题是什么，哪些是主要矛盾，哪些不是主要矛盾。</p>
<p>以前文故事为例，产妇家的诉求是早产，而做技术的人就很容易讲自己的话，然后对自己的观点进行进一步解释，例如早产需要哪些条件、对方不符合哪些条件、后果如何之类，而对方会因为听不懂，无法理解，导致沟通陷入僵局。</p>
<p>当沟通陷入僵局时，就不要再沿着之前的思路进行思考，而是要直接跳出这种逻辑，重新换一个思路：产妇为什么会要求早产呢？其实是因为他们听了“大师”的话，因此主要矛盾实际上不是如何否定早产，而是如何证明“大师”是错的。</p>
<h1 id="翻译成对方能理解的话">翻译成对方能理解的话</h1>
<p>搞清楚问题之后，不要直接去解答问题，而是要把你的观点整理一下，翻译成他们能够理解的词语。特别是要否定对方时，要先顺着对方的思维说话，当对方接受以后再引出自己的观点。</p>
<p>主任来了，他的经验丰富，知道对方只能理解“玄学”理论，因此用玄学理论与他们沟通。主任先提出“人的命格天注定”的论断，而且不说“没到预产期”，而是将其换成“你这瓜不熟，强行摘下，也就是说想逆天改命”，让对方很容易理解。在此基础上，主任稍微恐吓一下，“要不得，没那个道行，强行如此，会被反噬”，因为大师再厉害，也不可能超越天命，所以很容易就说服了对方。</p>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>沟通</tag>
      </tags>
  </entry>
  <entry>
    <title>如何避免被假资讯蒙蔽</title>
    <url>/2022/08/15/get-information/</url>
    <content><![CDATA[<p>互联网每时每刻都有海量信息，有的是真实信息，有的是虚假信息。而虚假信息又有很多类别，例如博取流量、误导他人、设置骗局、发动信息战，等等，轻者影响我们的正常认知，重者让我们蒙受各种损失。我们如何来辨别其中的虚假信息，避免自己受蒙蔽呢？</p>
<span id="more"></span>
<h1 id="从欺骗手法反向思考">从欺骗手法反向思考</h1>
<p>我们可以了解一些常见的欺骗手法，如果能够识别出可疑信息，从而提高警惕，受蒙蔽的概率就会降低。</p>
<p>当你看到的信息具有以下特征时，就应该多加小心了：</p>
<h2 id="带有强烈感情色彩">带有强烈感情色彩</h2>
<p>制造虚假信息，一种常见的方法是调动你的情绪。当你带有强烈情绪的时候，你的思维就容易变得不像平常一样理智，如果在这种情况下再给你灌输某些观点，你就更容易顺着信息发布者的意图来思考，接受他们的观点。</p>
<p>那么发布者如何调动你的情绪呢？诉诸感情，在信息中夹杂大量感情色彩，具体来讲，就是多谈情绪和感情，并且使用明显带有感情色彩（褒义词、贬义词）的词语来叙事，从而制造出一种倾向性。</p>
<p>在某些网络平台中，发布者还可以通过控制评论的方式，展示具有倾向性的评论，屏蔽理性或持不同意见的评论，使得这种感情色彩更加强烈，强化传播效果。</p>
<p>因此，当你看到某条信息以后心里产生了强烈的情绪，例如愤怒、激动、急躁、感动等等，你就要多加留意了。</p>
<h2 id="阴谋论">阴谋论</h2>
<p>阴谋论有一个重要特征，就是认为众多事件都是由一个“神秘团体”来操纵的，例如具名的“共济会”，或者不具名的“个别人”、“某些势力”。这些团体会在全世界，或者世界的某个地区来“下一盘大棋”，通过一系列“操作”来达到“不可告人的目的”。由于阴谋论能够自圆其说，而且很难证实（证明它是真的）或证伪（证明它是假的），所以阴谋论往往有自己的市场。</p>
<p>那么如何对待阴谋论呢？</p>
<ul>
<li>首先要能够识别出阴谋论：有一个“组织”或“团体”、强调暗中“操纵”、逻辑严密、能够把各种事情串起来。</li>
<li>接下来要找到阴谋论的两个漏洞：缺乏具体证据，缺乏交叉验证。
<ul>
<li>缺乏具体证据：假如信息说是“某团体暗中支持”，那么这个团体叫什么名字？负责人是谁？支持是在什么时间、以何种方式支持的？有泄漏出来的照片、文件等证据吗？如果是“外国势力”，他们不可能特意用中文，所以它们的原文是什么呢？</li>
<li>缺乏交叉验证：为了编造事件，有些人会另外“制造”证据。然而，一件值得关注的事情，通常会有不同的人（例如不同新闻媒体）以不同的渠道来进行调查，反过来说，如果大家对这件事情的说法都差不多，缺乏不同的口径，也会说明事情不靠谱。</li>
</ul></li>
</ul>
<p>如果你所看到的信息符合以上两个特点，那么当作小说来看就好，别当真。</p>
<h2 id="只说一半真话">只说一半真话</h2>
<p>最近几年，网络经常出现舆论事件“反转”，甚至“反转”后再“反转”的情况。为什么会出现这种情况呢？</p>
<p>假设当事人没有撒谎，那么就说明当事人只选择了对自己有利的部分来进行发布，隐瞒了对自己不利的信息，而很多网民属于情绪驱动，所以事态就在未经核实的情况下发酵起来。当事件更多细节被挖出之后，网民得知了事件的全貌，于是就发生了“反转”。只说一半真话，虽然不是撒谎，但其实也属于不诚实，操作不当也会引起反噬。</p>
<p>再举一个例子，我们经常会知道谁谁谁创业成功，挣了多少钱，然而这种报道通常也是只讲一半真话：一方面，创业成功需要运气，甚至需要关系之类见不得人的事情，不是单纯个人努力的结果；另一方面，创业有大量的失败者，而且人数远超成功者，新闻媒体不会挑这些人来报道。</p>
<p>所以当你看到某类事件时，不要武断地认定对错成败，因为背后可能有着你所不知道的隐情，所以最好等了解事件的全貌之后再下结论。</p>
<h2 id="断章取义">断章取义</h2>
<p>很多言论，不能单纯从言论本身来判断讲话者的看法或立场。看一段话要考虑上下文，听一段讲话要考虑说话者的背景，他可能只是在针对特定的问题来进行评论，不代表一般情况。</p>
<p>所以当你看到谁发表了不合常理的言论时，哪怕是“有图有真相”、“有视频有真相”，也要留意是不是被剪辑，或者被错误解读了。</p>
<h1 id="从信息来源思考">从信息来源思考</h1>
<p>评估信息的真实性，还要看信息的来源。一般来说，信息来源越权威，信息越可靠。</p>
<h2 id="官方渠道">官方渠道</h2>
<p>官方渠道，例如政府机构、行业协会、公司发布会，都有一些专业的消息发布者。他们在发布信息之前，要在单位内部进行审核，确认内容无误之后才会公诸于众，因此他们正式发布的内容可以代表他们的立场。</p>
<p>虽然官方消息通常是可靠的，但不代表一定是真实的，例如某些政府或公司会否认自己的问题，掩盖自己的丑闻，在某些问题上采用统一口径，等等。所以不能轻信官方消息，该怀疑的也要怀疑，该核实的也要核实。</p>
<h2 id="传统媒体">传统媒体</h2>
<p>传统媒体，例如国内外的新闻机构，他们一般有专业的编辑团队，能够亲自去调查事件，并且对记者的报道内容把关，所以他们的信息往往更加可靠。</p>
<p>需要注意的是，<strong>媒体是可以有立场的，所以他们可能会基于自己的立场，对事件的报道进行有倾向性的加工</strong>，例如</p>
<ul>
<li>夸大或缩小影响：吹牛，或者大事化小</li>
<li>选择性报道：将事情简单地“二极管”化，并且只挑正面或反面，而回避另一面</li>
<li>在叙述手法上做手脚：不使用中立语气，而是使用明显的褒义词或贬义词来报道</li>
</ul>
<p>另一方面，媒体不光有事实报道，还会有评论内容，例如社评和个人评论，评论不是单纯的事实报道，所以看媒体报道也要看清楚作者是谁。</p>
<p>对于政治方面的媒体，中文维基百科用户进行了很多讨论，形成了《<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV2lraXBlZGlhOiVFNSU4RiVBRiVFOSU5RCVBMCVFNiU5RCVBNSVFNiVCQSU5MC8lRTUlQjglQjglRTglQTclODElRTYlOUMlODklRTQlQkElODklRTglQUUlQUUlRTYlOUQlQTUlRTYlQkElOTAlRTUlODglOTclRTglQTElQTg=">常见有争议来源列表<i class="fa fa-external-link-alt"></i></span>》，由于参与讨论的用户来自不同地区，他们持有各种政治立场，甚至互相对立，讨论时常伴随各种拉锯战，但最终还能形成有意义的结果，因此可以认为这个列表的结论比较客观，不会偏袒任何一方。分析同一事件时，特别是跟政治有关的事件时，最好挑一些立场不同的媒体来进行综合评估。</p>
<h2 id="社交媒体">社交媒体</h2>
<p>社交媒体很多，例如墙内的微博、微信、抖音、小红书、Bilibili，以及墙外的Twitter、Facebook、Telegram等。这些社交媒体，只要注册账号就能发布信息，因此里面的言论仅供参考。</p>
<p>有些人会根据社交媒体言论的倾向来判断形势，然而你所看到的，不能代表现实情况，因为社交媒体已经形成大大小小的“信息茧房”，平台会采用大数据技术，分析你的浏览记录，推送你经常关注的内容，甚至连评论区都选择性展示和屏蔽，使你看到的都是你所认同的信息。另外有些平台或作者也会积极地删帖封号，或者引入水军淹没评论区，使内容全部都是有特定倾向性的言论。</p>
<p>那么怎样比较可靠呢？一方面，可以找这些平台中的权威媒体，他们往往带有认证标志，另一方面，如果社交媒体中的提到的事情具备新闻价值，新闻媒体也会进行报道，而且他们会在核实之后才发布信息。所以遇到“爆料”时，我们可以“让子弹飞一会儿”。</p>
<h2 id="自媒体">自媒体</h2>
<p>很多所谓的“媒体”其实是自媒体，从技术上讲，他们也是社交媒体中的账号，但正是因为他们比其他用户更像“媒体”，所以才得名“自媒体”。</p>
<p>自媒体有一个特点是门槛很低，低到注册一个账号，做一些简单的认证，就可以去平台上发布信息了。像今日头条中的“新闻”，当你仔细查看作者名字的时候，可以看到各种乱七八糟的名字，这其实就是自媒体。</p>
<p>自媒体可以做的事情很多，大到新闻报道，小到个人分享，使网络信息更加丰富。然而，像新闻和评论这样的信息，是需要具备一定专业水平才能做的，所以看自媒体节目时，也要了解作者的背景，例如做哪些行业的，然后再决定是否关注。</p>
<p>像今日头条、抖音这样的平台，不要当作权威新闻来源，就当作故事汇好了。如果作者是匿名的，从未介绍过个人经历，发的视频是机器语音，还要去报道国家大事，那么最好换一个权威一些的平台。现在人工智能技术那么发达，你怎么能保证他的内容不是AI生成出来的呢？</p>
<h1 id="从资讯类型思考">从资讯类型思考</h1>
<p>信息，是一种客观性的叙述，例如什么时间在什么地点发生了什么事情。信息存在真假，不存在对错。</p>
<p>观点，是一种主观性的看法，例如什么事情是正确的，什么事情是错误的，应该如何，不应该如何。观点可以讨论对错，但不存在真假。</p>
<p>新闻也可以分为两类，一类是报道，主要目的是传递信息，另一类是评论，主要目的是发表观点。但这两者又不是割裂开的，例如评论通常要论证某个事情是正确或错误的，那么他就需要选择客观事实来进行推导、证明。</p>
<p>如果你想客观理性地去做分析，你就需要能够区分信息和观点。特别是当你需要做决策时，你应该全方面地选取“信息”而非“观点”来进行判断。真实的报道是你决策的依据，而评论其实是别人的推理，应当只是当做参考。</p>
<h1 id="查证信息">查证信息</h1>
<h2 id="搜索引擎">搜索引擎</h2>
<p>要善于使用搜索引擎来检索信息，而且要掌握一些搜索的技巧。</p>
<p>举个例子，当你想了解某个新闻事件的情况时，可以用“XX地区
事件”这样的关键词搜索，初步收集信息。然后再加上一些关键词，例如当事人名字，“XX地区
事件
张三”来进一步缩小范围。如果是近期发生，还可以再从搜索结果中增加时间条件。</p>
<p>如果你只需要在特定网站内进行搜索，可以增加“site:xxx.com”的关键词，例如“xx
事件 site:twitter.com”，这样搜索结果就都是Twitter的贴文了。</p>
<p>由于“谎言重复一千遍就是真理”，所以你要留意搜索结果的差异性，必要时可以通过更换语言或限制语言来进行检索。</p>
<p>关于搜索引擎还需要注意两个问题：</p>
<ol type="1">
<li>搜索引擎的靠谱程度：魏则西事件揭示了莆田系的存在，还说明了“人一百度会死”。国内网站受利益驱动，加上法律限制，一碰到特定话题就直接没有结果，经常搜不到需要的内容，所以要学会翻墙搜索。</li>
<li>搜索的局限性：像微博、微信公众号、Facebook这样的网站会限制用户访问，甚至必须登录之后才能查看内容，所以搜索引擎也并非万能。</li>
</ol>
<h2 id="交叉验证">交叉验证</h2>
<p>简单来讲，如果一个信息，被多个彼此没有关联的媒体，以不同的角度来进行了报道，也就是被交叉验证，那么它就往往比较可靠。</p>
<p>如何来认定交叉验证的可靠性呢？这需要一些专业知识，但是我们可以看两个极端的例子：</p>
<ul>
<li>如果几家媒体都在报道同一件事情，但是它们来自好几个国家，这些国家言论自由程度很高，而且媒体对事件报道明显不是相同的口气，甚至立场相左，说明他们没有关联。</li>
<li>如果几家媒体都在报道同一件事情，但是它们都是一个国家的，而且媒体发表的内容也差不多，甚至一个字都不差，那么可能是“通稿”，可能是几家媒体立场差不多，也可能是有人在带风向。</li>
</ul>
<h2 id="寻找反面信息">寻找反面信息</h2>
<p>当你要进行重大决策的时候，例如买房、投资理财，你不能光从正面来思考问题，否则很可能会掉进陷阱。</p>
<p>以买房为例，很容易就能找到开发商和所在片区的正面评价，片区发展前景多么好，开发商多么可靠之类的，但是，事情总会有两面性，所以你要收集一些反面信息，例如片区的问题，开发商的维权事件等等。</p>
<p>这些反面信息可能会被压制，所以不一定能找得到，但是一旦找到了，而且不是简单的骂街，而是具备一定的信息，认真核实反面信息的内容，评估其影响程度。千万不要因为想买，就只相信自己想看到的话，必要时甚至要及时止损。</p>
<p>同样道理，当评论是一面倒的负面信息时，也有可能是有人在“带节奏”、“带风向”，所以要关注与其相关的正面信息。</p>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
  </entry>
  <entry>
    <title>外出开个小会，领导不会教你的事情</title>
    <url>/2022/09/11/meeting/</url>
    <content><![CDATA[<p>当你作为小工，跟着领导外出开个小会，或者你成为领导，带着一个小弟出去开会，那个当小弟的要注意什么事情呢？</p>
<span id="more"></span>
<h1 id="签到">签到</h1>
<p>一般情况下，会务会组织签到工作。如果你不是会务，会议又有一定的重要意义（例如处于工程节点），可以尝试找负责人，并且给签到表拍个照，以便日后判断都有谁参会了。</p>
<h1 id="拍照">拍照</h1>
<p>领导通常会让小工给会议拍几张照片。然而，照片不要随便拍拍就完事，因为一方面要证明开过会议，另一方面要证明谁参加过，或者谁没有参加过这场会议。因此：</p>
<ol type="1">
<li>等大家都坐稳之后再拍照</li>
<li>多换几个角度拍照</li>
<li>力求能在照片中看清每个与会者，以便日后辨认</li>
<li>有姓名牌子时，可适当抬高手机镜头，把他们的名字一同拍下来</li>
</ol>
<p>如果需要用于宣传，或者未来有可能用于宣传，可以拍几种正面角度的照片，包括从正面看会场、从正面看领导的照片，不过最好让领导要求单位派专业的人来做这件事。</p>
<h1 id="录音">录音</h1>
<p>会上要带一个录音设备，有条件的还可以上录音笔，甚至有转文字功能的那种。</p>
<p>除了录音以外，建议同时记录时间，例如9:30开始录音，9:40领导讲话，9:50张三做汇报，10:10李四发言……这样回放录音时就容易定位。</p>
<p>开会之前别忘了调试录音设备，以免什么都没录清楚。</p>
<h1 id="记录">记录</h1>
<p>会议要做记录，而且尽量每个人都做记录，这样的话，当有同事溜号的时候，就能通过其他同事的记录补充完善。</p>
<p>开完会议要马上整理记录内容，并且提取要点，形成正式记录。不要以为有录音就没事，因为过几天你可能就会全部忘记，甚至都不记得对方领导是谢顶还是秃子了。</p>
<p>不要过度依赖转文字功能，如果会上有人有地方口音，再来几句方言，那么你那里出来的可能就是“乱码”。</p>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>沟通</tag>
      </tags>
  </entry>
  <entry>
    <title>养成随手存档的习惯！</title>
    <url>/2022/10/16/archive/</url>
    <content><![CDATA[<p>网上的东西很容易消失，而中国网站的东西更容易“404”（“被”消失），虽然我们无法改变中国“404”的制度，但是我们仍然可以学习一些存档与找回存档的操作方法，养成随手存档的习惯，及时备份对自己有意义的内容，尽量降低损失。</p>
<span id="more"></span>
<h1 id="随手存档的重要性">随手存档的重要性</h1>
<p>信息会随时消失！</p>
<p>消失与“被消失”太常见了，例如：</p>
<ul>
<li>信息爆炸：旧的信息被新的信息冲刷掉，而信息发布平台的检索功能又不好用，使得旧的信息很难再被找到了。</li>
<li>主动删除：信息发布者出于各种原因，主动修改甚至删除了信息。</li>
<li>商业利益：信息平台为了商业利益，开始给免费、公开的内容增加限制，变成“会员专享”。</li>
<li>违反法律：信息或平台因盗版、诽谤等原因下架。</li>
<li>政治敏感：信息或平台因“政治敏感”被勒令下架。很多情况下，网站为了自己生存，担心被“查水表”，即使“有关部门”不介入，他们也会主动删除某些与官方相左的信息。</li>
<li>运营问题：网站升级、改版，内容发生变化，历史数据丢失。再过几年，网站经营不善，公司倒闭，网站关闭了。</li>
</ul>
<p>有的时候，信息消失得还很快。当你还没看完全文的时候，审核员早已让内容消失了。手速慢一点的话，也不过是几分钟到几小时的事情。</p>
<p>国内网站由于各种原因，信息消失速度通常很快，但是国外网站也不代表绝对安全：例如触犯了国外平台的规则（侵权），或者信息发布者在国内，而且被警察请去喝茶了，内容也有可能消失。</p>
<h1 id="如何存档">如何存档</h1>
<p>根据不同情况，可以考虑不同的存档方法。需要记住的是，如果你认为信息有意义，那么要养成随手存档的习惯，而不要简单地点赞、收藏、转发，否则等内容消失的时候就麻烦了。</p>
<h2 id="截屏拍照或录像">截屏、拍照或录像</h2>
<p>具体操作方法请自行Google搜索，这里不再解释。</p>
<h2 id="互联网档案馆">互联网档案馆</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLm9yZy8=">archive.org<i class="fa fa-external-link-alt"></i></span>（互联网档案馆，又名时光机）与<span class="exturl" data-url="aHR0cDovL2FyY2hpdmUuaXMv">archive.is<i class="fa fa-external-link-alt"></i></span>是两个常用的归档网站。只要在里面输入网址，点击保存，页面内容就会被抓取下来。之后也可以通过这两个网站查阅网站存档记录。因为这样非常有利于防止“404”，所以很早就获得了墙的认证。</p>
<p>截图与转载都可以造假，而归档网站保存的是网页原貌、网页原始网址与原始时间，不太可能造假。</p>
<p>建议在浏览器安装一个归档插件，例如Save To The Wayback Machine（<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvc2F2ZS10by10aGUtd2F5YmFjay1tYWNoaS9lZWJwaW9hYWlsYmpvam1kYm1scG9tZmdpam5sY2Vtaz9obD1lbg==">Chrome版<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9hZGRvbnMubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9hZGRvbi9zYXZlLXRvLXRoZS13YXliYWNrLW1hY2hpbmUv">Firefox版<i class="fa fa-external-link-alt"></i></span>），这样就方便随手归档了。一旦页面404，你和其他人都可以用此插件方便地查阅档案馆记录。</p>
<p>如果网站需要登录才能访问，或者限制国外IP访问，那么归档起不到作用了。而且，archive.org会遵守robots规范（User-Agent:
ia_archiver），如果网站在robots.txt中明确拒绝归档，那么archive.org就不会保存内容，需要改用archive.is存档。</p>
<h2 id="笔记软件">笔记软件</h2>
<p>Evernote（中国版称作“印象笔记”，账号内容与国际版隔离）与OneNote是两个笔记软件，均具备收藏网页内容的功能。</p>
<p>Evernote对网页内容提取得比较好。像新闻资讯等网站，它会聪明地提取出标题与正文，基本上不需要进一步加工精炼。然而，Evernote免费账号只允许登录两个设备，笔记容量也有很大限制，而且中国版的“印象笔记”不支持分享功能。</p>
<p>OneNote提取，可以选择截图、纯文字或选区。个人感觉在内容提取方面不如Evernote好用，但是在笔记整理方面优于Evernote。</p>
<p>个人建议：如果想提取图文，不想直接截图，那么用Evernote保存、抓取内容。如果要进一步整合资源，形成论文、报告什么的，就切换到OneNote整理。</p>
<h2 id="下载到本地">下载到本地</h2>
<p>将网上的内容下载到本地是最安全的方法之一。只要磁盘没坏，没感染病毒，没被勒索软件勒索，没有误删，资源就不会丢失。</p>
<p>如果要保存网页，只需轻轻地Ctrl+S，然后点击保存就可以了。</p>
<p>但是，保存完成后记得检查一下，因为有些网站会设法阻止你保存东西，存完也是一堆乱七八糟的程序代码。像音乐网站、视频网站等特殊网站，干脆不能Ctrl+S（除非你只想保存评论区），需要找一些专用的下载工具才行。</p>
<p>有些平台需要一些特殊方法下载，例如：</p>
<ul>
<li>微博帖子：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxpdWd1b2ZlbmcuY29tL3AvNTY3MA==">Octoman<i class="fa fa-external-link-alt"></i></span></li>
<li>微信公众号：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIyMTE0NDUx">https://www.zhihu.com/question/2211445<i class="fa fa-external-link-alt"></i></span></li>
<li>音视频：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvaW1vcnQveW91LWdldA==">you-get<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="爬虫程序">爬虫程序</h2>
<p>如果你会编程，那么可以利用网络爬虫收集信息。到网上搜一些爬虫程序的案例，自己写个爬虫扒网站内容。有需要的话可以再买台服务器，或者找个闲置电脑，定时跑程序，实现自动归档。</p>
<p>如果要爬特定网站，也可以在搜索时把网站名加上，看看有没有现成的程序，节省时间。</p>
<h1 id="如何找回已删内容">如何找回已删内容</h1>
<h2 id="互联网档案馆-1">互联网档案馆</h2>
<p>如果你记得网站的网址，可以到<span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLm9yZy8=">archive.org<i class="fa fa-external-link-alt"></i></span>或<span class="exturl" data-url="aHR0cDovL2FyY2hpdmUuaXMv">archive.is<i class="fa fa-external-link-alt"></i></span>等网站碰运气，看有没有人提交过存档。</p>
<h2 id="google搜索">Google搜索</h2>
<p>如果你还记得资料的名字或内容，可以将名字或文章中的一两句话用作Google搜索的关键词，查看网上是否还有转载与备份。有时虽然内容已删，但Google自己还留着一个快照，可以在快照失效之前尽快把内容导出来。</p>
<h2 id="专项计划">专项计划</h2>
<p>有些网站会专门搜集容易遭到删除，甚至已经遭到删除的信息：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaGluYWRpZ2l0YWx0aW1lcy5uZXQvY2hpbmVzZS8=">中国数字时代<i class="fa fa-external-link-alt"></i></span>：该网站由加州大学伯克利分校信息学院“逆权力实验室”（Counter-Power
Lab）提供技术支持，重点关注中国的言论审查，每天会收集一些媒体与自媒体等方面的时政类内容。有时可以在该网站找到一些已经在中国被全网删除的内容或言论。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mcmVld2VpYm8uY29tLw==">自由微博<i class="fa fa-external-link-alt"></i></span>：该网站会专门搜集已经遭到屏蔽的微博内容。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mcmVld2VjaGF0LmNvbS8=">自由微信<i class="fa fa-external-link-alt"></i></span>：该网站专门搜集已经遭到屏蔽的微信公众号内容。</li>
</ul>
<h1 id="不要随便分享存档">不要随便分享存档</h1>
<p>为个人研究、收集资料而进行存档是正常操作，但是如果你计划传播资料，则要考虑传播的风险。</p>
<p>如果信息是因为违反法律原因消失，例如泄漏隐私、泄漏商业机密、诽谤生事等，你再将消失的信息拿出来传播，你很可能要负法律责任。另外要注意当地法律规定，某些内容（例如儿童色情）仅仅是持有就已经触犯法律了。</p>
<p>如果信息是因为政治原因消失，你再拿出来传播，则要小心政治后果：例如“端点星”是一个专门整理国内被删内容的网站，然而在2020年4月19日，负责运营的三个志愿者就被警方以“寻衅滋事”逮捕了。</p>
<h1 id="参考资料">参考资料</h1>
<ul>
<li>《<span class="exturl" data-url="aHR0cHM6Ly90ZWxlZ3JhLnBoLyVFNyVBQyVBQyVFNSU4RCU4MSVFNCVCQSU4QyVFOCU4QSU4Mi00MDQtJUU0JUJGJUExJUU2JTgxJUFGJUU0JUJGJTlEJUU1JUFEJTk4LTAyLTIx">404信息保存<i class="fa fa-external-link-alt"></i></span>》</li>
<li>《<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnNodXppeWltaW4ub3JnLzM2MA==">如何找回被删除的网页/新闻<i class="fa fa-external-link-alt"></i></span>》</li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>archive</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做PPT</title>
    <url>/2022/11/05/how-to-make-ppt/</url>
    <content><![CDATA[<p>做PPT还不简单吗？拿PowerPoint（WPS演示）捅一捅，PPT不就出来了吗？</p>
<p>如果阅读过本系列前两篇文章《<a
href="/2020/02/20/how-to-write-document/">如何写好软件文档</a>》和《<a
href="/2020/10/24/how-to-draw-graph/">如何画架构图</a>》，肯定就知道把PPT做好还是需要一点经验的。下面就是PPT的经验分享。</p>
<span id="more"></span>
<h1 id="明确受众">明确受众</h1>
<p>做PPT之前要想好目标和主题，你汇报的是什么呢？听众是谁，做什么事情的，关心什么东西呢？</p>
<p>受众不同，即使可以使用同一个PPT，讲法也会有所不同。以产品功能介绍为例：</p>
<ol type="1">
<li>与外部单位交流：要点出产品的主要功能，强调公司和产品的优势，不要讲产品的技术细节或操作方法，除非客户主动提问。</li>
<li>向甲方汇报项目情况：产品功能点到即可，不用花太多时间去讲，要把主要精力放在如何实施、工程节点、保障措施等方面。</li>
<li>向用户培训：产品的主要功能也是点到即可，但是要强调产品的具体操作方法，如果有条件，最好使用真实产品进行现场演示，而不是简单地念PPT。</li>
</ol>
<h1 id="列好大纲">列好大纲</h1>
<p>汇报通常按“总-分”结构进行，先介绍总体情况，然后再详细叙述。为了使思路更加清晰，可利用思维导图工具来打草稿，理清思路后再填充内容。</p>
<p>如果你没有做过相关汇报，不熟悉其中的套路，可找领导或同事要一些类似的资料，到网上找现成的模板，并且不要急于把PPT做出来，而是先编写大纲，跟有经验的领导和同事确认思路是否正确，然后才开始制作，以免浪费时间。</p>
<p>举两个例子：</p>
<h2 id="项目计划">项目计划</h2>
<p>按照听众群体，可以分为对内汇报和对外汇报。对内汇报则强调内部的分工安排，明确时间节点以及团队各成员的职责，而对外汇报则需要强调时间节点，以及如何保障按时保质保量地交工。</p>
<figure>
<img src="/img/2022-11-05-how-to-make-ppt/example1.png"
alt="项目计划示例" />
<figcaption aria-hidden="true">项目计划示例</figcaption>
</figure>
<h2 id="年终个人总结">年终个人总结</h2>
<p>年终个人总结的目的是向部门领导和同事介绍自己的工作情况，证明自己对团队作出了贡献，并在此基础上作出总结和展望。</p>
<p>作为一个小工，总体结构大致如下：</p>
<figure>
<img src="/img/2022-11-05-how-to-make-ppt/example2.png"
alt="年终个人总结示例" />
<figcaption aria-hidden="true">年终个人总结示例</figcaption>
</figure>
<h1 id="挑选设计">挑选设计</h1>
<p>关于PPT模板，如果你的单位有统一模板，那么就直接用统一模板，不要再自己去设计模板。</p>
<p>如果没有现成模板，建议挑一些设计简洁但又不简陋的模板，无关要素越少越好，别人看的是你的汇报内容，不是看你的PPT多漂亮。</p>
<h2 id="样式">样式</h2>
<p>由于PPT通常是利用投影仪或电视机之类设备播放的，不像看纸质文件那样清晰，所以在具体的设计方面，要注意一些细节问题：</p>
<ul>
<li>颜色：颜色要具有一定的对比度，例如白色背景可以配黑色、红色或蓝色文字，而黑色背景可以配白色、黄色或绿色文字，这样可以让人能看清楚其中的内容。</li>
<li>字体：文字线条不要太细。另外尽量选用电脑系统自带字体，例如微软雅黑，如果你的PPT需要用别人电脑播放，可以确保不会缺字体。</li>
<li>字号：字号尽量不要小于28，再小的话，距离远了看不清。如果目标听众里面有老年人，因为老年人花眼，文字要更大一些。</li>
</ul>
<h2 id="内容">内容</h2>
<p>PPT内容要尽量多样化，例如：</p>
<ul>
<li>像本段内容一样，使用项目符号和编号来编排内容，增加层次感。</li>
<li>配置一些图片，或者摆放一些抽象的符号，避免一味地堆砌文字，以免内容枯燥。</li>
<li>使用文本框、流程图等方式来重排文字，用错位排布、流程分布等形式，让内容更加直观。</li>
<li>使用幻灯片动画来展现内容。例如一张幻灯片内有五段话，你可以不让它们同时显示出来，而是增加动画并通过鼠标控制，每讲一个主题时才显示一段话。</li>
</ul>
<h1 id="撰写讲稿">撰写讲稿</h1>
<p>讲稿是你汇报时要讲的内容。如果汇报比较重要，容不得失误，或者你的经验不足，担心讲不好，最好提前写一份讲稿，放在PPT的下方。</p>
<p>如果你利用了PPT下方的“单击此处添加备注”，在正式汇报时，投影仪上显示的是正式的PPT，而你的屏幕上会显示这份讲稿：</p>
<figure>
<img src="/img/2022-11-05-how-to-make-ppt/report1.png" alt="report1" />
<figcaption aria-hidden="true">report1</figcaption>
</figure>
<figure>
<img src="/img/2022-11-05-how-to-make-ppt/report2.png" alt="report2" />
<figcaption aria-hidden="true">report2</figcaption>
</figure>
<p>有些汇报总是要讲一些场面话和官话，这种话大家都不爱听，也不解决问题，但是还必须要讲，所以可以把讲稿直接写在PPT上，直接照着念就行了。</p>
<p>有的时候讲稿太长了，而且是一些解释性的东西，这种就不建议全部贴到PPT上，可以挑一些重点放到PPT上，其他内容等到讲的时候再详细去说。</p>
<h1 id="确认内容">确认内容</h1>
<p>PPT不要赶在deadline时才完成初稿。有些情况下，你需要跟领导确认内容，所以要留出返工的时间。</p>
<h1 id="本系列文档">本系列文档</h1>
<ul>
<li><a
href="/2020/02/20/how-to-write-document/">如何写好软件文档</a></li>
<li><a href="/2020/10/24/how-to-draw-graph/">如何画架构图</a></li>
<li><strong>如何做PPT</strong></li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>文档</tag>
        <tag>PPT</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么不使用GPT</title>
    <url>/2022/12/30/why-not-gpt/</url>
    <content><![CDATA[<p>ChatGPT火了，业界甚至直呼，再不掌握人工智能，就要被时代淘汰了。</p>
<p>身边已经有人开始使用GPT来作为信息检索工具，并且享受到了这种有问必答的便利，那么为什么还要等着被“淘汰”呢？</p>
<span id="more"></span>
<p>从ChatGPT的原理上讲，它是基于现有的资料进行“学习”，然后形成“知识库”，因此它回答问题的质量依赖于样本的质量。</p>
<p>然而互联网上简体中文内容的质量是比较差劲的，在一般内容方面，一方面由于中国的网络审查，很多信息是无法正常发出，使得言论带有一定的偏向性，另一方面由于自媒体的内卷，他们大量使用“营销号”的方式生成内容，并没有提供有意义的信息；在技术内容方面，大家则总是抄来抄去，经常得不到想要的答案，从而不得不换用英文来进行检索。ChatGPT用此来作为样本进行学习，所以它的知识水平自然不会高于这些资料。</p>
<p>另一方面，当AI普及后，AI也有可能会反过来污染自己。当ChatGPT流行后，它能快速生成信息，而且内容看起来逻辑缜密，不像AI生成内容，所以将来会有越来越多的人使用AI来编写文章，简单改改就去发布。这些AI生成信息未来可能也会成为AI学习的样本，形成一种“内卷”，从而使AI“智力”下降。</p>
<p>由此可见，还是要带着一种怀疑的态度来看待ChatGPT给出的答案，并且通过自己的经验和Google搜索来判断答案的可靠性。不过，既然GPT的结果也要用Google来核实，而且Google查到的可能还是GPT的结果，那为什么不直接用Google来搜索和核实呢？</p>
<p>最后附一段ChatGPT提供的信息与核实的结果，如果没看过相关的动漫，很容易就上当了：</p>
<figure>
<img src="/img/2022-12-30-why-not-gpt/gpt1.png" alt="example" />
<figcaption aria-hidden="true">example</figcaption>
</figure>
<figure>
<img src="/img/2022-12-30-why-not-gpt/gpt2.png" alt="moegirl" />
<figcaption aria-hidden="true">moegirl</figcaption>
</figure>
<p>备注：椎名真白是日本动漫《樱花庄的宠物女孩》的女主角，是一名绘画天才，但生活完全不能自理，需要男主照顾，其魅力在于若无其事地白给，满足了宅男们的妄想。跟《偶像大师》没有任何关系。</p>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>2023新年注意事项</title>
    <url>/2023/01/20/new-year/</url>
    <content><![CDATA[<p>疫情结束了，可是疫情还有后遗症，不仅对个人身体有影响，对经济环境也会有影响。作为普通人，在新的一年里，我们还要注意什么呢？</p>
<span id="more"></span>
<h1 id="声明">声明</h1>
<p><strong>本文仅供参考，不作为投资理财建议。</strong></p>
<h1 id="不要随便折腾">不要随便折腾</h1>
<p>疫情期间，由于不断地封城，经济受到了很大冲击，最终导致很多人降薪失业。</p>
<p>尽管疫情结束了，经济看起来即将复苏，但是毕竟复苏还尚未实现，加上中国的经济的确存在一些根本性的问题，因此现在不要急着折腾。</p>
<p>具体来讲：</p>
<ul>
<li>选择保守策略，假如年底形势好转，再调整决策</li>
<li>不要随意辞职，不要随意跳槽</li>
<li>不要创业</li>
<li>不要加杠杆（增加借贷）</li>
<li>在涉及个人利益的问题上，不要碰自己不熟悉的东西</li>
</ul>
<p>很多人会担心财产贬值，所以想做些什么事情，可是你会发现，如果你什么都不做，你甚至可能跑赢80%的投资者。</p>
<h1 id="守好自己财产">守好自己财产</h1>
<h2 id="避免投资">避免投资</h2>
<p>尽量用最保守的投资方式来投资，即银行存款。同时，银行存款要分散放在大银行中，不要放在小银行中，例如地方银行、城商行、农商行甚至村镇银行，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvMjAyMiVFNSVCOSVCNCVFNiVCMiVCMyVFNSU4RCU5NyVFNSVBNCU5QSVFNSVBRSVCNiVFNiU5RCU5MSVFOSU5NSU4NyVFOSU5MyVCNiVFOCVBMSU4QyVFNSVCQyU4QSVFNiVBMSU4OA==">河南村镇银行事件<i class="fa fa-external-link-alt"></i></span>提醒我们，未来小银行很可能要出事，而且你损失的将不仅仅是存款。</p>
<p>目前很多地区网民都在反馈自己的银行卡被无故限制、无故冻结，而且申诉困难，所以家中要预备满足一个月生活需求的现金，这样在跟银行扯皮期间至少还有钱花，不至于沦落到需要找人借钱或者出门讨饭的程度。</p>
<h2 id="防范诈骗">防范诈骗</h2>
<p>由于越来越多的人失去收入，未来会有越来越多的人走上犯罪的道路，包括盗窃、抢劫和诈骗。</p>
<p>虽然现在治安好了，监控多了，但是大家不要以为就一定安全了。警察也不可能保证每个案子都能管得到，特别是如果犯罪者跑到国外去了，警察就算查到了痕迹，也很难追回损失，所以大家要更加提高警惕。</p>
<p>防范诈骗的方法很简单：现在大家都自顾不暇，不可能还要给你好处，所以能够给你好处的，都是骗子。</p>
<h2 id="及时止损">及时止损</h2>
<p>如果你有借贷，而且手有余钱，因为投资的收益可能还不如贷款利息高，所以可考虑提前还款，降低损失。</p>
<p>如果你在股市、基金、房地产等领域有投资，建议及时退出，及时止损。房地产未来看人口，而人口总体是下降的，这意味着房地产，特别是低线城市的房地产将越来越不值钱。你现在已经挣不到钱了，但是及时出清，至少你的损失会比将来更小。</p>
<p>如果你现在不愿处置财产，你可以稍微等一阵子，等行情见涨之后，见好就收，马上退出。</p>
<h1 id="避免与人矛盾">避免与人矛盾</h1>
<p>疫情三年，很多人因为长期封闭，加上收入不如以往，生活不断受冲击，各种压力程度大增，心理状态已经不正常，甚至已经产生了心理疾病，这导致社会的极端事件也不断增多，甚至出现了很多蓄意报复社会的事件。前两年网络还流行了“献忠”一词，这个词语源自明末张献忠屠蜀的历史，用来指代现在这些极端的无差别杀人事件，虽然这个词语早已被国内网络封杀，但仍然掩盖不了社会矛盾的严重性。</p>
<p>因此现在要特别注意自己的言行，避免无意甚至故意刺激他人，避免与人产生矛盾：</p>
<ul>
<li>保持文明，例如说话礼貌客气，不要随意插队，开车不要加塞，不给别人捅你的理由。</li>
<li>不要露富，不要让别人觉得你过得比别人好，更不要因为你过得好所以瞧不起别人，否则会招引不必要的仇恨，而且被捅死了别人也只会拍手称快。</li>
<li>不要主动惹事，特别是民工、保安、司机、外卖员、快递员、服务员等这类容易遭到歧视的社会群体。当你与他们争执时，要考虑到他们可能会当场拿刀捅你；当你按下“投诉”按钮时，要考虑到他们可能会事后提着刀子堵你家门口。</li>
<li>如果预感要发生矛盾，可以抓紧赶在对方仇恨值上升之前认怂。你认怂，你只是丢了面子；你争强好胜，你可能会丢掉性命。</li>
<li>在公共场合要更加注意安全，远离危险源，出事时不要围观，防止倒霉卷入危险事件。</li>
</ul>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
  </entry>
  <entry>
    <title>科普文：家庭应急储备之对讲机</title>
    <url>/2023/02/16/emergency-walkie-talkie/</url>
    <content><![CDATA[<p>对讲机，看起来是个很简单的东西，但是，自从考了业余无线电操作证之后，才会意识到，对讲机不仅要考证，而且还有很多讲究。本文讲一讲，当家庭为了应急储备而购买对讲机时，需要考虑什么事情。</p>
<span id="more"></span>
<h1 id="对讲机的作用">对讲机的作用</h1>
<p>如今4G、5G网络已经全面普及，使用手机就能很容易与人联络。然而，在手机信号不好的山区，或者在发生大型灾难时（例如汶川地震、郑州洪水），手机有可能收不到信号，这时如果有对讲机，就有更大的机会与人取得联络，了解所在地情况，或者发出求救信号。</p>
<h1 id="对讲机的种类">对讲机的种类</h1>
<p>在购买对讲机时，要先了解对讲机的种类，以免买错无法使用。</p>
<h2 id="公众对讲机">公众对讲机</h2>
<p>公众对讲机是开放给公众使用的对讲机，频率在409MHz附近，发射功率0.5W，覆盖范围比较近。频率不能调整，而且不能更换天线。但是这种对讲机既不需要考操作证，也不需要办理执照。</p>
<p>如果联络范围不大（1公里），而且仅限于熟人间联系，可考虑配置一对公众对讲机。</p>
<h2 id="业余对讲机">业余对讲机</h2>
<p>相比于公众对讲机，这里更推荐业余对讲机，因为“业余”对讲机更加“专业”。</p>
<p>“业余对讲机”，其中“业余”不是指操作水平业余，而是指用途业余，也就是给无线电爱好者提供的、非工作用途的对讲机。这类对讲机可以手工设置频率，发射功率比较大，而且可以通过更换天线来改善信号质量，所以灵活性比较高，覆盖范围也比较广。</p>
<p>业余的核准频率是144-148MHz（VHF段）以及430-440MHz（UHF段），发射功率可以到达5W甚至更高。430-440MHz在城市传播较好，因此也被无线电爱好者广泛使用。另外，在购买对讲机之前，需要确认它的发射与接收的频率范围，范围不同则无法互相通话。</p>
<p>按信号类型，对讲机可分为模拟信号和数字信号。由于数字信号使用人数较少，而且数字机价格较贵、操作复杂，不建议家庭购买。后文也将按照模拟信号来讲解。</p>
<p>为了提高可玩性，很多对讲机都有操作屏幕，能够进行一系列灵活操作，有些还支持双守模式，即同时收听两个频道。但是，对于你的家庭成员来说，这些操作可能过于复杂了，因此建议考虑买那种简单的机器：没有屏幕，没有设置，只有音量旋钮、频道旋钮和一个PTT按钮。这样的话，你就可以告诉你的家人，在发生什么情况，把机器调到几频道，然后就可以通话了。至于频率等参数，你可以事先用配套的软件来设置好。</p>
<p>使用业余对讲机需要考取业余无线电台操作证书，而且需要在获得操作证之后办理电台执照，取得一个电台呼号，这样才算是合法使用。然而实际情况是一般人根本不知道对讲机需要办证，很多行业例如工地塔吊在大量滥用业余对讲机，而且只要未对其他业务造成干扰，就几乎没人管。所以建议一方面大家把操作证考出来，用合法呼号来合法通联，另一方面又不要把合法性问题太当回事。</p>
<h2 id="公网对讲机">公网对讲机</h2>
<p>公网对讲机，就是利用4G/5G网络来进行联络的对讲机，因此公网对讲机可以有着比其他对讲机还要大的覆盖范围。</p>
<p>然而，这也说明了公网对讲机会像手机一样有流量费，而且当手机没信号时，公网对讲机也会失效，因此不适合应急使用。</p>
<h2 id="专业对讲机">专业对讲机</h2>
<p>专业对讲机通常用于特定行业，例如铁路、航空、海事、公安、军事等。有些对讲机是模拟信号，有些则是数字信号。但是，它们的频率都是行业专用频率，有些领域还是加密通信，普通人使用会被视为干扰，而且涉嫌违法，因此不要购买。</p>
<h1 id="对讲机设置">对讲机设置</h1>
<p>公众对讲机比较简单，只要两个人使用同一频道，信号相通，就能直接使用了。</p>
<p>但是业余对讲机比较复杂，特别是不同渠道、不同品牌、不同型号，需要进行一些设置，才能正常通话。</p>
<h2 id="寻找频率">寻找频率</h2>
<p>对讲机至少要保存两种频率：一种是直频频率，另一种是中继台频率。前者可以理解为私聊，后者可以理解为加群。</p>
<p>中继台频率可以在微信小程序“业余无线电”中进行搜索，找到“中继查询”功能，然后查询自己家附近的中继台频率。</p>
<p>关于直频频率，只规定了频率范围在多少MHz以内，但是并没有规定说你必须用多少MHz，所以只要符合频率范围，而且不会干扰他人，这样就行了。如果不确定，可以先将对讲机设置为特定频率，然后听一段时间，假如一直没人说话，有可能是没人占用。</p>
<h2 id="设置频率">设置频率</h2>
<p>下面讲述设置对讲机时需要注意的参数，具体设置方法则需要查看对讲机的说明书。</p>
<h3 id="中继频率">中继频率</h3>
<p>在查询中继后，要留意一些参数：模式、频率、频差、亚音，你需要找到对讲机说明书，并找到相应的参数设置来设置对讲机：</p>
<ul>
<li>模式：要选择模拟模式，或数模混合模式的中继。如果只支持数字模式，那么可以直接略过，因为模拟信号对讲机连接不上。</li>
<li>频率：假如中继台频率是439.150MHz，你需要将对讲机设置为频率模式，然后输入439.150。</li>
<li>频差：假如频差是下差5MHz（减5MHz），需要找到类似“频差方向”、“频差频率”之类的设置，将频差方向设置为“-”，频差频率设置为5MHz。上差则是把频差方向设置为“+”。没有频差（直频）则需要把频差方向设置为“关闭”或“OFF”。</li>
<li>亚音：亚音分为发送亚音（编码亚音，T-CTCSS）和接收亚音（解码亚音，R-CTCSS）。需要将相应亚音设置为中继参数中的亚音，否则中继不会接收你的语音。</li>
</ul>
<p>设置完成后，你可以将其保存为频道，下次使用时，进入频道模式，切换到相应频道，对讲机会自动设置这些参数，你就不需要重复设置了。</p>
<p>如果对讲机有“消除尾音”或类似功能，你需要将其关闭，以便验证参数设置是否正确。操作完成后，找一个信号传播比较好的位置，例如楼顶天台，按一下发射键，然后立刻松开，如果能听到一声回响，说明信号能够打到中继。</p>
<h3 id="直频频率">直频频率</h3>
<p>直频频率，进入频率模式，直接录入频率数字即可使用。有时你设置中继频率之后，频差、亚音等设置会留在对讲机内，所以不要忘记将这些设置清除。</p>
<p>为操作方便，可在清除设置后，再把录入的频率保存成频道，下次使用时，直接切换到频道模式，对讲机会自动清除无关设置。</p>
<p>除自选频率外，还可以再保存一个438.500MHz，很多无线电爱好者会将其视为测试或应急频率。如果发生紧急情况，并在此频道呼叫，可能会有更多机让人听到。</p>
<h2 id="写频">写频</h2>
<p>很多对讲机支持软件写频，也就是在电脑上进行操作，把频率设置到对讲机里面。如果是没有屏幕的机器，那么你还不得不使用写频软件来设置频率。</p>
<p>因此在购买对讲机之前，你需要询问：</p>
<ol type="1">
<li>是否支持软件写频</li>
<li>是否需要专门的写频线，写频线是否需要驱动，驱动是否支持你的电脑系统</li>
<li>写频软件的下载方式，以及是否支持你的电脑系统</li>
<li>写频软件的操作方法</li>
</ol>
<h1 id="注意事项">注意事项</h1>
<h2 id="数量">数量</h2>
<p>对讲机至少要买两台才能使用，其品牌型号可以不一样，但是信号类型要一致（模拟机），而且频率一定要有交集。</p>
<h2 id="合法性">合法性</h2>
<p>如果没有合法呼号，不要随意与中继台通话，否则别人不会理你，或者会教育你去考证办证。</p>
<p>如果当地中继台允许小号，可与当地中继台进行联系，加入当地组织并申请小号。但是小号并不通用，有些中继也不承认小号，所以要注意通信范围。</p>
<h2 id="干扰">干扰</h2>
<p>同一频率只能有一个人说话，如果频道内有人正在说话，那么不要按发射键，否则会干扰现有通话。</p>
<p>在设置频率时，有些频率不要随意占用：</p>
<ol type="1">
<li>144～144.035MHz和145.8～146MHz</li>
<li>431.9～432.240MHz和435～438MHz</li>
<li>144.640MHz：很多无线电爱好者会当作定位频率（APRS）使用</li>
<li>438.500MHz：很多无线电爱好者会当作应急频率使用</li>
<li>当地或附近城市的中继台的频率</li>
<li>超出144～148MHz、430～440MHz范围的其他频率</li>
</ol>
<p>频率的影响范围通常是±25kHz（±0.025MHz），例如被要求不要占用438.500MHz，那么你不要在438.475~438.525MHz范围进行发射。</p>
<p>中继台通常会有频差，假如中继台频率439.000MHz，下差5MHz，那么439.000MHz与434.000MHz（439减5）附近±25kHz的频率都不要随意占用。</p>
<h2 id="私密性">私密性</h2>
<p>对讲机通话没有任何加密，即使不知道频率，其他人也很容易找到频率并进行偷听。因此在通话期间不要暴露隐私：</p>
<ul>
<li>给每位家庭成员起一个代号，使用代号通话。</li>
<li>不要谈论财产、联系方式、账号密码、精确位置等敏感信息。</li>
<li>在平时考虑给一些敏感事项起代号，而且确保第三者听不懂、猜不到，一旦遇到紧急情况，而且不得不提及敏感事项，使用代号来谈论。</li>
</ul>
<h2 id="覆盖范围">覆盖范围</h2>
<p>对讲机的覆盖范围并不是一个绝对的数字，主要取决于它的位置。简单来说，在楼房密集地方不如在开阔地，在地面不如在楼上，在屋内不如在窗户边，在窗户边不如在楼顶，在楼顶不如在更高的山顶。对于专业的业余无线电爱好者，配置特定的天线，只需一个瓦特，甚至可以从地球打到卫星。</p>
<p>对讲机要竖立使用，不要放倒，否则会影响传播。而且对讲机必须安装天线，否则不仅无法传播信号，还会把对讲机烧坏。</p>
<p>建议平时进行信号测试，有机会还可以考虑在相同位置、不同天气条件下进一步测试，了解哪种情况的传播效果比较好。</p>
<h2 id="充电">充电</h2>
<p>对讲机要定期充电，以免过度亏电，在发生紧急情况时无法使用。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>应急储备</tag>
        <tag>对讲机</tag>
      </tags>
  </entry>
  <entry>
    <title>学习反向思考</title>
    <url>/2023/03/12/reverse-thinking/</url>
    <content><![CDATA[<p>很多事情是反直觉的：你觉得可能是这样，但情况可能是另一个样子。本文用最近的几个例子来说明一下。</p>
<span id="more"></span>
<h2 id="说明">说明</h2>
<p>本文希望读者去掌握一种思维模式，所以着重于指出一种“可能性”，不代表观点正确或错误，正所谓“大胆思考，小心论证”。</p>
<h2 id="案例一居民存款大幅增加">案例一：居民存款大幅增加</h2>
<p>中国央行2023年1月份数据指出，当月人民币存款增加6.87万亿元，其中住户存款增加6.2万亿元，创历史同期新高。</p>
<p>居民存款大幅增加，是因为大家都挣到钱，收入提高了吗？很明显，经过疫情冲击，很多人收入下降，甚至失去收入，都不敢花钱了，所以大家都在储蓄，使得存款增加。</p>
<p>接下来，我们再稍微思考一下：只是不花钱，存款能大幅增加吗？</p>
<p>存款是怎么来的呢？挣钱了，把钱存下来，就有了存款。</p>
<p>然而存款只是财产的一种形式，如果把其他形式的资产变成存款，存款也是能增加的，例如抛售股票、赎回理财产品等。贷款套现也能增加存款，只是将来要把钱连同利息一起还回去而已。</p>
<h2 id="案例二平均工资提高">案例二：平均工资提高</h2>
<p>根据国家统计局发布的数据，2022年，全国城镇非私营单位就业人员年平均工资为114029元，比上年增加7192元，名义增长6.7%，增速比上年回落3个百分点，扣除价格因素实际增长4.6％。</p>
<p>平均工资提高，真的是因为大家收入提高了吗？为什么只有我拖了平均值后腿呢？</p>
<p>我们稍微思考一下，平均工资是怎样计算的。</p>
<p>假设有100个人，其中90个穷光蛋，每月收入1000块钱，剩下10个有钱人，每月收入100000元，那么他们的平均收入就是</p>
<p><span class="math display">\[ \frac{1000 \times 90 + 100000 \times
10}{100} = 10900 \]</span></p>
<p>假如这90个穷光蛋中有30人失业了，剩下的穷光蛋每月收入降低到900元，有钱人们虽然没丢掉工作，但是统统降了薪，收入降到了80000元，那么他们的平均收入就变成了</p>
<p><span class="math display">\[ \frac{900 \times (90 - 30) + 80000
\times 10}{100 - 30} = 12200 \]</span></p>
<p>你看，虽然大家都没挣到钱，但是大家的平均工资竟然提高了 <span
class="math inline">\(\frac{12200 - 10900}{10900} = 11.9\%\)</span>
！</p>
<h2 id="案例三国产新能源车畅销">案例三：国产新能源车畅销</h2>
<p>2022年，国产新能源汽车交付数量创下纪录，其中的头部品牌甚至被称为“新势力”。</p>
<p>我们去汽车网站上搜索一下“新势力”的代表，“蔚小理”（蔚来、小鹏、理想），可以发现这些品牌的汽车价格多在三四十万级别。</p>
<p>30万的车，5成首付、贷款两年的话，月供要超过6000元。加上房贷的话，实际月供甚至要超过上万元。这些昂贵的车也能畅销，是因为大家都有钱，或者敢贷款吗？</p>
<p>我们稍微思考一下，如果不是大家有钱了，而是大家没钱了呢？</p>
<p>假如我们为了装逼而买车，当然会挑豪华品牌，例如上百万的保时捷、玛莎拉蒂。没有那么多钱，所以才挑几十万的进口版的奥迪、奔驰、宝马。再没钱，就只好找稍微便宜一些的国产版，或者换雷克萨斯、凯迪拉克之类的二线豪华品牌了。再没钱，还可以二手车甚至带魂环的车。</p>
<p>近些年收入不好，买40多万的奔驰GLC，再加上每个月上千块的油钱，感觉稍微有点吃力，但是国产电车配置比奔驰高，开出去又有面，关键是比奔驰有性价比，为什么不买呢？</p>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>对汽车“价格战”的一点看法</title>
    <url>/2023/04/01/is-price-war-real/</url>
    <content><![CDATA[<p>今年3月份，从东风雪铁龙C6补贴9万开始，汽车市场仿佛开始了“价格战”。然而，汽车真的便宜了吗？</p>
<p><strong>本文纯属个人见解，与当下事件无关，如有雷同，纯属巧合。</strong></p>
<span id="more"></span>
<h2 id="关于雪铁龙降9万">关于雪铁龙降9万</h2>
<p>哇塞，优惠居然这么大！是真的吗？</p>
<p>是的，但是，如果你不熟悉汽车，可以去大街上留意一下：雪铁龙的车标是两个尖（类似︽符号），可是大街上有几辆带两个尖的车呢？在这些车里面，又有几辆是新车呢？</p>
<p>雪铁龙本来就是没什么人买的车（新车），再加上一下子降了最高9万（实际可能不到9万），可能是因为什么原因根本没卖出去的车。这种车不可能太多的，当然售完为止。其他法系车例如标致同理。</p>
<p>另外某些商家有一种操作方法，说什么东西大幅降价，当你过去买的时候，“卖没了，看看别的吧”，其实根本没卖过，只是一种引流策略而已。</p>
<p>后续：<span class="exturl" data-url="aHR0cHM6Ly9tLnlpY2FpLmNvbS9uZXdzLzEwMTc5OTY1My5odG1s">车主需全款买车，然而补贴一直没有到位<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="关于20万买奥迪">关于20万买奥迪</h2>
<p>奥迪给人的印象是豪车。如今豪车已经卖不动，居然用20万就能搞定？</p>
<p>当然了！但是，奥迪A3，加上做汽车金融操作。</p>
<p>奥迪A3是什么？是奥迪里面配置最低的车型，俗称“乞丐车”，跟一般人眼里的奥迪A6、A8完全不是一个档次，甚至不如同样容易遭歧视的奥迪A4（落地价大约30左右）。就算你把车屁股上的A3字样抠掉，再贴个quattro，稍有常识的人都会看出，这只是辆想装大款的乞丐A3。</p>
<p>汽车金融是什么？分期，贷款。由于贷款或分期，4S店能挣到提成，而全款挣不到提成，所以很多4S店会对全款买车的车主表示反感，甚至分期买车的最后给你举办个隆重的交车仪式，而全款买车的完事了直接让你滚蛋。然而选择贷款或分期，车辆名义上的价格下降了，但是会出现利息和各种杂七杂八而且不得不交的费用，而且因为汽车被抵押出去了，你手里没有绿本（机动车登记证书），所以他们想怎么要挟你，就能怎么要挟你，结果会导致实际花销比全款高。</p>
<p>想用20万搞定四个圈的A6 55
quattro（高配车型，落地大约55万）？还是去二手市场找找八手车吧！不想转那么多手？开出去随时可能抛锚的事故车，或者死过人的魂环车也是可以的！</p>
<h2 id="关于大幅优惠大幅让利">关于大幅优惠、大幅让利</h2>
<p>没买过车的，看到“终端优惠4万”，会觉得厂商让利很大。但是真的很大吗？</p>
<p>所以我们一定要先了解汽车的各种价格的概念：</p>
<ul>
<li>裸车价：裸车价是由4S店开出的价格，是汽车本身的价格。然而只买车，车是不能挂牌上路的，所以还需要一系列税费和手续费。</li>
<li>落地价：落地价是<strong>你的真实花销</strong>，落地价=裸车价+购置税+保险费用+各种其他费用。鉴于一般群众买不起豪车，如果你懒得计算，可以粗暴地认为落地价=裸车价+2～3万。</li>
<li>指导价：由厂商提出的售价，不是真实价格。</li>
<li>优惠：优惠是4S店在指导价基础上做出的优惠。</li>
</ul>
<p>需要注意的是，汽车的指导价是厂商提出的，本身就会虚高几万，而4S店平时就会把这几万给降下去，从来不会真的按指导价来卖车。在这个前提之下，他们提出的所谓“优惠”，也是在这个虚标的价格上做的优惠，不是在真实价格上的做的优惠，跟平时一模一样，所以实际上还是相当于没有优惠。</p>
<p>还需要注意三种情况：</p>
<ul>
<li>有的汽车真的降价了，但要么是杂牌车，要么是冷门车，再过几年连车厂都可能倒闭了，找周围懂车的人问一问，根本没几个人想买。</li>
<li>有的汽车真的降价了，但是同一型号有高中低配置版本之分，他们给低配降得多，中高配降得少或几乎不降。你以为捡到了便宜，却发现低配功能不够用，比方说连个倒车影像都没有，像那个传说中的3万块钱的五菱mini，甚至连空调都没有。这样的话，想省钱就得受罪，想不受罪的实际上根本没省几个钱。这也是商家的一种引流套路。</li>
<li>有的汽车真的降价了，而且低中高配都降价了，降得也不少。你以为捡到了便宜，但是，需要进行汽车金融操作，也就是按照厂商的要求进行贷款或分期才能享受优惠。表面上看省钱了，但是要交利息和各种费用，就算“免息”也会用其他形式收你的钱，所以实际上不仅不省钱，还要比全款买车多花不少钱。</li>
</ul>
<p>对于大众、本田这种根本不愁卖不出去的品牌，其实他们完全没有必要去降价。但是，为了不在“价格战”里吃亏，厂商可以做出一种优惠的感觉，通过调整指导价，然后再调整终端优惠和一系列“工时费”，让你以为便宜了不少，然而落地价还是那么多。如果你能回到过去，你会发现“价格战”前后落地价都是一个样子。</p>
<p>2022年因为疫情影响经济，出台了购置税减半的政策。那么当时买能省钱吗？并没有！只要4S店稍微做一些操作，就可以让你感觉到自己享受到了国家的优惠，然而落地价却一分都没少。</p>
<h2 id="所以">所以……</h2>
<p>需要买车的，该买就买，可以稍微等等出新款之前4S店便宜处理的旧款库存车，但是没必要特意等“价格战”，也没必要去费太大力气讲价；</p>
<p>不需要买车的，别因为出现所谓的“利好”政策，或者发生所谓的“价格战”就草率入场，也许车市有“崩”的迹象，但是车价并没有真的变便宜。</p>
]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
  </entry>
  <entry>
    <title>在Java中运行ES6代码</title>
    <url>/2023/05/10/javet/</url>
    <content><![CDATA[<p>Java自带Nashorn引擎，可以在Java程序中运行JavaScript代码，从而<a
href="/2022/06/08/dynamic-controller">实现可灵活配置动态接口</a>。然而Nashorn引擎只支持老旧的语法，不支持ES6或更新的东西，而且在较新的Java中也已停止支持，因此本文选择替代品<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhb2NjYW8vSmF2ZXQ=">Javet<i class="fa fa-external-link-alt"></i></span>。</p>
<p>Javet是一个能够整合Java与Node.js的库，使开发人员可以很方便地调用ES6的代码。</p>
<span id="more"></span>
<h2 id="引入javet">引入Javet</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhb2NjYW8vSmF2ZXQ=">官方仓库<i class="fa fa-external-link-alt"></i></span>指出了具体的方法。例如使用Maven时需要在pom.xml中加入：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Linux and Windows (x86_64) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.caoccao.javet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Linux (arm64) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.caoccao.javet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javet-linux-arm64<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Mac OS (x86_64 and arm64) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.caoccao.javet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javet-macos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="调用javascript代码">调用JavaScript代码</h2>
<h3 id="普通调用">普通调用</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">runJsCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JavetException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">V8Runtime</span> v8Runtime <span class="token operator">=</span> <span class="token class-name">V8Host</span><span class="token punctuation">.</span><span class="token function">getV8Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createV8Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">JavetProxyConverter</span> javetProxyConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavetProxyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        v8Runtime<span class="token punctuation">.</span><span class="token function">setConverter</span><span class="token punctuation">(</span>javetProxyConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// TODO 可在这里引入Java对象，以便作为js的全局变量使用</span>
        v8Runtime<span class="token punctuation">.</span><span class="token function">getGlobalObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"XXXUtil"</span><span class="token punctuation">,</span> xxxUtil<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">V8Value</span> val <span class="token operator">=</span> v8Runtime<span class="token punctuation">.</span><span class="token function">getExecutor</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token function">parseV8Value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">parseV8Value</span><span class="token punctuation">(</span><span class="token class-name">V8Value</span> val<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JavetException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueString</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueBigInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueBigInteger</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueBoolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueBoolean</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueDouble</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueDouble</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueInteger</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueLong</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueLong</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// TODO 根据需要进行处理</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueArray</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueObject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// TODO 根据需要进行处理</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueObject</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// TODO 根据需要进行处理</span>
    <span class="token keyword">return</span> val<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用时调用<code>runJsCode("js代码")</code>即可，返回值为Java对象。但由于JS的数组和Object灵活性较强，本程序仍返回Javet的对象，编码时应考虑根据实际需求进行处理。</p>
<h3 id="将对象转为json">将对象转为JSON</h3>
<p>如果用于JSON，例如<a
href="/2022/06/08/dynamic-controller">配置动态接口</a>，将上述代码返回的对象直接转成JSON，结果可能会出错，因此需要在转JSON之前做一些加工处理。</p>
<p>为便于处理JSON，下面引入了Hutool，因此需要在pom.xml中引入：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码的runJsCode不变，对parseV8Value进行修改，替换成下面的代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">parseV8Value</span><span class="token punctuation">(</span><span class="token class-name">V8Value</span> val<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JavetException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">V8Scope</span> v8Scope <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">getV8Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getV8Scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        v8Scope<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        val <span class="token operator">=</span> <span class="token function">parseV8ValueToBasic</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> v8Scope<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueString</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueBigInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueBigInteger</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueBoolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueBoolean</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueDouble</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Double</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueDouble</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 无穷大和NaN转JSON会报错，这里直接返回null</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">isInfinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> d<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> d<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueInteger</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueLong</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueLong</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueArray</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"TypeError"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueTypedArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueTypedArray</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"TypeError"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parseObj</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueObject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueObject</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"TypeError"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parseObj</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 其他类型无法转成JSON，直接返回null</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">V8Value</span> <span class="token function">parseV8ValueToBasic</span><span class="token punctuation">(</span><span class="token class-name">V8Value</span> val<span class="token punctuation">,</span> <span class="token class-name">V8Scope</span> v8Scope<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JavetException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueBigInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueBoolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueDouble</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueLong</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 处理js中Number与Java中Double的差异</span>
        <span class="token class-name">Long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">V8ValueLong</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> v8Scope<span class="token punctuation">.</span><span class="token function">createV8ValueNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">long</span> v <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;=</span> <span class="token number">9007199254740991L</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">9007199254740991L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> v8Scope<span class="token punctuation">.</span><span class="token function">createV8ValueDouble</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> val<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueProxy</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 将Java对象实例变成JS对象，进而方便转JSON</span>
        <span class="token class-name">V8ValueProxy</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V8ValueProxy</span><span class="token punctuation">)</span> val<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"getClass"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"notify"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"notifyAll"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"wait"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">V8ValueObject</span> v8ValueObject <span class="token operator">=</span> v8Scope<span class="token punctuation">.</span><span class="token function">createV8ValueObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span> clz <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invokeObject</span><span class="token punctuation">(</span><span class="token string">"getClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取对象的getter并进行调用</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> clz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> propertyName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">METHOD_PREFIX_IS</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">EXCLUDED_METHODS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>
                            <span class="token operator">&amp;&amp;</span> methodName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token constant">METHOD_PREFIX_IS</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        propertyName <span class="token operator">=</span> methodName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token constant">METHOD_PREFIX_IS</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">METHOD_PREFIX_IS</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span>
                                <span class="token operator">+</span> methodName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token constant">METHOD_PREFIX_IS</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">METHOD_PREFIX_GET</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">EXCLUDED_METHODS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>
                            <span class="token operator">&amp;&amp;</span> methodName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token constant">METHOD_PREFIX_GET</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        propertyName <span class="token operator">=</span> methodName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token constant">METHOD_PREFIX_GET</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">METHOD_PREFIX_GET</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span>
                                <span class="token operator">+</span> methodName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token constant">METHOD_PREFIX_GET</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">V8Value</span> newVal <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            v8Scope<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            newVal <span class="token operator">=</span> <span class="token function">parseV8ValueToBasic</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> v8Scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            v8ValueObject<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> v8ValueObject<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">V8ValueArray</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V8ValueArray</span><span class="token punctuation">)</span> val<span class="token punctuation">;</span>
        <span class="token comment">// 递归处理每个元素</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">V8Value</span> u <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">V8Value</span> v <span class="token operator">=</span> <span class="token function">parseV8ValueToBasic</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v8Scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueTypedArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">V8ValueTypedArray</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V8ValueTypedArray</span><span class="token punctuation">)</span> val<span class="token punctuation">;</span>
        <span class="token class-name">V8ValueArray</span> arr2 <span class="token operator">=</span> v8Scope<span class="token punctuation">.</span><span class="token function">createV8ValueArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 递归处理每个元素</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">V8Value</span> u <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">V8Value</span> v <span class="token operator">=</span> <span class="token function">parseV8ValueToBasic</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v8Scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> arr2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">V8ValueObject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">V8ValueObject</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V8ValueObject</span><span class="token punctuation">)</span> val<span class="token punctuation">;</span>
        <span class="token comment">// 递归处理每个元素</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> obj<span class="token punctuation">.</span><span class="token function">getOwnPropertyNameStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">V8Value</span> u <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">V8Value</span> v <span class="token operator">=</span> <span class="token function">parseV8ValueToBasic</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v8Scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                obj<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 其他类型（例如Function）无法转成JSON，直接返回null</span>
    <span class="token keyword">return</span> v8Scope<span class="token punctuation">.</span><span class="token function">createV8ValueNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码还有一些缺陷，例如Java对象不是VO类型的类，转换时候就会出问题，不过现在的代码对于转JSON这种需求来说够用了。</p>
<h2 id="docker报错处理">Docker报错处理</h2>
<p>如果将应用部署到Docker中，代码可能会无法正常执行：</p>
<pre class="line-numbers language-none"><code class="language-none">com.caoccao.javet.exceptions.JavetException: Javet library is not loaded because &lt;null&gt;
    at com.caoccao.javet.interop.JavetClassLoader.load(JavetClassLoader.java:93)
    at com.caoccao.javet.interop.V8Host.loadLibrary(V8Host.java:418)
    at com.caoccao.javet.interop.V8Host.&lt;init&gt;(V8Host.java:67)
    at com.caoccao.javet.interop.V8Host.&lt;init&gt;(V8Host.java:43)
    at com.caoccao.javet.interop.V8Host$V8InstanceHolder.&lt;clinit&gt;(V8Host.java:459)
    at com.caoccao.javet.interop.V8Host.getV8Instance(V8Host.java:119)
    ……
Caused by: java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at com.caoccao.javet.interop.JavetClassLoader.load(JavetClassLoader.java:88)
    ... 170 more
Caused by: com.caoccao.javet.exceptions.JavetException: Failed to read &#x2F;tmp&#x2F;javet&#x2F;1&#x2F;libjavet-v8-linux-x86_64.v.3.0.1.so
    at com.caoccao.javet.interop.loader.JavetLibLoader.load(JavetLibLoader.java:375)
    ... 175 more
Caused by: java.lang.UnsatisfiedLinkError: &#x2F;tmp&#x2F;javet&#x2F;1&#x2F;libjavet-v8-linux-x86_64.v.3.0.1.so: &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6: version &#96;GLIBC_2.33&#39; not found (required by &#x2F;tmp&#x2F;javet&#x2F;1&#x2F;libjavet-v8-linux-x86_64.v.3.0.1.so)
    at java.lang.ClassLoader$NativeLibrary.load(Native Method)
    at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1934)
    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1817)
    at java.lang.Runtime.load0(Runtime.java:810)
    at java.lang.System.load(System.java:1088)
    at com.caoccao.javet.interop.loader.JavetLibLoader.load(JavetLibLoader.java:360)
    ... 175 more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为选择了alpine或slim版本的映像，容器里面缺少glibc，因此需要将image换成完整版，例如<code>openjdk:8</code>。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Javet</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>中国用户如何注册中文维基百科账号，并且获得编辑权限</title>
    <url>/2023/06/20/wikipedia-account/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSGVscDolRTUlQTYlODIlRTQlQkQlOTUlRTglQUUlQkYlRTklOTclQUUlRTclQkIlQjQlRTUlOUYlQkElRTclOTklQkUlRTclQTclOTE=">中文维基百科提供了官方的操作教程<i class="fa fa-external-link-alt"></i></span>，但是教程出于多样性考虑，内容比较繁杂，而且对操作者的技术水平要求非常高，因此这里重新写一个简单可行的操作教程。</p>
<span id="more"></span>
<h2 id="前提条件">前提条件</h2>
<ol type="1">
<li>使用电脑操作</li>
<li>你的电脑安装了翻墙软件，而且只要启动翻墙软件，浏览器上就不需要再安装其他插件来翻墙</li>
</ol>
<p>如果你不知道如何翻墙，请先学习翻墙的操作方法。</p>
<p>如果你不想翻墙，也不想学习翻墙，你也可以直接访问<span class="exturl" data-url="aHR0cHM6Ly9xaXV3ZW4ud2lraS8=">求闻百科<i class="fa fa-external-link-alt"></i></span>（网址：qiuwen.wiki），该网站除了个别主题以外，其他内容与中文维基百科是基本一致的。</p>
<h2 id="操作步骤">操作步骤</h2>
<p><strong>请严格按照本教程步骤操作，教程中的每一步操作都不要省略，哪怕看起来没有任何意义：</strong></p>
<h3 id="一修改hosts">一、修改Hosts</h3>
<ol type="1">
<li>先开启翻墙模式，并确认翻墙成功。如果需要测试翻墙情况，请使用Google测试。</li>
<li>打开<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSGVscDolRTUlQTYlODIlRTQlQkQlOTUlRTglQUUlQkYlRTklOTclQUUlRTclQkIlQjQlRTUlOUYlQkElRTclOTklQkUlRTclQTclOTE=">中文维基百科的官方教程<i class="fa fa-external-link-alt"></i></span>，翻到“维基媒体服务器列表”章节，在表格中“text-lb”部分找到一个打绿勾的IP地址。</li>
<li>找到hosts文件，Windows系统一般位于<code>C:\Windows\System32\drivers\etc\hosts</code>，Linux或Mac系统则是用命令修改<code>/etc/hosts</code>。使用文本编辑器进行修改，在文件中加入以下内容：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">198.35.26.96 zh.wikipedia.org
198.35.26.96 login.wikimedia.org
198.35.26.96 meta.wikimedia.org
198.35.26.96 commons.wikimedia.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：第一个是wiki<code>p</code>edia，后面三个是wiki<code>m</code>edia，字母不一样。实际操作时，应当把<code>198.35.26.96</code>换成你刚才查到的IP地址。</p>
<ol start="4" type="1">
<li>修改完成后保存。</li>
</ol>
<h3 id="二注册账号">二、注册账号</h3>
<p>提前想好自己的用户名是什么，密码不要太复杂，邮箱也可以先忽略，申请权限的理由（见后文）也提前写好。当务之急是把账号注册出来，密码、邮箱和各种设置可以等事后挂梯子慢慢改。</p>
<ol type="1">
<li>让翻墙软件继续开启翻墙模式，浏览器地址栏手工输入<code>https://zh.wikipedia.org</code>，打开维基百科首页。</li>
<li>首页加载完成后，点击右上角的三个点图标，从弹出的菜单中点击“贡献”链接。进入贡献页面后，你应该能看到一个或两个大红框，显示“IP地址被封禁”，这表示你不能在翻墙的时候注册账号。假如没有“IP地址被封禁”的提示，这说明你运气好，可以直接注册账号，然后进入下面的“三、申请IP封禁豁免权”。</li>
<li>这时候，<strong>不要关闭维基百科的浏览器窗口和标签，也不要再打开新窗口，而且要确保后面操作迅速，不要拖拉</strong>。</li>
<li>关闭翻墙模式，然后回到维基百科网站，重新点击“贡献”菜单，你应该会发现，维基百科网站仍然能访问，而且IP地址变成了真实地址，大红框也消失了。</li>
<li>直接点击右上角的“创建账号”链接，输入账号信息，此时应该可以注册成功了。</li>
</ol>
<p>注意：</p>
<ol type="1">
<li>如果关闭翻墙模式后，浏览器提示“连接已重置”，说明墙已经监测到你在尝试登录维基百科，需要换个网络或者改天再试。</li>
<li>如果第二次进入贡献页面，发现IP被封禁的大红框未消失，而且IP地址是你的真实地址，不是翻墙节点的IP地址，那么需要换个网络再试。</li>
</ol>
<h3 id="三申请ip封禁豁免权">三、申请IP封禁豁免权</h3>
<p>注册成功之后，维基账号的操作还没结束，因为你挂上梯子之后，你可以看，但是不能编辑，所以要让管理员给你增加权限。</p>
<p>这时马上点击右上角的用户图标，在弹出的菜单中选择“留言”链接，系统会进入<code>讨论：</code>的页面。点击右侧的“添加话题”按钮，然后按照下面的格式进行申请。</p>
<ul>
<li>主题：<code>封禁申诉</code></li>
<li>描述：<code>&#123;&#123;unblock|我是中国大陆用户，需要使用翻墙软件来登录维基百科，但是翻墙之后账号被封禁无法编辑，按照维基里教程直连又非常不稳定，因此希望申请IP封禁豁免权限，以便翻墙编辑。&#125;&#125;</code></li>
</ul>
<p>注意请用自己的话重新编写理由，直接粘贴本文内容有可能被拒。代码正确的话，下方会显示一个蓝色的申诉框，框内会显示你的申请理由，这是你的代码的实际展示效果。</p>
<p>操作完成后，点击下面的“添加话题”按钮，系统会提交数据。管理员看到你的申请之后，就会帮你审批并且授权，在此之前你需要耐心等待。</p>
<p>提交申诉后，注册账号的流程就结束了，你也可以重新开翻墙软件了。</p>
<h2 id="注册后注意事项">注册后注意事项</h2>
<p>新手一定要注意以下内容，以免辛辛苦苦注册出来的账号被管理员给封号。</p>
<h3 id="关于账号权限">关于账号权限</h3>
<ol type="1">
<li>系统会自动取消不活跃用户的权限，当你失去这个权限之后，你挂梯子时又会被禁止编辑。系统的判断方法是距最后一次编辑时间满6个月，因此每6个月之内要至少做一笔编辑，内容随便。</li>
<li>系统会对新用户有一些限制，满50次编辑后解除，但是这50次最好是一些有意义的修改，例如修改词条里的错别字和语病，而且不要刷次数，否则容易被管理员封号。</li>
</ol>
<h3 id="关于词条编写">关于词条编写</h3>
<ol type="1">
<li>维基百科的规则非常复杂，且中文维基百科对新用户不太友好，因此不要贸然去写新词条。最好先熟悉现有词条的编写风格，学习代码的语法，并且了解一些基本的规则，然后再模仿一些主题相似的内容来编写词条。</li>
<li>不要直接复制粘贴其他网站内容，否则会被管理员直接删掉，反复粘贴还会被封号。不过你可以稍微改改用词，换换语气，用自己的话来改写，这样就不算“侵权”了。</li>
<li>不要改变代码里的简繁体，如果代码里原来用的是繁体字，你把它改成了简体，或者反过来把简体字改成了繁体字，你也会被警告或封号。</li>
<li>维基百科对配图的要求又多又复杂，因此在熟悉规则之前，不要给词条配图（以及音视频素材），以免图片被删、账号被封。</li>
</ol>
<h3 id="关于中国政治">关于中国政治</h3>
<p>如果你不清楚翻墙之后的政治生态，或者认为翻墙之后（或翻墙之前）看到的内容是错误的，或者看到某类政治观点后情绪激动，那么请不要编辑政治方面的词条，更不要情绪激动地与其他用户辩论。这种情况管理员见得太多了，所以他们可能会直接封你的号。</p>
<p>如果你坚信翻墙之后看到的政治内容都是错误的，而且要坚持修正维基百科的内容，那么你的修改基本上会被其他地区的用户给改回去，而且你也很快会被管理员封号。这种情况下可以考虑去<span class="exturl" data-url="aHR0cHM6Ly9xaXV3ZW4ud2lraS8=">求闻百科<i class="fa fa-external-link-alt"></i></span>注册账号，这个不用翻墙，里面的政治内容已经被修正，而且其他知识和维基百科是基本一致的。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>维基百科</tag>
      </tags>
  </entry>
  <entry>
    <title>如何学会摩尔斯电码</title>
    <url>/2023/07/09/morse-code/</url>
    <content><![CDATA[<p>摩尔斯电码看起来很难学，所以初学者如何才能学会摩尔斯电码呢？</p>
<span id="more"></span>
<h2 id="不要做以下事情">不要做以下事情！</h2>
<p>不要记点划!</p>
<figure>
<img src="code1.png" alt="不要看这个" />
<figcaption aria-hidden="true">不要看这个</figcaption>
</figure>
<p>不要记那个字母和点划的关系！</p>
<figure>
<img src="code2.png" alt="也不要看这个" />
<figcaption aria-hidden="true">也不要看这个</figcaption>
</figure>
<p>这些都不利于初学者学习，所以不要看，不要背。</p>
<p>那么以上两张图到底有什么用呢？</p>
<p>如果你不是初学者，已经学会摩尔斯电码，上面的东西可以帮你把生疏或遗忘的电码给捡起来。</p>
<h2 id="先从收听开始">先从收听开始</h2>
<p>先从收听开始，直接找个APP，速度调成30wpm，天天用摩尔斯电码给自己洗脑，洗一段时间之后你自然就记住了。</p>
<p>话是这样说，但是怎样洗脑才更科学呢？</p>
<p>这就要提到Koch方法了，事实上很多学习摩尔斯电码的APP或程序就是这样教学的：</p>
<ol type="1">
<li>第一次只用两个字母洗脑，靠听声音来辨识字母。</li>
<li>能做到几乎不犯错之后，就增加一个新的字母，三个字母一起洗。</li>
<li>当再一次洗到几乎不犯错的程度之后，继续增加一个字母，四个字母一起洗。</li>
<li>重复以上过程，直到把所有字母都“入脑、入心、入魂”为止。</li>
</ol>
<p>在学习过程中，不要去想有几个点和几个杠，要听声音嘀嗒的节奏，脑袋也要去记这个节奏，就像听音乐或学唱歌那样。</p>
<p>每个人的学习能力是不一样的，所以不要强求速成。假如坚持洗了好几天，电码都没洗进你的脑袋里，可以考虑换个学习软件，或者把速度降到20wpm。</p>
<p>推荐APP或网站：</p>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 25%" />
<col style="width: 24%" />
<col style="width: 14%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>形式</th>
<th>是否花钱</th>
<th>级别</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MorseMania</td>
<td>手机APP（Android/iOS）</td>
<td>是</td>
<td>入门/进阶</td>
<td></td>
</tr>
<tr class="even">
<td><span class="exturl" data-url="aHR0cHM6Ly9sY3dvLm5ldA==">lcwo<i class="fa fa-external-link-alt"></i></span></td>
<td>电脑网站</td>
<td>否</td>
<td>入门/进阶</td>
<td></td>
</tr>
<tr class="odd">
<td><span class="exturl" data-url="aHR0cDovL3d3dy5keGF0bGFzLmNvbS9Nb3JzZVJ1bm5lci8=">Morse Runner<i class="fa fa-external-link-alt"></i></span></td>
<td>电脑应用</td>
<td>否</td>
<td>提高</td>
<td>只有Windows版，Linux或Mac可用Wine运行</td>
</tr>
</tbody>
</table>
<h2 id="开始提高难度">开始提高难度</h2>
<p>学会抄收单个字母以后，你就可以继续加大难度了。</p>
<p>这时开始你就要开始两线作战，一方面是能抄清电码，另一方面要能理解电码内容，所以一方面要洗脑听字母，另一方面要找字典背单词。</p>
<p>先从稍微难一点的开始，两三个字母，这就包括单词、缩略语、Q简语，等等。对于无线电的缩略语和Q简语，不建议直接去背，太多了记不住。可以每天只记一两个，再刷一刷业余无线电的考试题，积少成多。有些词语还可以像“QTH”那样有意识地使用一下，这样就更容易记忆了。</p>
<p>当三个字母也“入脑、入心、入魂”之后，你可以继续加大难度，抄收呼号和长单词，学习通联模板，直到最后能够抄收完整通联内容为止。</p>
<h2 id="学习拍发">学习拍发</h2>
<p>当你学会收听之后，找到有经验的HAM学习一下电键的操作手法，之后你就自然而然地学会拍发了。</p>
<p>需要说明的是，学电键最好有人带，不建议自学，更不要盲目高速发报。手法不正确的话，不仅效率低，而且还容易伤手。</p>
<h2 id="最重要的是">最重要的是……</h2>
<p>带着对无线电的兴趣去学习，而且要坚持学习，别“三天打鱼，两天晒网”。</p>
]]></content>
      <categories>
        <category>业余无线电</category>
      </categories>
      <tags>
        <tag>摩尔斯电码</tag>
      </tags>
  </entry>
  <entry>
    <title>威诺VR-6600PRO使用感受</title>
    <url>/2023/09/20/vgc-6600-pro/</url>
    <content><![CDATA[<p>威诺VR-6600PRO是一款高端的国产车载电台。这里简单记录一些使用感受，供准备购买的人参考。</p>
<span id="more"></span>
<figure>
<img src="6600.png" alt="威诺VR-6600PRO，不含天馈" />
<figcaption aria-hidden="true">威诺VR-6600PRO，不含天馈</figcaption>
</figure>
<h2 id="基本参数">基本参数</h2>
<ul>
<li>核准码：2015FP4442</li>
<li>发射频率：纯业余段，即144-148MHz、430-440MHz</li>
<li>接收频率：
<ul>
<li>AM、FM电台：500kHz-1710kHz、76-108MHz</li>
<li>航空频率：108-136MHz</li>
<li>VHF频段（实测，与说明书不同）：144-148MHz</li>
<li>UHF频段（实测，与说明书不同）：430-440MHz</li>
<li>174-250MHz、300-400MHz</li>
<li>480-520MHz</li>
</ul></li>
<li>发射功率：5/20/50W</li>
</ul>
<h2 id="特点">特点</h2>
<ul>
<li>作为高端定位的车台，6600机器做工优良，质量可靠，皮实耐用。如果经常在外使用，不需要担心机器性能。</li>
<li>完全分体式设计，机头控制器、机身完全独立。如果在车上使用，机头、机身都可以灵活安装。</li>
<li>功能齐全，满足HAM需求。</li>
<li>中文菜单。</li>
<li>有正显屏（绿底黑字）和负显屏（黑底绿字）两种版本，推荐买负显屏版本。</li>
<li>支持双守，而且是真双守，如果两个频道同时呼叫，两边喇叭会一起响。</li>
</ul>
<p>如果你是HAM，不管是当作车台使用，还是放在家里当基地台使用，威诺6600都是不错的选择。</p>
<h2 id="瑕不掩瑜的小缺点">瑕不掩瑜的小缺点</h2>
<p>威诺6600还有一些小缺点：</p>
<ul>
<li>双守：双守的电台有个共同的毛病，如果你不在电台旁边，当有台友CQ时，你很难知道他是在哪个频率发的呼叫，结果还不如买两个单守的设备，只要放在两个不同位置，听声音方向就能知道是哪个频率发起的呼叫了。</li>
<li>写频：写频操作麻烦，电脑写频则需要买6600专用的数据线。</li>
<li>存储：两个信道的存储不是共用的，如果你要保存个频率，左右两边都要操作一遍。</li>
<li>音量旋钮：音量旋钮刻度不明显，容易看不清音量大小，在车上也不方便操作，可以考虑自己再贴个或者涂个显眼的刻度。</li>
</ul>
<h2 id="不具备的功能">不具备的功能</h2>
<p>6600并非万能，如果你恰好需要以下功能，那么不要买6600：</p>
<ul>
<li>蓝牙：没有蓝牙，所以不能蓝牙写频，也不能用无线手咪或方向盘上的指环PTT发射。</li>
<li>APRS定位：需要加装专门模块，而且体验还不如直接买个带APRS功能的车台。</li>
<li>同段中继：6600只支持跨段中继，即U转V或V转U，如果有同段中继需求，可以考虑买即时通D9000，不差钱的也可以买海能达PD980或专门的中继台。</li>
<li>457MHz接收：懂的都懂，而且一般人都会用手台收听吧？</li>
</ul>
<h2 id="买7500还是6600">买7500，还是6600？</h2>
<p>威诺还有另一款产品，VR-N7500，是一款没有屏幕和操作按钮的车台，全部功能都需要使用手机APP控制。</p>
<figure>
<img src="7500.png" alt="威诺VR-N7500，不含天馈" />
<figcaption aria-hidden="true">威诺VR-N7500，不含天馈</figcaption>
</figure>
<p>相比6600，7500有哪些优势呢？</p>
<ul>
<li>支持APRS，包括APRS信号收发，以及APRS地图展示（仅限通过无线电收发到的信号）。</li>
<li>全部APP控制，写频和切换频道都比较方便。</li>
<li>支持录音回放。未完全抄收时，可以像微信那样直接回放语音。</li>
<li>支持蓝牙通信，所以可以改用蓝牙手咪、蓝牙PTT。</li>
<li>支持网络频道。</li>
</ul>
<p>7500的APP叫做“HT”，支持Android和iOS系统，但Android功能更全，建议使用Android手机操作。</p>
<p>所以6600和7500选哪个好呢？两个都是不错的机器，选哪个就看你的功能需求和个人习惯了。如果需要APRS和蓝牙，又不介意没有屏幕，APP控制，那肯定是7500了。</p>
]]></content>
      <categories>
        <category>业余无线电</category>
      </categories>
      <tags>
        <tag>威诺</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 2019/2022安装OpenSSH服务端</title>
    <url>/2023/10/18/windows-2019-ssh/</url>
    <content><![CDATA[<p>由于有些情况下会安装失败，这里记录一个可用（2023年10月）的操作教程。</p>
<span id="more"></span>
<h2 id="为什么要安装openssh">为什么要安装OpenSSH</h2>
<p>远程登到Windows敲命令吗？当然不是了，这不Windows啊！</p>
<p>然而ssh除了可以敲命令，还可以传文件、建隧道。这样就可以靠ssh来补充一些不足了：</p>
<ul>
<li>Windows远程桌面上传下载文件速度很慢，而且连接不稳定。FTP需要安装和配置IIS，操作比较麻烦，而且不安全。而SSH容易安装，传文件既快又稳定，而且默认情况下需要本机用户认证才能登录，保证了安全性。</li>
<li>如果你熟悉ssh隧道的用法，可以利用ssh来处理Windows的部分端口映射问题，例如将Windows服务器里的端口映射到本地。</li>
</ul>
<h2
id="先尝试安装自带的openssh不推荐">先尝试安装自带的OpenSSH（不推荐）</h2>
<p>打开PowerShell，输入（大小写无所谓，下同）：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Add-WindowsCapability</span> <span class="token operator">-</span>Online <span class="token operator">-</span>Name OpenSSH<span class="token punctuation">.</span>Server~~~~0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果报错，直接看本文最后面的内容。如果没报错，继续执行：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-Service</span> sshd <span class="token operator">-</span>StartupType Automatic
<span class="token function">Set-Service</span> ssh-agent <span class="token operator">-</span>StartupType Automatic

<span class="token function">Start-Service</span> sshd
<span class="token function">Start-Service</span> ssh-agent

<span class="token comment"># 检查SSH服务是否正常启动</span>
<span class="token function">Get-Service</span> <span class="token operator">-</span>Name <span class="token operator">*</span>ssh* <span class="token punctuation">|</span> <span class="token function">select</span> DisplayName<span class="token punctuation">,</span> Status<span class="token punctuation">,</span> StartType
<span class="token comment"># 检查防火墙规则，如果未放行，需要到“高级安全Windows防火墙”中放行22端口</span>
<span class="token function">Get-NetFirewallRule</span> <span class="token operator">-</span>Name <span class="token operator">*</span>SSH*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="如果安装失败了推荐">如果安装失败了（推荐）</h2>
<p>有时候Windows
2019安装OpenSSH会出错，而且无论如何都会失败。遇到这种情况，不要气馁，也没必要浪费时间去排查原因，直接去GitHub上下载个新版本就可以了。</p>
<p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvV2luMzItT3BlblNTSC9yZWxlYXNlcw==">https://github.com/PowerShell/Win32-OpenSSH/releases<i class="fa fa-external-link-alt"></i></span></p>
<p>安装完成后记得在“服务”中将SSH设置为自动启动，并且在“高级安全Windows防火墙”的“入站规则”中开放服务器的22端口。</p>
<h2 id="其他配置">其他配置</h2>
<h3 id="防火墙规则">防火墙规则</h3>
<p>除了在“高级安全Windows防火墙”配置，也可以使用以下PowerShell命令来添加规则：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-NetFirewallRule</span> <span class="token operator">-</span>Name <span class="token string">'OpenSSH-Server-In-TCP'</span> <span class="token operator">-</span>DisplayName <span class="token string">'OpenSSH Server (sshd)'</span> <span class="token operator">-</span>Enabled True <span class="token operator">-</span>Direction Inbound <span class="token operator">-</span>Protocol TCP <span class="token operator">-</span>Action Allow <span class="token operator">-</span>LocalPort 22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="允许免密公钥登录">允许免密（公钥）登录</h3>
<p>修改<code>C:\ProgramData\ssh\sshd_config</code>文件，找到下面两行内容</p>
<pre class="line-numbers language-none"><code class="language-none">Match Group administrators
       AuthorizedKeysFile __PROGRAMDATA__&#x2F;ssh&#x2F;administrators_authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>把这两行删掉，或者用<code>#</code>注释掉。</p>
<p>再创建<code>C:\Users\你的用户名\.ssh\authorized_keys</code>文件，将你的电脑的公钥写到里面，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-rsa AAAAB3...... 你的名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>保存，之后就可以直接用key登录服务器了。</p>
<h3 id="默认启动powershell">默认启动PowerShell</h3>
<p>登录进入服务器后，默认启动的是cmd。如果想换成PowerShell，可以修改注册表，或在PowerShell中输入以下命令：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SOFTWARE\OpenSSH"</span> <span class="token operator">-</span>Name DefaultShell <span class="token operator">-</span>Value <span class="token string">"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</span> <span class="token operator">-</span>PropertyType String <span class="token operator">-</span>Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="参见">参见</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mtc2VydmVyL2FkbWluaXN0cmF0aW9uL29wZW5zc2gvb3BlbnNzaF9zZXJ2ZXJfY29uZmlndXJhdGlvbg==">OpenSSH
Server configuration for Windows Server and Windows<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>高性价比FM收音机——宝峰UV-5R与泉盛UV-K5</title>
    <url>/2023/11/04/uv5r-uvk5-radio/</url>
    <content><![CDATA[<p>宝峰UV-5R与泉盛UV-K5不都是网红对讲机吗？</p>
<p>没错，但其实也是两款高性价比的FM收音机。某些情况下，使用体验甚至可以比得上真正的收音机。</p>
<span id="more"></span>
<h2 id="两个机器的共同点">两个机器的共同点</h2>
<ul>
<li>优点
<ol type="1">
<li>价格便宜，才几十块钱。</li>
<li>如果你知道广播频率，可以直接用数字键输入。</li>
<li>如果你的上衣有口袋或类似的缝口，可以像保安一样把对讲机别在身上，开外放时候就不需要用手去拿着机器了。而且，因为它本来是个对讲机，所以别在身上的时候，喇叭发出的声音方向是朝向你的。</li>
</ol></li>
<li>缺点
<ol type="1">
<li>对讲机会优先接收对讲的信号。你可以事先把两个对讲频率调到一个没人用的频率上面。但是，如果周围有强信号干扰，这两个手台就会经常退出收音机模式。</li>
<li>音质不如专业收音机。当然，如果你不是专业的广播爱好者，你可能不会在乎这一点。</li>
<li>没有短波、中波和长波频段。如果你听这些特殊频段，还是买收音机去吧。</li>
<li>一般耳机无法使用，如果不想开外放，需要买特殊的K头耳机。</li>
</ol></li>
</ul>
<h2 id="宝峰uv-5r作为收音机的优缺点">宝峰UV-5R作为收音机的优缺点</h2>
<ul>
<li>优点
<ol type="1">
<li>操作方便，拧一下旋钮，按一下侧面的红色按钮，就进入收音机模式了。</li>
<li>搜台方便，如果不知道频率，按下*就自动给你切换到下一个台了。</li>
</ol></li>
<li>缺点
<ol type="1">
<li>UV-5R不支持保存频道。如果你经常听多个固定的广播台，换台可能就麻烦一些了。</li>
</ol></li>
</ul>
<h2 id="泉盛uv-k5作为收音机的优缺点">泉盛UV-K5作为收音机的优缺点</h2>
<ul>
<li>优点
<ol type="1">
<li>可以保存频道。如果有多个常听的频道，可以切换成频道模式，再用上下键来切换。</li>
<li>支持自动搜台并保存成频道，先按F再按2即可。</li>
</ol></li>
<li>缺点
<ol type="1">
<li>进入收音机模式需要分两步，先按F再按0。如果想直接用侧面的按钮当收音机按钮，你还需要弄个对讲机写频线（K头），还要在电脑上安装专门的软件去调整，如果不是业余无线电爱好者，实在不值得折腾。</li>
<li>搜下一个台也得分两步，先按F再按3。</li>
</ol></li>
</ul>
<h2 id="其他问题">其他问题</h2>
<p>宝峰UV-5R和泉盛UV-K5都是大功率对讲机，应当考取业余无线电台操作证书，而且给对讲机办理无线电台执照，才能合法使用。虽然拿着对讲机不像架短波电台那样容易被好事者举报，但是最好还是合法使用。</p>
<h2 id="结论">结论</h2>
<del>
所以拿哪个当收音机呢？当然是几个机器都买一遍了！顺便还可以入业余无线电的坑，走向无限垫之路。
</del>
]]></content>
      <categories>
        <category>业余无线电</category>
      </categories>
      <tags>
        <tag>对讲机</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解业余电台执照的使用范围</title>
    <url>/2024/01/16/radio-license-range/</url>
    <content><![CDATA[<p>异地使用、通信范围，这些概念太弯弯绕了，加上不同省份小执照格式还不一样，怎样才容易理解呢？直接看案例！</p>
<span id="more"></span>
<h2 id="最新情况2024-3">最新情况（2024-3）</h2>
<p>小执照要像大执照一样统一样式，所以就不存在这个问题了。</p>
<h2 id="旧文">旧文</h2>
<hr />
<pre class="line-numbers language-none"><code class="language-none">使用范围：全国
通信范围：省内
台站地址：山东省济南市市中区经十一路45号1-4楼  鲁A14514<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以在全国使用，只能与山东省内通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">使用范围：全国
通信范围：省际或涉外
台站地址：山东省济南市市中区经十一路45号1-4楼  鲁A14514<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>无限制，可以全国使用，并且可全国通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">通信范围：省内
台站地址：山东省济南市市中区经十一路45号1-4楼  鲁A14514<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只能在台站地址（家内或车内）使用，并且只能与省内通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">通信范围：省际或涉外
台站地址：山东省济南市市中区经十一路45号1-4楼  鲁A14514<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只能在台站地址（家内或车内）使用，但是可全国通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">通信范围：省内
台站地址：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以全国使用，但只能与省内通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">通信范围：省际或涉外
台站地址：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>无限制，可以全国使用，并且可全国通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">通信范围：省内
台站地址：山东省<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以在山东省使用，并且只能与省内通联</p>
<hr />
<pre class="line-numbers language-none"><code class="language-none">通信范围：省际或涉外
台站地址：全国<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>无限制，可以全国使用，并且可全国通联</p>
<h2 id="参见">参见</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS5oYW1jcS5jbi9kLzk1OA==">https://forum.hamcq.cn/d/958<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>业余无线电</category>
      </categories>
      <tags>
        <tag>执照</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统中给Docker开启IPv6</title>
    <url>/2024/02/01/docker-ipv6/</url>
    <content><![CDATA[<p>鉴于网上的教程太多，而且很多是旧资料，并且官网的资料也是既不清晰又不准确，因此这里记录一个简单可行（2024年2月）的操作步骤。</p>
<span id="more"></span>
<h2 id="本教程前置条件">本教程前置条件</h2>
<ol type="1">
<li>Linux系统</li>
<li>服务器有固定IPv6地址，而且进行了正确配置。</li>
<li>单节点</li>
</ol>
<h2 id="一查询服务器的ip段">一、查询服务器的IP段</h2>
<p>使用<code>ip addr</code>或<code>ifconfig</code>命令查询一下服务器的IPv6地址段：</p>
<pre class="line-numbers language-none"><code class="language-none"># ip addr 
...
2:  eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
    link&#x2F;ether f2:3c:92:24:24:c2 brd ff:ff:ff:ff:ff:ff
    inet ***.***.***.***&#x2F;24 brd ***.***.***.*** scope global eth0
       valid_lft forever preferred_lft forever
    inet6 2400:1234::bbbb:cccc:dddd:eeee:ffff&#x2F;64 scope global dynamic mngtmpaddr noprefixroute
       valid_lft 5117sec preferred_lft 1517sec
    inet6 fe80:1234:aaaa:bbbb:cccc:dddd:eeee:ffff&#x2F;64 scope link
       valid_lft forever preferred_lft forever
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从上面可知，服务器的IP地址是<code>2400:1234::bbbb:cccc:dddd:eeee:ffff</code>，掩码64位，所以IP段就应该是<code>2400:1234:0:bbbb::/64</code></p>
<h2 id="二配置docker开启ipv6">二、配置Docker开启IPv6</h2>
<p>编辑<code>/etc/docker/deamon.json</code>文件：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"ipv6"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"fixed-cidr-v6"</span><span class="token operator">:</span> <span class="token string">"2400:1234:0:bbbb::/64"</span><span class="token punctuation">,</span>
    <span class="token property">"experimental"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"ip6tables"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>fixed-cidr-v6</code>部分替换成你的服务器的IP段。</p>
<p>重启Docker，重启完成后输入<code>docker network inspect bridge</code>，在输出内容中找到<code>EnableIPv6</code>，如果它的值是true，说明Docker已开启IPv6。</p>
<h2 id="三使容器启用ipv6">三、使容器启用IPv6</h2>
<h3 id="docker-run模式">docker run模式</h3>
<p>创建一个支持IPv6的网络：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create <span class="token parameter variable">--ipv6</span> <span class="token parameter variable">--subnet</span><span class="token operator">=</span><span class="token string">"fc00:0:0:1::/64"</span> mynet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中<code>fc00:0:0:1::/64</code>也可以换成其他内网网段。</p>
<p>删掉现有容器，然后重新创建容器，并使用<code>--network</code>参数指定网络，例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> xxxx <span class="token parameter variable">-p</span> xxxx <span class="token parameter variable">--network</span> mynet xxxx/xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>容器启动成功后，使用docker
inspect查看容器信息，如果其中的<code>GlobalIPv6Address</code>出现IPv6地址说明启用成功。</p>
<h3 id="docker-compose模式">docker-compose模式</h3>
<p>修改docker-compose.yaml配置文件，在最后面增加（如果已有类似内容，请根据实际情况调整）：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable_ipv6</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> fc00<span class="token punctuation">:</span>0<span class="token punctuation">:</span>0<span class="token punctuation">:</span>1<span class="token punctuation">:</span><span class="token punctuation">:</span>/64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>删除现有容器，然后使用<code>docker network ls</code>和<code>docker network rm xxx</code>删除compose创建的网络。容器和网络删除完成后，使用<code>docker compose up -d</code>来重新创建容器。</p>
<p>如果在<code>docker compose up -d</code>时报错，提示<code>pool overlaps with other one on this address space</code>，说明你忘记删除network了，手工删掉即可。</p>
<p>容器启动成功后，使用docker
inspect查看容器信息，如果其中的<code>GlobalIPv6Address</code>出现IPv6地址说明启用成功。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>如何有效地找客服反馈问题</title>
    <url>/2023/12/21/report-issues-from-users/</url>
    <content><![CDATA[<p>用正确的方法反馈问题，才能让客服更好地帮你解决问题。我们以打软件系统的客服为例，讲一讲打电话的注意事项。</p>
<span id="more"></span>
<h2 id="假设对方什么都不懂">假设对方什么都不懂</h2>
<p>客服在上岗之前，会做过基本的业务培训，能够处理一些常见问题，但他们不是技术或研发人员，所以不可能100%了解系统运作原理。</p>
<p>软件内部结构是很复杂的，需要团队分工协作开发。即使你能找到直接参与开发的程序员，这根“救命稻草”也不见得接触过你所用的功能。</p>
<p>所以反馈问题时不要假设对方什么都懂，特别是如果他们反问你问题了，该配合的还是要配合，该提供的信息还是要提供，这样他们才能知道下一步如何帮忙。</p>
<h2 id="先讲问题">先讲问题</h2>
<p>无论是打电话、发邮件还是填写问题反馈页面，务必直入主题，说清自己的诉求是什么。找人办事，你总得让对方知道你想办什么事，对吧。</p>
<h3 id="正面案例">正面案例</h3>
<ul>
<li>“我在使用XXX功能的时候，点击保存按钮，系统出现YYYYYY错误的提示信息”</li>
</ul>
<p>这样的话，接电话那个人就会往XXX功能方向思考。如果他不懂XXX功能方面的知识，就可以去找懂XXX的同事来帮忙了。</p>
<h3 id="反面教材找你们领导">反面教材：“找你们领导”</h3>
<p>先说问题好不好？如果问题真严重到需要找领导的程度，接电话的人也好知道找哪方面的领导。否则的话，就算把国家领导人叫过来，他连电脑屏幕上的“NullPointerException”都不知道是什么意思，怎么帮你解决呢？</p>
<h3 id="反面教材讲长篇故事">反面教材：讲长篇故事</h3>
<p>交待事情背景、操作步骤之类的事情没问题，可是不要太啰嗦。</p>
<p>如果讲了十分钟故事，结果客服发现你的问题是常见问题，一句话就能解决，那么你的心理阴影面积和电话费都是多少？</p>
<h2 id="正确地描述问题">正确地描述问题</h2>
<h3 id="精确地描述问题">精确地描述问题</h3>
<ol type="1">
<li>问题的具体现象是什么？</li>
</ol>
<ul>
<li>是出现了错误信息，还是一片空白？</li>
<li>如果错误信息，是系统给出的错误提示，还是产生了不正确的数据？</li>
<li>错误信息的内容是什么？</li>
<li>……</li>
</ul>
<ol start="2" type="1">
<li>错误如何产生的？</li>
</ol>
<ul>
<li>你做了什么操作？点了什么按钮？输入了什么数据？</li>
<li>其他情况出不出错？</li>
<li>……</li>
</ul>
<p>精确地描述，客服和技术人员就能精确定位，节约时间。</p>
<h4 id="反面教材系统不好用">反面教材：“系统不好用”</h4>
<p>系统那么大，哪个地方不好用？怎么个不好用法？您不说，我们怎么满足您的需求？</p>
<p>一些好的案例：</p>
<ul>
<li>“XXX功能经常转圈，每次都等很长时间才能进去”</li>
<li>“XXX功能，填写AAA数据时，需要经常去点YYY菜单到ZZZ页面查询，建议把两个页面放在一起”</li>
<li>“XXX按钮需要一个一个地点，建议做一个批量操作功能”</li>
</ul>
<p>这样技术人员才有机会把你觉得不好用的地方变得好用。</p>
<h4 id="反面教材系统进不去">反面教材：“系统进不去”</h4>
<p>怎么进不去呢？可能性太多了：</p>
<ul>
<li>你的电脑断网，网站进不去了</li>
<li>你的账号被锁定，没有操作权限了</li>
<li>你的电脑网络不稳定，点击菜单之后加载缓慢</li>
<li>网站的服务器不稳定，点击菜单之后加载缓慢</li>
<li>网站的服务器出现故障，功能发生异常</li>
</ul>
<p>你看，只说“进不去”三个字的话，客服和技术人员就需要排查每一种可能性。然而，如果你说“系统进不去，提示‘无法显示此页，确保地址正确，使用搜索引擎查找页面……’”或者“XXX功能进不去，一直转圈，别的功能没毛病”，客服就能很快知道该从哪些方面下手解决问题。</p>
<h3 id="尽可能提供详细信息">尽可能提供详细信息</h3>
<ul>
<li>你处理的是哪种业务？大约什么时间开始办理的？</li>
<li>你的账号，或者你代表的组织？</li>
<li>提示错误，错误的截图？</li>
<li>你做过哪些操作？</li>
<li>你有没有自己尝试解决问题？如果有，你又做了哪些操作？</li>
<li>你希望把业务处理成哪种状态？通过还是撤销？</li>
</ul>
<p>提供详细的信息，可以让技术人员更方便地提取数据、查找出处，节约时间。</p>
<h2 id="着急要明确地说出来">着急，要明确地说出来</h2>
<p>如果事情紧迫，反馈问题的时候一定要强调着急。如果问题要紧，但客服解决不了，他们会去找开发人员。然而搞IT的人往往都很忙，你不明确告诉他们着急，他们可能就优先忙自己事情了。</p>
<p>如果问题不能立马解决，最好隔一段时间催着问一下进展，以免他们忘了。</p>
<h3 id="典型反例贬损对方">典型反例：贬损对方</h3>
<p>客服与你无冤无仇，你给客服施加压力，目的应该是促进他们尽快解决问题。可是，如果你乱说话，甚至爆粗口，拿客服当出气筒，把客服或开发人员惹得心情不好了，谁还愿意帮你解决问题呢？</p>
<h2 id="笑一笑">笑一笑</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1pM2RxQlR0aE1STQ==">河南大叔与阿里巴巴客服之间的爆笑对话<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1XVlduQmJrWk5ocw==">电信客服爆笑对骂工号9527超搞笑<i class="fa fa-external-link-alt"></i></span>（粗口）</li>
</ul>
]]></content>
      <categories>
        <category>一点人生的经验</category>
      </categories>
      <tags>
        <tag>沟通</tag>
      </tags>
  </entry>
  <entry>
    <title>海能达避坑指南</title>
    <url>/2024/03/15/hytera/</url>
    <content><![CDATA[<p>海能达是高端的国产对讲机，质量上乘但价格昂贵，和摩托罗拉、八重洲一样都适合装逼，所以某些有财力的台友会考虑入坑。今天正好3·15，为保障消费者权益，所以请海能达消费者注意以下事项……</p>
<span id="more"></span>
<figure>
<img src="ptc760.png"
alt="这个手机比iPhone还贵，所以哪位土豪能帮忙测一下，这机器玩原神卡不卡" />
<figcaption
aria-hidden="true">这个手机比iPhone还贵，所以哪位土豪能帮忙测一下，这机器玩原神卡不卡</figcaption>
</figure>
<h2 id="注意核准问题">注意核准问题</h2>
<p>海能达的目标客户不是普通玩家，也不是专业的业余无线电爱好者，其设备大部分为专业用途，例如公安、地铁之类的，因此很多设备并没有业余核准，而工信部在<span class="exturl" data-url="aHR0cHM6Ly93d3cubWlpdC5nb3YuY24vamdzai93Z2ova3B6cy9hcnQvMjAyMi9hcnRfYzFmZmQzYzQ3ZTNmNDU1ZGFkMzgyNDY1NzkwOTIxMzYuaHRtbA==">关于申请设置、使用业余无线电台所用无线电发射设备相关事宜的说明<i class="fa fa-external-link-alt"></i></span>中已经明确，不得使用不含业余频率核准的设备申请执照，也不能通过改频段的形式来走自制、改装流程，因此海能达的很多设备是无法合法（业余）使用的。</p>
<p>例如，HP780
U1的核准码是2019FP5045，虽然机器能收发U段业余频率，而且设备有核准码，也有核准频率，但核准范围不含业余频率，所以不能通过验机，办不了业余执照。</p>
<h2 id="注意版本">注意版本</h2>
<p>海能达的设备有很多版本，例如HP780有U1、U3等版本，U1的频率范围包含业余频率，但是U3是350M的，不含业余频率，买了也无法当业余机使用。</p>
<p>即使是HP780
U1，也有很多版本，硬件版本、固件版本，都是不一样的，例如有的不支持蓝牙写频。这导致这些设备功能不同，配套软件也不通用，而且海能达很难从网上找到写频软件，即使找到了，也可能无法适配你的设备。</p>
<p>因此在购买之前需要了解一下设备型号和版本，买之前向商家问清楚，并确认是否提供配套的软件。</p>
<h2 id="去正规渠道购买">去正规渠道购买</h2>
<p>海能达的设备并不像其他机器那样卖得广泛，需要去专门的经销商买，然后经销商进行授权，你才能获得售后服务支持。就像最重要的写频，其他手台完全可以手置频，而海能达的设备通常需要用写频软件才能完整地把参数设置好，并且这东西只有经销商有，网上搜索不到，买的时候一定记得索要。</p>
<p>海能达的某些机器太贵了，贵到会让人想去找一个性价比更高的方式购买，例如价格更低的商家，或者咸鱼。所以换个地方买呢？</p>
<p>换地方买当然可以，我们分两种情况：</p>
<ul>
<li>去店铺买新机：记得多找几家，看一下平均水平，而且要注意店铺信誉。如果比平均价低太多，要打听清楚原因，例如他们卖的是旧版本机器，功能有缺失，不能升级了。如果价格低于平均值，但是功能还多，那可能是改装的假货了。</li>
<li>去咸鱼买二手：不推荐去咸鱼买二手，因为不光海能达，其他东西也容易买到假货。而且就算是真货，如果卖家没有写频软件，你怎么要呢？打客服吗？要知道客服其实也只是帮你去找到原机主购买时的那个经销商而已。</li>
</ul>
<p>买二手还要注意个问题，海能达机器可以设置开机密码，也可以设置读写频密码，所以买之前要问清是否给机器上密码了，有密码的先把密码去掉。</p>
]]></content>
      <categories>
        <category>业余无线电</category>
      </categories>
      <tags>
        <tag>海能达</tag>
      </tags>
  </entry>
  <entry>
    <title>海能达写频的一些问题</title>
    <url>/2024/03/16/hytera-2/</url>
    <content><![CDATA[<p>记录写频时遇到的一些问题和处理方式。</p>
<span id="more"></span>
<h2 id="去哪里下载写频软件app">去哪里下载写频软件/APP</h2>
<p>海能达的写频软件在网上找不到，而且官网也不提供下载，那么去哪里找呢？</p>
<p>如果你在正规渠道购买的设备，商家会给你发送配套的写频软件，如果没有，直接找他们索要即可。</p>
<p>如果你买的二手，而且原机主也没有给你提供写频软件，那么怎么找呢？给海能达售后4008307020打电话，他们会告诉你找哪个供应商。</p>
<p>海能达的售后只在工作日的工作时间上班，所以不能像业余无线电一样在业余时间通联。</p>
<p>拿到写频软件、APP和授权码之后，记得做备份，免得下次找不到还要打电话。</p>
<p>另外不建议找其他台友要软件，因为软件不通用，除非同一个地方买的，别人的拿来不一定能用。</p>
<h2 id="数据版本不匹配">数据版本不匹配</h2>
<p>出现这个问题是因为写频软件和机器版本不一致，无法读写频。</p>
<p>能出现写频软件和机器不一致，说明你的软件是从网上找的，或者找其他台友要的。这种情况下，你需要参照前文，重新找买机器时候的供应商索要软件。</p>
<h2 id="读频时找不到端口">读频时找不到端口</h2>
<p>在给海能达G32/G36写频时遇到了一个问题，写频软件无法识别到端口，在“设备管理器”中也发现有个设备异常的“USB
Serial”，重新安装写频软件和串口驱动仍然不能解决问题。</p>
<p>问题来了，安装写频软件时候，写频软件不是把配套驱动给安装上了吗？</p>
<p>是的，他们安装了驱动，但是装错了。他们带的是PL23XX驱动，结果碰到的机器是CH341，所以重新装个<span class="exturl" data-url="aHR0cHM6Ly93d3cud2NoLmNuL2Rvd25sb2Fkcy9DSDM0MVNFUl9FWEUuaHRtbA==">CH341驱动<i class="fa fa-external-link-alt"></i></span>就好了。</p>
<p>如果你碰到了类似问题，可以装个驱动精灵，让它看一下到底应该装哪个驱动。</p>
]]></content>
      <categories>
        <category>业余无线电</category>
      </categories>
      <tags>
        <tag>海能达</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.x迁移至openEuler 22.03 SP3</title>
    <url>/2024/04/24/centos7-to-openeuler/</url>
    <content><![CDATA[<p>CentOS
7即将停止支持，如果系统同时又有信创要求，可考虑升级为华为的openEuler系统。</p>
<p>因为官方升级工具有很多隐蔽的错误，而且不能平稳升级，所以本教程不使用官方的升级工具，而是直接使用命令升级。</p>
<span id="more"></span>
<p>从CentOS
7直接升级到最新版openEuler会出现兼容性问题，因此，为保证平稳升级，升级要分两步进行，第一步是将CentOS
7升级到较旧的openEuler
20.03，升级成功后，再将旧版的openEuler升级到最新版本。</p>
<h2 id="升级流程">升级流程</h2>
<h3 id="一centos-7-升-openeuler-20.03">一、CentOS 7 升 openEuler
20.03</h3>
<p>原始来源：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDg0NzAzNzk=">从Centos-7迁移到(华为欧拉系统)openEuler-20.03-LTS-SP3的教程<i class="fa fa-external-link-alt"></i></span>，有改动。</p>
<p><strong>生产环境先进行备份，如升级失败，有可能需要重装系统！</strong></p>
<p>检查本机是否安装了桌面环境，例如GNOME，如果有，需要先将其卸载。</p>
<p>检查本机是否能访问网络，如果没有网，需要先开策略联网：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> repo.huaweicloud.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>下面默认全程使用root账户操作。如不是root，可使用su或sudo
su切换到root账号。</strong></p>
<p>直接粘贴以下命令。为保证每条命令都被执行，每次粘贴之后务必按一下回车：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> epel-release
yum update <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> dnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>确认无误后reboot重启。</p>
<p>重启完成后，继续粘贴以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> /etc/yum.repos.d/ /etc/yum.repos.d.bak/
dnf remove epel-release <span class="token parameter variable">-y</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/yum.repos.d/*

<span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> centos-<span class="token variable">)</span></span>
<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> https://repo.openeuler.org/openEuler-20.03-LTS-SP3/OS/x86_64/Packages/openEuler-release-20.03LTS_SP3-52.oe1.x86_64.rpm
<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> https://repo.openeuler.org/openEuler-20.03-LTS-SP3/OS/x86_64/Packages/openEuler-repos-1.0-3.1.oe1.x86_64.rpm
<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> https://repo.openeuler.org/openEuler-20.03-LTS-SP3/OS/x86_64/Packages/openEuler-gpg-keys-1.0-3.1.oe1.x86_64.rpm
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/repo.openeuler.org/repo.huaweicloud.com\/openeuler/g'</span> /etc/yum.repos.d/openEuler.repo
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/metalink=/#metalink=/g'</span> /etc/yum.repos.d/openEuler.repo
dnf clean all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此处确认是否报错。</p>
<p>如无报错，粘贴以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /tmp/rpm
<span class="token builtin class-name">cd</span> /tmp/rpm
dnf <span class="token parameter variable">-y</span> <span class="token parameter variable">--releasever</span><span class="token operator">=</span><span class="token string">'20.03LTS_SP3'</span> <span class="token parameter variable">--allowerasing</span> <span class="token parameter variable">--setopt</span><span class="token operator">=</span>deltarpm<span class="token operator">=</span>false distro-sync <span class="token parameter variable">--nogpgcheck</span> <span class="token parameter variable">--downloadonly</span> <span class="token parameter variable">--downloaddir</span><span class="token operator">=</span>/tmp/rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行完成后，确认是否报错。</p>
<p>如无报错，继续粘贴：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> remove dnf
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/yum
<span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span>  <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> /tmp/rpm/*.rpm

dnf remove systemd-sysv <span class="token parameter variable">-y</span>
dnf group <span class="token function">install</span> <span class="token string">"Minimal Install"</span> <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时系统的内核已经变为最新版本，你需要根据服务器的实际情况来更新引导和GRUB启动菜单。我的服务器配置方式如下，仅供参考，请勿照搬：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">grubcfg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /boot/ <span class="token parameter variable">-name</span> openEuler<span class="token variable">)</span></span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/crashkernel=auto/crashkernel=512M/g'</span> /etc/default/grub 
grub2-mkconfig <span class="token parameter variable">-o</span> <span class="token variable">$grubcfg</span>/grub.cfg
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/crashkernel=auto/crashkernel=512M/g'</span> <span class="token variable">$grubcfg</span>/grub.cfg
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /boot/ <span class="token parameter variable">-name</span> centos<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行完成后，确认是否报错。</p>
<p>如无报错，继续粘贴：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span>
<span class="token function">curl</span> <span class="token parameter variable">-o</span> libsystemd.pp https://plusnan.me/2024/04/24/centos7-to-openeuler/libsystemd.pp
setenforce <span class="token number">1</span>
semodule <span class="token parameter variable">-i</span> libsystemd.pp
<span class="token function">rm</span> libsystemd.pp
dnf reinstall systemd systemd-libs systemd-udev systemd-help systemd-container <span class="token parameter variable">-y</span>
setenforce <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如全部无报错，输入 reboot 重启服务器。</p>
<p>重启完成后，输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span>
<span class="token function">cat</span> /etc/os-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>检查操作系统版本，如Linux内核变4.19，操作系统变openEuler，然后再检查各应用运行情况，如果没发现问题，说明CentOS
7已成功升级到openEuler 20.03。</p>
<h3 id="二openeuler-20.03-升-22.03-sp3">二、openEuler 20.03 升 22.03
SP3</h3>
<p>原始来源：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDg3MjM4Mjk=">（华为欧拉系统)openEuler-20.03-LTS-SP3升级openEuler-22.03-LTS-SP3教程<i class="fa fa-external-link-alt"></i></span>，有改动。</p>
<h4 id="初始化">初始化</h4>
<p>直接粘贴：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf <span class="token parameter variable">-y</span> update

<span class="token comment"># 刚升级过来，无需再备份了</span>
<span class="token comment"># cp -r /etc/yum.repos.d/ /etc/yum.repos.d.bak</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/yum.repos.d/*

<span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> https://repo.openeuler.org/openEuler-22.03-LTS-SP3/OS/x86_64/Packages/openEuler-release-22.03LTS_SP3-56.oe2203sp3.x86_64.rpm
<span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> https://repo.openeuler.org/openEuler-22.03-LTS-SP3/OS/x86_64/Packages/openEuler-repos-1.0-3.6.oe2203sp3.x86_64.rpm
<span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span> https://repo.openeuler.org/openEuler-22.03-LTS-SP3/OS/x86_64/Packages/openEuler-gpg-keys-1.0-3.6.oe2203sp3.x86_64.rpm
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/repo.openeuler.org/repo.huaweicloud.com\/openeuler/g'</span> /etc/yum.repos.d/openEuler.repo
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/metalink=/#metalink=/g'</span> /etc/yum.repos.d/openEuler.repo
dnf clean all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="软件包升级">软件包升级</h4>
<p>接下来，从20.03升到22.03时，很可能会出现软件包冲突，此处需要手工解决冲突，然后再完成升级。</p>
<p>先输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf <span class="token parameter variable">-y</span> <span class="token parameter variable">--releasever</span><span class="token operator">=</span><span class="token string">'22.03LTS_SP3'</span> <span class="token parameter variable">--allowerasing</span> <span class="token parameter variable">--setopt</span><span class="token operator">=</span>deltarpm<span class="token operator">=</span>false distro-sync <span class="token parameter variable">--nogpgcheck</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行完成后，如果没有报错，可跳过本章节剩余步骤。如果系统报错，注意报错内容，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">file &#x2F;usr&#x2F;share&#x2F;glib-2.0&#x2F;schemas&#x2F;org.ukui.power-manager.gschema.xml from install of ukui-power-manager-3.1.2-5.oe2203sp2.x86_64 conflicts with file from package ukui-power-manager-common-2.0.3-1.oe1.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>整理一下<code>from package</code>后面的内容，如不是系统核心组件，可先将其卸载，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> nss-tools-3.90.0-2.el7_9.x86_64 nss-softokn-freebl-3.90.0-6.el7_9.x86_64 nss-sysinit-3.90.0-2.el7_9.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>处理完成后，重新执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf <span class="token parameter variable">-y</span> <span class="token parameter variable">--releasever</span><span class="token operator">=</span><span class="token string">'22.03LTS_SP3'</span> <span class="token parameter variable">--allowerasing</span> <span class="token parameter variable">--setopt</span><span class="token operator">=</span>deltarpm<span class="token operator">=</span>false distro-sync <span class="token parameter variable">--nogpgcheck</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果还报<code>conflicts with file from package</code>的错，就继续按上面方式删除冲突的软件包。</p>
<p>在安装过程中，会出现ldconfig的报错，这个报错可以忽略，当安装完成后，该错误会自然消失。</p>
<h4 id="继续完成升级">继续完成升级</h4>
<p>粘贴以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">--rebuilddb</span>
dnf group <span class="token function">install</span> <span class="token string">"Minimal Install"</span> <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>更新GRUB，此处需根据服务器实际情况执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">grubcfg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /boot/ <span class="token parameter variable">-name</span> openEuler<span class="token variable">)</span></span>
grub2-mkconfig <span class="token parameter variable">-o</span> <span class="token variable">$grubcfg</span>/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可考虑卸载旧内核，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf list installed <span class="token operator">|</span> <span class="token function">grep</span> kernel
<span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> kernel-4.19.90-2401.1.0.0233.oe1

<span class="token builtin class-name">export</span> <span class="token assign-left variable">grubcfg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /boot/ <span class="token parameter variable">-name</span> openEuler<span class="token variable">)</span></span>
grub2-mkconfig <span class="token parameter variable">-o</span> <span class="token variable">$grubcfg</span>/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>确认无报错后，reboot重启服务器，如服务器正常启动，各应用运行正常，表示升级成功。</p>
<h2 id="其他事项">其他事项</h2>
<h3 id="安装docker">安装Docker</h3>
<p>直接粘贴以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/docker-ce.repo https://repo.huaweicloud.com/docker-ce/linux/centos/docker-ce.repo
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/\$releasever/7/g'</span> /etc/yum.repos.d/docker-ce.repo
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/download.docker.com/repo.huaweicloud.com\/docker-ce/'</span> /etc/yum.repos.d/docker-ce.repo

dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-ce-cli containerd.io

systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="升级ssh勤奋版">升级SSH（勤奋版）</h3>
<p>以下内容来自<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZvcmVzdHFxL2FydGljbGUvZGV0YWlscy8xMzI3MzMxMzY=">编译国产openEuler
22.03 LTS系统OpenSSH 9.4的rpm安装包<i class="fa fa-external-link-alt"></i></span>，有改动。</p>
<p>找一台能够编译的服务器，在此系统上构建rpm包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> rpm-build zlib-devel openssl-devel gcc perl-devel pam-devel

<span class="token builtin class-name">cd</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> rpmbuild/<span class="token punctuation">&#123;</span>SOURCES,SPECS<span class="token punctuation">&#125;</span>
<span class="token builtin class-name">cd</span> rpmbuild/SOURCES/
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssh-9.4p1.tar.gz <span class="token parameter variable">-k</span> https://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.4p1.tar.gz
<span class="token function">curl</span> <span class="token parameter variable">-o</span> x11-ssh-askpass-1.2.4.1.tar.gz <span class="token parameter variable">-k</span> https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssl-1.1.1v.tar.gz <span class="token parameter variable">-k</span> https://www.openssl.org/source/openssl-1.1.1v.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建<code>~/rpmbuild/SOURCES/sshd.pam.oe2203</code>，内容<a
href="sshd.pam.oe2203">从这里下载</a>。</p>
<p>创建<code>~/rpmbuild/SPECS/openssh.spec</code>，内容<a
href="openssh.spec">从这里下载</a>。</p>
<p>操作完成后，开始构建安装包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/rpmbuild/SPECS/
rpmbuild <span class="token parameter variable">-bb</span> openssh.spec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>构建完成后进行升级：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/rpmbuild/RPMS/x86_64
<span class="token function">rpm</span> <span class="token parameter variable">-iUv</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为OpenSSH
9.*加密算法只支持256位以上，因此原来的配置文件不能直接用了，先替换配置文件，再重启服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
/bin/cp /etc/ssh/sshd_config.rpmnew /etc/ssh/sshd_config

<span class="token comment"># 根据实际情况修改配置</span>
<span class="token function">vim</span> /etc/ssh/sshd_config

systemctl restart sshd

<span class="token comment"># 检查升级情况</span>
<span class="token function">ssh</span> <span class="token parameter variable">-V</span>
sshd <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>构建完成后，可将<code>~/rpmbuild/RPMS/x86_64</code>中的安装包拷出来，直接给其他服务器使用，不用再重新构建了。</p>
<h3 id="升级ssh懒人版">升级SSH（懒人版）</h3>
<p>如果你是openEuler 22.03，x86_84架构，比较懒：</p>
<p><strong>警告：以下命令仅供参考，后果自负</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/openssh-9.4
<span class="token builtin class-name">cd</span> openssh-9.4
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssh-9.4p1-oe2203.x86_64.rpm https://plusnan.me/2024/04/24/centos7-to-openeuler/openssh-9.4p1-oe2203.x86_64.rpm
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssh-clients-9.4p1-oe2203.x86_64.rpm https://plusnan.me/2024/04/24/centos7-to-openeuler/openssh-clients-9.4p1-oe2203.x86_64.rpm
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssh-debuginfo-9.4p1-oe2203.x86_64.rpm https://plusnan.me/2024/04/24/centos7-to-openeuler/openssh-debuginfo-9.4p1-oe2203.x86_64.rpm
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssh-debugsource-9.4p1-oe2203.x86_64.rpm https://plusnan.me/2024/04/24/centos7-to-openeuler/openssh-debugsource-9.4p1-oe2203.x86_64.rpm
<span class="token function">curl</span> <span class="token parameter variable">-o</span> openssh-server-9.4p1-oe2203.x86_64.rpm https://plusnan.me/2024/04/24/centos7-to-openeuler/openssh-server-9.4p1-oe2203.x86_64.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-iUv</span> *

<span class="token function">mv</span> /etc/sysconfig/sshd.rpmsave /etc/sysconfig/sshd
<span class="token function">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
/bin/cp <span class="token parameter variable">-f</span> /etc/ssh/sshd_config.rpmnew /etc/ssh/sshd_config

systemctl restart sshd
systemctl status sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="不满足信创要求">不满足信创要求</h3>
<p>领导说openEuler不在信创目录？没看到“华为”两个字吗，敢说华为不信创，你这领导是不想干了吗？</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDg0NzAzNzk=">从Centos-7迁移到(华为欧拉系统)openEuler-20.03-LTS-SP3的教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDg3MjM4Mjk=">（华为欧拉系统)openEuler-20.03-LTS-SP3升级openEuler-22.03-LTS-SP3教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZvcmVzdHFxL2FydGljbGUvZGV0YWlscy8xMzI3MzMxMzY=">编译国产openEuler
22.03 LTS系统OpenSSH 9.4的rpm安装包<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>openEuler</tag>
        <tag>信创</tag>
      </tags>
  </entry>
</search>
